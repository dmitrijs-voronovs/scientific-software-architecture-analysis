id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1155,Energy Efficiency,adapt,adapted,1155,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1453,Energy Efficiency,energy,energy,1453,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1476,Energy Efficiency,energy,energy,1476,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1578,Energy Efficiency,energy,energy,1578,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3083,Energy Efficiency,energy,energy,3083,"he proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matri",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3247,Energy Efficiency,energy,energy,3247,".; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geom",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3511,Energy Efficiency,energy,energy,3511,"ted trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3583,Energy Efficiency,energy,energy,3583,"mple, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5173,Energy Efficiency,energy,energy,5173,"es, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cf",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5547,Energy Efficiency,energy,energy,5547,"..) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in C",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7068,Energy Efficiency,energy,energy,7068,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7731,Energy Efficiency,monitor,monitor,7731,"ow is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:11377,Energy Efficiency,energy,energy,11377," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:12798,Energy Efficiency,energy,energy,12798,"convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Rea",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:13499,Energy Efficiency,energy,energy,13499,"s. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:16109,Energy Efficiency,energy,energy,16109,"2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; -------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20120,Energy Efficiency,energy,energy,20120,"ow.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 natu",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20179,Energy Efficiency,energy,energy,20179,"ergy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule.",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20248,Energy Efficiency,energy,energy,20248,"<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PS",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20299,Energy Efficiency,energy,energy,20299,"-------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20353,Energy Efficiency,energy,energy,20353,"-------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:22766,Energy Efficiency,energy,energy,22766,"000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argume",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:23041,Energy Efficiency,energy,energy,23041,"000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:23243,Energy Efficiency,energy,energy,23243,"2802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computa",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:23288,Energy Efficiency,energy,energy,23288,"2802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computa",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:23723,Energy Efficiency,energy,energy,23723,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated top",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:25561,Energy Efficiency,energy,energy,25561,".; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:26226,Energy Efficiency,energy,energy,26226,"need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR pro",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:29252,Energy Efficiency,charge,charge,29252,"gles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 form",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:30151,Energy Efficiency,energy,energy,30151," ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:30208,Energy Efficiency,energy,energy,30208,"his applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31635,Energy Efficiency,energy,energy,31635,"he cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; C",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31664,Energy Efficiency,energy,energy,31664,"he cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; C",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:32158,Energy Efficiency,energy,energy,32158,"rough BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s defa",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:32286,Energy Efficiency,energy,energy,32286,"SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; s",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:32366,Energy Efficiency,energy,energy,32366,"ization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF m",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:32468,Energy Efficiency,energy,energy,32468,"C) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since d",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33149,Energy Efficiency,energy,energy,33149,"or cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour modu",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33259,Energy Efficiency,energy,energy,33259,"by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33379,Energy Efficiency,energy,energy,33379,"ctice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written t",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33631,Energy Efficiency,energy,energy,33631,"e nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33807,Energy Efficiency,energy,energy,33807," are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the followin",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:371,Integrability,interface,interface,371,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:853,Integrability,interface,interface,853,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:990,Integrability,interface,interface,990,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1127,Integrability,interface,interface,1127,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1667,Integrability,interface,interface,1667,", the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REF",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:2938,Integrability,interface,interface,2938,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:2980,Integrability,wrap,wrap,2980,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3941,Integrability,interface,interface,3941,"cessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6638,Integrability,interface,interface,6638," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7364,Integrability,interface,interface,7364,"he molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:9991,Integrability,depend,depending,9991,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:10440,Integrability,interface,interface,10440,"tion for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:11487,Integrability,interface,interface,11487," CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be autom",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:12472,Integrability,wrap,wrapped,12472,"lues, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:12604,Integrability,wrap,wrappers,12604,"4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:13239,Integrability,wrap,wrapper,13239,"le, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; --------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:15837,Integrability,wrap,wrapper,15837,"4.1 -0.3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:16329,Integrability,wrap,wrapper,16329,"0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a com",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:17271,Integrability,wrap,wrappers,17271,"/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:17942,Integrability,interface,interface,17942,"tal CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20648,Integrability,interface,interface,20648,".007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.000",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:20964,Integrability,interface,interface,20964,"87331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.91786912",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:25401,Integrability,interface,interface,25401,"; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:27176,Integrability,interface,interface,27176,"een; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:27888,Integrability,interface,interface,27888,"mizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:28629,Integrability,interface,interface,28629,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:28902,Integrability,integrat,integration,28902,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:29174,Integrability,contract,contract,29174,"r MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with ener",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:30828,Integrability,rout,route,30828," implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; C",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:32789,Integrability,contract,contract,32789,"e those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_sc",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:35010,Integrability,rout,route,35010,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1155,Modifiability,adapt,adapted,1155,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3786,Modifiability,variab,variables,3786,"cessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:4114,Modifiability,variab,variables,4114," N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:4151,Modifiability,variab,variables,4151," N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5105,Modifiability,flexible,flexible,5105,"tesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5743,Modifiability,extend,extended,5743," will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:13923,Modifiability,variab,variable,13923," 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281 -80.72845373 1 -40.36421659 -2; NBC1-MeMe-3.7 -0.5390 -0.0961 0.4429 -80.72852567 1 -40.36418623 -2; NBC1-MeMe-3.8 -0.5150 -0.1430 0.3720 -80.72855247 1 -40.36416227 -2; NBC1-MeMe-3.9 -0.4800 -0.1659 0.3141 -80.72855167 1 -40.36414365 -2; NBC1-MeMe-4.0 -0.4390 -0.1733 0.2657 -80.72853498 1 -40.36412938 -2; NBC1-MeMe-4.1 -0.3960 -0.1712 0.224",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:17759,Modifiability,variab,variables,17759,"--------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 inpu",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:19039,Modifiability,variab,variables,19039,"rd mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:33525,Modifiability,flexible,flexible,33525,"e nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:34814,Modifiability,variab,variables,34814,"PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:35207,Modifiability,variab,variable,35207,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1497,Performance,optimiz,optimize,1497,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1526,Performance,optimiz,optimize,1526,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:1614,Performance,optimiz,optimize,1614,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6353,Performance,perform,perform,6353,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Severa",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6370,Performance,optimiz,optimizations,6370,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Severa",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6537,Performance,optimiz,optimizations,6537," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6576,Performance,optimiz,optimizations,6576," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6604,Performance,optimiz,optimizations,6604," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6709,Performance,optimiz,optimizations,6709,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; N",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6738,Performance,optimiz,optimizer,6738,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; N",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:6785,Performance,optimiz,optimization,6785,"st be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization b",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7001,Performance,optimiz,optimize,7001,"run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7082,Performance,optimiz,optimize,7082,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7107,Performance,optimiz,optimization,7107,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7459,Performance,optimiz,optimizations,7459,"he; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7498,Performance,optimiz,optimizations,7498,"ons in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7590,Performance,optimiz,optimization,7590,"ons in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7657,Performance,optimiz,optimization,7657,"ption is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7767,Performance,optimiz,optimization,7767,"ow is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:11026,Performance,optimiz,optimize,11026,"rtesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specif",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:11403,Performance,optimiz,optimize,11403," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:11926,Performance,optimiz,optimize,11926,"he; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:12522,Performance,optimiz,optimization,12522,"lues, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:17388,Performance,optimiz,optimize,17388,"/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:23735,Performance,optimiz,optimize,23735,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated top",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:25698,Performance,optimiz,optimize,25698,"AS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections wi",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:26249,Performance,optimiz,optimize,26249,"need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR pro",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:26868,Performance,optimiz,optimizations,26868,"e exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:26910,Performance,optimiz,optimizations,26910,"e exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31293,Performance,optimiz,optimization,31293,"; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; en",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31338,Performance,optimiz,optimization,31338," contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31391,Performance,optimiz,optimization,31391," contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31469,Performance,optimiz,optimizer,31469," PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_pr",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:31503,Performance,optimiz,optimization,31503,"ikely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywor",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:34266,Performance,optimiz,optimizations,34266," \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5012,Safety,avoid,avoid,5012,"andwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manua",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:12256,Safety,safe,safe,12256,"all PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:34059,Safety,avoid,avoid,34059,"examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:885,Security,access,access,885,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:2852,Security,access,accessible,2852,"guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the du",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:3680,Security,access,accessible,3680,"mple, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:22262,Security,access,accessed,22262,"d, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the de",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:22412,Security,access,accessible,22412,"ich; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:24002,Security,access,accessible,24002," of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, ",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:5926,Testability,test,tests,5926,"s, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_converg",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:7406,Testability,test,tests,7406,"he; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:25447,Testability,test,tested,25447,"to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:2907,Usability,simpl,simplest,2907,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:2972,Usability,simpl,simply,2972,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:18564,Usability,clear,clear,18564,"nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour-1.html:28806,Usability,simpl,simple,28806,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4manual/1.4.0/cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour-1.html
https://psicode.org/psi4manual/1.4.0/cfour.html:496,Availability,avail,available,496,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:623,Availability,down,download,623,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1084,Availability,error,error,1084,"s    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the p",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1555,Availability,avail,available,1555,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:4216,Availability,toler,tolerant,4216,"SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # mul",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:10146,Availability,avail,available,10146,"4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which w",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12614,Availability,avail,available,12614,"4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:18813,Availability,error,error,18813,"g; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20031,Availability,avail,available,20031,"ariables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:27153,Availability,avail,available,27153,"een; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:27865,Availability,avail,available,27865,"mizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33563,Availability,down,down,33563,"e nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:34483,Availability,avail,available,34483,"ult overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control t",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:635,Deployability,install,install,635,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:28902,Deployability,integrat,integration,28902,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:35881,Deployability,update,updated,35881,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1155,Energy Efficiency,adapt,adapted,1155,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1453,Energy Efficiency,energy,energy,1453,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1476,Energy Efficiency,energy,energy,1476,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1578,Energy Efficiency,energy,energy,1578,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3083,Energy Efficiency,energy,energy,3083,"he proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matri",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3247,Energy Efficiency,energy,energy,3247,".; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geom",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3511,Energy Efficiency,energy,energy,3511,"ted trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3583,Energy Efficiency,energy,energy,3583,"mple, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5173,Energy Efficiency,energy,energy,5173,"es, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cf",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5547,Energy Efficiency,energy,energy,5547,"..) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in C",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7068,Energy Efficiency,energy,energy,7068,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7731,Energy Efficiency,monitor,monitor,7731,"ow is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:11377,Energy Efficiency,energy,energy,11377," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12798,Energy Efficiency,energy,energy,12798,"convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Rea",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:13499,Energy Efficiency,energy,energy,13499,"s. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:16109,Energy Efficiency,energy,energy,16109,"2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; -------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20120,Energy Efficiency,energy,energy,20120,"ow.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 natu",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20179,Energy Efficiency,energy,energy,20179,"ergy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule.",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20248,Energy Efficiency,energy,energy,20248,"<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PS",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20299,Energy Efficiency,energy,energy,20299,"-------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20353,Energy Efficiency,energy,energy,20353,"-------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgere",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:22766,Energy Efficiency,energy,energy,22766,"000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argume",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:23041,Energy Efficiency,energy,energy,23041,"000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:23243,Energy Efficiency,energy,energy,23243,"2802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computa",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:23288,Energy Efficiency,energy,energy,23288,"2802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computa",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:23723,Energy Efficiency,energy,energy,23723,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated top",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:25561,Energy Efficiency,energy,energy,25561,".; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:26226,Energy Efficiency,energy,energy,26226,"need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR pro",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:29252,Energy Efficiency,charge,charge,29252,"gles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 form",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:30151,Energy Efficiency,energy,energy,30151," ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:30208,Energy Efficiency,energy,energy,30208,"his applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31635,Energy Efficiency,energy,energy,31635,"he cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; C",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31664,Energy Efficiency,energy,energy,31664,"he cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; C",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:32158,Energy Efficiency,energy,energy,32158,"rough BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s defa",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:32286,Energy Efficiency,energy,energy,32286,"SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; s",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:32366,Energy Efficiency,energy,energy,32366,"ization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF m",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:32468,Energy Efficiency,energy,energy,32468,"C) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since d",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33149,Energy Efficiency,energy,energy,33149,"or cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour modu",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33259,Energy Efficiency,energy,energy,33259,"by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33379,Energy Efficiency,energy,energy,33379,"ctice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written t",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33631,Energy Efficiency,energy,energy,33631,"e nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33807,Energy Efficiency,energy,energy,33807," are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the followin",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:371,Integrability,interface,interface,371,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:853,Integrability,interface,interface,853,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:990,Integrability,interface,interface,990,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1127,Integrability,interface,interface,1127,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1667,Integrability,interface,interface,1667,", the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REF",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:2938,Integrability,interface,interface,2938,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:2980,Integrability,wrap,wrap,2980,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3941,Integrability,interface,interface,3941,"cessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6638,Integrability,interface,interface,6638," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7364,Integrability,interface,interface,7364,"he molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:9991,Integrability,depend,depending,9991,"507630 0.00881949 ~; 2 -76.332260965382 -0.000018117284 0.00048446 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in PSI4 format. See Memory Specification for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argum",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:10440,Integrability,interface,interface,10440,"tion for details. When; specified, the memory value is passed on to Cfour by setting keywords; CFOUR_MEMORY_SIZE and CFOUR_MEM_UNIT=MB.; PSI4 has an extensive basis set library in; Gaussian94 format. See Basis Sets for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (e.g., jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:11487,Integrability,interface,interface,11487," CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be autom",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12472,Integrability,wrap,wrapped,12472,"lues, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12604,Integrability,wrap,wrappers,12604,"4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:13239,Integrability,wrap,wrapper,13239,"le, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; --------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:15837,Integrability,wrap,wrapper,15837,"4.1 -0.3960 -0.1712 0.2248 -80.72850993 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:16329,Integrability,wrap,wrapper,16329,"0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the cbs() wrapper allows any; compound computational method that can be expressed through CBS to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through PSI4 and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a com",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:17271,Integrability,wrap,wrappers,17271,"/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:17942,Integrability,interface,interface,17942,"tal CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20648,Integrability,interface,interface,20648,".007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.000",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:20964,Integrability,interface,interface,20964,"87331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used.; energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). Caution; Some features are not yet implemented. Buy a developer a coffee. No PSI Variables for properties: e.g., SCF DIPOLE X; No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. Gradients and Arrays; In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the GRD file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by PSI4; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while PSI4 naturally; expects the gradient to be aligned with the active molecule. The geometry; in GRD and the geometry of PSI4‘s active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.91786912",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:25401,Integrability,interface,interface,25401,"; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:27176,Integrability,interface,interface,27176,"een; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP pe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:27888,Integrability,interface,interface,27888,"mizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:28629,Integrability,interface,interface,28629,"SD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computation",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:28902,Integrability,integrat,integration,28902,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:29174,Integrability,contract,contract,29174,"r MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with ener",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:30828,Integrability,rout,route,30828," implied in the molecule block.; memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). Specifying anything in PSI4 format (molecule, basis, options,; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; C",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:32789,Integrability,contract,contract,32789,"e those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywords that are nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_sc",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:35010,Integrability,rout,route,35010,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1155,Modifiability,adapt,adapted,1155,"ties; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PS",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3786,Modifiability,variab,variables,3786,"cessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this s",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:4114,Modifiability,variab,variables,4114," N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:4151,Modifiability,variab,variables,4151," N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords i",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5105,Modifiability,flexible,flexible,5105,"tesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5743,Modifiability,extend,extended,5743," will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:13923,Modifiability,variab,variable,13923," 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; NBC10 database:; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense. ==> Requested Energy <==. ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281 -80.72845373 1 -40.36421659 -2; NBC1-MeMe-3.7 -0.5390 -0.0961 0.4429 -80.72852567 1 -40.36418623 -2; NBC1-MeMe-3.8 -0.5150 -0.1430 0.3720 -80.72855247 1 -40.36416227 -2; NBC1-MeMe-3.9 -0.4800 -0.1659 0.3141 -80.72855167 1 -40.36414365 -2; NBC1-MeMe-4.0 -0.4390 -0.1733 0.2657 -80.72853498 1 -40.36412938 -2; NBC1-MeMe-4.1 -0.3960 -0.1712 0.224",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:17759,Modifiability,variab,variables,17759,"--------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 inpu",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:19039,Modifiability,variab,variables,19039,"rd mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:33525,Modifiability,flexible,flexible,33525,"e nominally applicable for pure-PSI4 modules directs them to fulfil analogous roles; in the Cfour program (e.g., MAXITER is used to set; CFOUR_SCF_MAXCYC). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that PSI4‘s defaults don’t; get imposed on Cfour. Also, in the case where a translatable pure-PSI4 keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:34814,Modifiability,variab,variables,34814,"PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:35207,Modifiability,variab,variable,35207,"te; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; That is, portions of an input file that run PSI4 modules are; unaffected. Additionally, there are a few arguments to the function; run_cfour() that control the Cfour scratch; directory. table of contents. Interface to CFOUR by J. Stanton & J. Gauss; Installation; Cfour for PSI4 Users; PSI4 for Cfour Users; Output; Functionality; Specification Details; Misc. Running. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1497,Performance,optimiz,optimize,1497,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1526,Performance,optimiz,optimize,1526,"ilable after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE whe",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:1614,Performance,optimiz,optimize,1614,"s provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are t",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6353,Performance,perform,perform,6353,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Severa",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6370,Performance,optimiz,optimizations,6370,"ow in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Severa",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6537,Performance,optimiz,optimizations,6537," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6576,Performance,optimiz,optimizations,6576," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6604,Performance,optimiz,optimizations,6604," Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfou",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6709,Performance,optimiz,optimizations,6709,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; N",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6738,Performance,optimiz,optimizer,6738,"gers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; N",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:6785,Performance,optimiz,optimization,6785,"st be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization b",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7001,Performance,optimiz,optimize,7001,"run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7082,Performance,optimiz,optimize,7082,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7107,Performance,optimiz,optimization,7107,"nto PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7459,Performance,optimiz,optimizations,7459,"he; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7498,Performance,optimiz,optimizations,7498,"ons in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7590,Performance,optimiz,optimization,7590,"ons in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7657,Performance,optimiz,optimization,7657,"ption is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7767,Performance,optimiz,optimization,7767,"ow is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; ---------------------------------------------------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:11026,Performance,optimiz,optimize,11026,"rtesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the BASIS keyword instead of CFOUR_BASIS; (accompanied, of course, by specifying the molecule PSI4-style).; Internally, PSI4 processes the basis set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specif",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:11403,Performance,optimiz,optimize,11403," set as usual, then translates; the basis set format and writes out a GENBAS file with an entry for; each atom. The P4C4 interface sets keyword CFOUR_BASIS=SPECIAL; and CFOUR_SPHERICAL as appropriate, then writes the basis section; necessary for SPECIAL below the *CFOUR(...) block. (I’m sorry that the; name of the basis doesn’t appear in ZMAT, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.); The input below employs a PSI4 library basis set and also introduces; the final stage of conversion toward PSI4 format. Instead of the; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:11926,Performance,optimiz,optimize,11926,"he; generic 'cfour', the computational method is specified as the first; argument to the optimize() call. In the computational; command below, the string argument 'c4-ccsd(t)' directs that a CCSD(T); computation be run using Cfour (as opposed to 'ccsd(t)' which would; call PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12522,Performance,optimiz,optimization,12522,"lues, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the database() wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input; set {; basis jun-cc-pvdz; d_convergence 9; }. database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:17388,Performance,optimiz,optimize,17388,"/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points.; molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }. set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields:; ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for cbs(), the; basis set needs to be specified through BASIS, not; CFOUR_BASIS. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming).; Finally, any number and combination of jobs can be run from a single; PSI4 input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:23735,Performance,optimiz,optimize,23735,"be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated top",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:25698,Performance,optimiz,optimize,25698,"AS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections wi",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:26249,Performance,optimiz,optimize,26249,"need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR pro",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:26868,Performance,optimiz,optimizations,26868,"e exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:26910,Performance,optimiz,optimizations,26910,"e exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of a collection of molecules in a; single input, with summarization of results. Examples:; cfour/pywrap-db1 and cfour/psi-a24-grad.; cbs() for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of PSI4 and Cfour computational methods and PSI4 basis sets.; Example: cfour/pywrap-cbs1. Not Yet Implemented. Ground state CI energies and optimizations; Excited state energies and optimizations; Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables.; Property calls that required extra computation not yet translated into; properties() computation command; Frequencies. Energy methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31293,Performance,optimiz,optimization,31293,"; method call) starts building a *CFOUR(...) directive for the; ZMAT file. Since the contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; en",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31338,Performance,optimiz,optimization,31338," contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31391,Performance,optimiz,optimization,31391," contents of the cfour {...} block are; blindly appended to any input interpreted from PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31469,Performance,optimiz,optimizer,31469," PSI4 format, mixing; of PSI4 and Cfour input formats likely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_pr",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:31503,Performance,optimiz,optimization,31503,"ikely will give rise to multiple; *CFOUR(...) directives in the prospective ZMAT, execution of; which will be trapped and halted. Proper uses for the cfour {...}; block are for the sandwich mode, where the entire ZMAT is enclosed,; or for extra directives like %excite*, which presently have no other; specification route.; Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between PSI4 and Cfour and it’s not; practical to compare exponent-to-exponent, any input file with both; BASIS and CFOUR_BASIS keywords present will halt. Once; a basis set has been requested through BASIS, overriding the; default spherical/Cartesian setting must be done through; PUREAM (as opposed to CFOUR_SPHERICAL).; Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (e.g., CFOUR_GEO_MAXCYC) are; ineffective, as the Cfour optimizer is never invoked. PSI4; optimization keywords (e.g., GEOM_MAXITER) instead fill; these roles.; Specifying the computational method (through, for instance,; energy('c4-ccsd') instead of energy('cfour')) often; sets additional keywords consistent with best practices (e.g.,; CFOUR_CC_PROGRAM). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. runs in vcc since that’s Cfour’s default for cc_program; set cfour_calc_level ccsd; energy('cfour'). runs in ecc since Cfour’s default overwritten by keyword; set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). runs in ecc since that’s best practice for the requested ccsd; energy('c4-ccsd'). runs in vcc since hidden default overwritten by keyword; set cfour_cc_program vcc; energy('c4-ccsd'). Specifying certain keywor",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:34266,Performance,optimiz,optimizations,34266," \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at; present be specified.; The execution of xcfour can be modified by a few parameters. Setting; the option CFOUR_OMP_NUM_THREADS sets the environment variable; OMP_NUM_THREADS for only the duration of the Cfour computation.; ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5012,Safety,avoid,avoid,5012,"andwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Whenever the molecule is supplied in PSI4 format, the job control; keywords must be too. All Cfour keywords are the usual; ones, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manua",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:12256,Safety,safe,safe,12256,"all PSI4 CC code). Specifying computational method in this manner; sets CFOUR_CALC_LEVEL from the argument and; CFOUR_DERIV_LEVEL as appropriate from the function call:; energy(), gradient(), or; optimize(). If those keywords are also set explicitly to; contradictory values, the interface will complain.; memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, etc. and; some options can be set according to best practices. Practically speaking,; CFOUR_CC_PROGRAM (and eventually CFOUR_ABCDTYPE) will; always be set to the fastest safe value.; For example, the input above will run with CFOUR_CC_PROGRAM=ECC; unless explicitly set to VCC.; An advantage of PSI4‘s Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core “wrappers” available in PSI4 are; nbody_gufunc(),; database(), and; cbs(); read their respective sections; for details, but an overview is provided here. nbody_gufunc(); computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both).; molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }. Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ. for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)). yields; R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:34059,Safety,avoid,avoid,34059,"examples. uses \(10^{-7}\) SCF conv crit since that’s Cfour’s default; for CFOUR_SCF_CONV; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; keyword; set cfour_scf_conv 6; energy('c4-scf'). uses \(10^{-5}\) SCF conv crit since default overwritten by; SCF module keyword; set d_convergence 5; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten by; SCF module keyword (local scope works, too) where; the PSI4‘s more flexible float input has been rounded down to; the integer required by Cfour; set scf d_convergence 5e-6; energy('c4-scf'). uses \(10^{-6}\) SCF conv crit since default overwritten; and Cfour module keyword trumps PSI4 SCF module keyword; set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. Note; Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the Cfour module along with; BASIS and PUREAM (opt, too?). Misc. Running¶; Naturally, in PSI4 multiple jobs can be run in succession from the input file.; Control optimizations with optking keywords HERE. Cfour GRD file is; written to PSI4 output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the PSI4; output file and is available from input as get_gradient().; sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the cfour {...} block are tacked onto; the end of the ZMAT file that is otherwise written from psi style; format. It is by this route that, for example %excite* sections can at",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:885,Security,access,access,885,"﻿. Interface to CFOUR by J. Stanton & J. Gauss. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CFOUR by J. Stanton & J. Gauss. Interface to CFOUR by J. Stanton & J. Gauss¶; Code author: Lori A. Burns; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples; PSI4 contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and Jürgen Gauss (U. Mainz),; which is available after a license agreement from; http://www.cfour.de/. Installation¶; Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by PSI4, the program; binary (xcfour) must be found in your PATH or; PSIPATH. The GENBAS file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the “Cfour way” using a custom GENBAS file (the distributed; one is included with the interface), it, too, must be in PATH or; PSIPATH. If PSI4 is unable to execute the binary, an error; will be reported. Caution; The p4c4 interface hasn’t been fully adapted for the new March 2014 version. Cfour for PSI4 Users¶. Set memory as usual; Set molecule as usual; Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases); Set the task as usual, indicating Cfour as the intended code by; prepending “c4-” to the method argument. So energy('scf') becomes; energy('c4-scf') and optimize('ccsd(t)') becomes; optimize('c4-ccsd(t)'). Find available methods for; energy() at Energy (CFOUR); and for optimize() at Gradient (CFOUR).; Generally, the p4c4 interface will handle best practices for path of; execution: vcc/ecc, derivative type, etc. The user is still; responsible for setting convergence, frozen core, guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:2852,Security,access,accessible,2852,"guess, diis, etc.; For the moment, so-called “best-practices” keywords are summarized at; Best Practices.; For the type of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the du",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:3680,Security,access,accessible,3680,"mple, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interface. We’ll call; this mode of basic utility the “sandwich” mode.; Molecule specification in PSI4 allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See Molecule and Geometry Specification for details and; cfour/mints5 for examples. When a PSI4-style molecule is; supplied, its geometry is written to ZMAT in Cartesian form and the; CFOUR_COORDINATES=CARTESIAN, CFOUR_UNITS=ANGSTROM,; CFOUR_CHARGE, and CFOUR_MULTIPLICITY keywords are set; appropriately in the *CFOUR(...) directive. Warning; There exist molecules (e.g., allene) where the; inertial frame is no",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:22262,Security,access,accessed,22262,"d, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in GRD, the result of which; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the de",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:22412,Security,access,accessible,22412,"ich; is printed below and passed on to Optking.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3. 1 2 3. 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; Matrix object through; psi4.core.get_gradient().; Cfour Files; The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary P4C4_INFO. That is,; P4C4_INFO['zmat'] returns a string of the input file sent to Cfour.; Accessible arguments are zmat, output, and any that have been; produced of grd. For example, to print to the screen if CC convergence; is reached, the following could be placed in the PSI4 input file.; energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. Scratch Files; By default, a separate subdirectory for each Cfour call is created within; the job’s scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:24002,Security,access,accessible,24002," of the; Cfour scratch, execute with, for example, energy('cfour',; path='/full/path/to/cfour/scratch'). Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with energy('cfour', keep=True) or; (the default) energy('cfour', keep=False). path and keep are; keyword arguments that get interpreted by the; run_cfour() function documented below. psi4.driver.procrouting.interface_cfour.run_cfour(name[, keep, path])[source]¶; Function that prepares environment and input files; for a calculation calling Stanton and Gauss’s CFOUR code.; Also processes results back into Psi4 format.; This function is not called directly but is instead called by; energy() or optimize() when a Cfour; method is requested (through name argument). In order to function; correctly, the Cfour executable xcfour must be present in; PATH or PSIPATH. Many PSI Variables extracted from the Cfour output; Python dictionary of associated file constants accessible as P4C4_INFO['zmat'], P4C4_INFO['output'], P4C4_INFO['grd'], etc. Parameters. name (str) – 'c4-scf' || 'c4-ccsd(t)' || 'cfour' || etc.; First argument, usually unlabeled. Indicates the computational; method to be applied to the system. keep (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether to delete the Cfour scratch directory upon; completion of the Cfour job. path (str) – Indicates path to Cfour scratch directory (with respect to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, ",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:5926,Testability,test,tests,5926,"s, prepended by cfour_ to avoid any possible name conflicts. As; detailed in Job Control Keywords, setting keywords is flexible in; format. The previous example translates to:; # UHF-SCF energy calculation. molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0; }. set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }. energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; booleans have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in psi4/tests/cfour/ starting with sp- that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into PSI4 format. Note; PSI4 only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of CFOUR_CALC_LEVEL, CFOUR_REFERENCE, etc. Whenever the molecule is supplied in PSI4 format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_converg",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:7406,Testability,test,tests,7406,"he; PSI4 module optking drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the only; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization:; memory 200 mb. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {. cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of energy(); for optimize() to trigger an optimization. Setting; G_CONVERGENCE=CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; psi4/tests/cfour/ starting with opt- show basic geometry; optimizations. cfour/mints5-grad shows optimizations from a; variety of molecule input formats, and cfour/psi-ghost-grad; shows an optimization with ghosted atoms. To obtain a single gradient; sans optimization, call instead gradient().; Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ~ character.; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:25447,Testability,test,tested,25447,"to Psi4; scratch directory). Otherwise, the default is a subdirectory; within the Psi4 scratch directory.; If specified, GENBAS and/or ZMAT within will be used. genbas (str) – Indicates that contents should be used for GENBAS file. GENBAS is a complicated topic. It is quite unnecessary if the; molecule is from a molecule {…} block and basis is set through; PSI4‘s BASIS keyword. In that case, a GENBAS is written from; LibMints and all is well. Otherwise, a GENBAS is looked for in; the usual places: PSIPATH, PATH, PSIDATADIR/basis. If path kwarg is; specified, also looks there preferentially for a GENBAS. Can; also specify GENBAS within an input file through a string and; setting the genbas kwarg. Note that due to the input parser’s; aggression, blank lines need to be replaced by the text blankline. Functionality¶; Through clever use of the cfour {...} block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into PSI4 data objects.; Implemented. Single-point energy() commands for ground state; methods. Examples:; cfour/sp-rhf-ccsd_t_-ao-ecc, cfour/scf4,; cfour/mints5.; Analytic gradient() and optimize(); commands for ground state methods. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: cfour/opt-rhf-ccsd_t_,; cfour/mp2-1, and cfour/mints5-grad. Warning; There exist molecules (e.g., allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with “Axis unreconcilable between; QC programs”. I will get to this soon. Finite difference of energy gradient() and; optimize() for methods.; Force with gradient('name', dertype=0), etc..; nbody_gufunc() for computation of interaction energies with or; without counterpoise correction. Example: cfour/dfmp2-1.; database() for computation of",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:2907,Usability,simpl,simplest,2907,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:2972,Usability,simpl,simply,2972,"e of computation intended, find appropriate options at; Keywords. These keyword summaries contain the same; information as the proper CFOUR options list; plus notes on keyword relevance when run through PSI4. Information; at the CFOUR manual may; also be useful, as may the many samples at psi4/samples/cfour.; Set Cfour keywords just like PSI4 keywords. The names of keywords; are unchanged beyond a prepended “cfour_”. (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; CFOUR_CALC_LEVEL and CFOUR_REFERENCE when used in; PSI4.); In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; REFERENCE will appropriately set CFOUR_REFERENCE. For a; list of applicable keywords, see source of; muster_psi4options.; Consult Functionality for information on what Cfour; functionality is accessible through PSI4. PSI4 for Cfour Users¶; In the simplest use of the Psi4/Cfour interface, a PSI4 input file; can simply “wrap” a ZMAT file and execute xcfour. This is; illustrated in the following example:; cfour {; UHF-SCF energy calculation; N; H 1 R; H 1 R 2 A. R=1.008; A=105.0. *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }. energy('cfour'). Here, the contents of the cfour {...} block are written directly to a; ZMAT file. This is joined by a default GENBAS file; (psi4/psi4/share/psi4/basis/GENBAS). To preferentially use your own GENBAS,; place it in PATH or PSIPATH. The line calling; energy() with argument 'cfour' invokes; xcfour.; After execution of the energy('cfour') line completes, Cfour results; are read back into PSI4 format and are thereafter accessible for; further processing in the input file. See Output for; details. This storage of results in variables and arrays in memory for; the duration of the PSI4 instance (as opposed to solely in files); is the only advantage thus far incurred by the P4C4 interf",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:18564,Usability,clear,clear,18564,"nature of preceding or following; jobs, it is prudent to separate them with the following:; clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. Warning; Because p4c4 does not inspect the contents of the cfour {...}; block, once the user specifies a PSI4-style molecule, the; interface cannot judge whether a sandwich mode (drop the PSI4 molecule; and use the cfour block as the entirety of the ZMAT) or a standard mode; (translate the PSI4 molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a PSI4 molecule and a molecule in the cfour block,; ZMAT will end up with multiple molecules and multiple *CFOUR(...); blocks, and it will not run. Therefore, if mixing sandwich and; standard or pure-PSI4 computations in an input file, place all; the sandwich jobs at the beginning before declaring PSI4; molecules. If necessary, clear the cfour block with cfour {} before; commencing standard P4C4 jobs. Output¶; The output of xcfour invoked from a PSI4 input file is; written to the PSI4 output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in CFOUR ERROR CODE.; Energies & Scalars; After execution of xcfour has completed, the output string is; extensively parsed and appropriate results are stored in PSI; Variables. All gleaned variables are printed in the; Cfour output section of the PSI4 output file, as shown below.; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour.html:28806,Usability,simpl,simple,28806,"full control over cfour program. Gradient methods available through P4C4 interface. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Specification Details¶; The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between PSI4 and; Cfour specification format are generally resolved behind the scenes:; not according to a simple rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a PSI4 module). Much can be gleaned by just running; inputs and inspecting the ZMAT passed to Cfour, but when questions; arise, here are the specifics, the governing laws. Specifying a piece of input in PSI4 format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through molecule; optional_molecule_name {...}), memory (through memory; value unit), computational method (through . If Cfour keywords; are specified with values that contradict the PSI4 input,; execution is halted.; As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the cfour_units; angstrom setting is permissible, since it concurs with the value; implied in the molecule block.; memory 300 mb. molecule {; H;",MatchSource.WIKI,psi4manual/1.4.0/cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour.html
https://psicode.org/psi4manual/1.4.0/cfour_table_energy-1.html:940,Deployability,update,updated,940,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour_table_energy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour_table_energy-1.html
https://psicode.org/psi4manual/1.4.0/cfour_table_energy.html:940,Deployability,update,updated,940,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour_table_energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour_table_energy.html
https://psicode.org/psi4manual/1.4.0/cfour_table_grad-1.html:940,Deployability,update,updated,940,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour_table_grad-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour_table_grad-1.html
https://psicode.org/psi4manual/1.4.0/cfour_table_grad.html:940,Deployability,update,updated,940,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Introduction; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cfour_table_grad.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cfour_table_grad.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:692,Availability,avail,available,692,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:737,Availability,avail,available,737,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:2429,Availability,checkpoint,checkpoint,2429,"let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: b",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:3416,Availability,checkpoint,checkpoints,3416,"her or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to us",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:4516,Availability,toler,tolerances,4516,"teger; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstre",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7095,Availability,error,errors,7095," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7197,Availability,failure,failure,7197," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:879,Deployability,install,installed,879,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:978,Deployability,install,installed,978,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1065,Deployability,install,install,1065,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1258,Deployability,install,installation,1258,"r: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, AC",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1642,Deployability,configurat,configuration,1642,"C and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunct",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:4057,Deployability,update,update,4057,"ype: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5833,Deployability,install,installation,5833,"cessive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cm",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5976,Deployability,install,installation,5976,"ault: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:8356,Deployability,update,updated,8356,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1895,Energy Efficiency,energy,energy,1895,"using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:2168,Energy Efficiency,energy,energy,2168,"H,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization proc",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:4649,Energy Efficiency,energy,energy,4649,"r or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whet",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5058,Energy Efficiency,reduce,reduced,5058,"ue DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1224,Integrability,depend,dependent,1224," CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1488,Integrability,depend,dependent,1488,"those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whethe",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5783,Integrability,depend,dependencies,5783,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6941,Integrability,depend,dependencies,6941,"to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_E",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7136,Integrability,message,message,7136," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1642,Modifiability,config,configuration,1642,"C and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunct",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5309,Modifiability,config,configure,5309,": integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -D",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5664,Modifiability,variab,variable,5664,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5747,Modifiability,variab,variable,5747,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:5911,Modifiability,variab,variable,5911,"EFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6094,Modifiability,variab,variable,6094,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6212,Modifiability,variab,variable,6212,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6645,Modifiability,config,configdir,6645,"lib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS;",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7012,Modifiability,plugin,plugin,7012," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7146,Modifiability,plugin,plugin,7146," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:8027,Modifiability,config,configure,8027,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:8076,Modifiability,plugin,plugin,8076,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:7229,Performance,optimiz,optimization,7229," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:1196,Safety,detect,detect,1196," CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:2730,Safety,avoid,avoid,2730,"ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6149,Safety,detect,detecting,6149,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6230,Safety,detect,detecting,6230,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2-1.html:6831,Safety,detect,detectable,6831,"MPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_",MatchSource.WIKI,psi4manual/1.4.0/chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2-1.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:692,Availability,avail,available,692,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:737,Availability,avail,available,737,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:2429,Availability,checkpoint,checkpoint,2429,"let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: b",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:3416,Availability,checkpoint,checkpoints,3416,"her or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to us",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:4516,Availability,toler,tolerances,4516,"teger; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstre",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7095,Availability,error,errors,7095," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7197,Availability,failure,failure,7197," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:879,Deployability,install,installed,879,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:978,Deployability,install,installed,978,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1065,Deployability,install,install,1065,"﻿. Interface to CheMPS2 by S. Wouters. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1258,Deployability,install,installation,1258,"r: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, AC",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1642,Deployability,configurat,configuration,1642,"C and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunct",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:4057,Deployability,update,update,4057,"ype: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5833,Deployability,install,installation,5833,"cessive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cm",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5976,Deployability,install,installation,5976,"ault: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:8356,Deployability,update,updated,8356,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1895,Energy Efficiency,energy,energy,1895,"using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:2168,Energy Efficiency,energy,energy,2168,"H,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization proc",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:4649,Energy Efficiency,energy,energy,4649,"r or not to print the correlation functions after the DMRG calculation. Type: boolean; Default: false. DMRG_SCF_ACTIVE_SPACE¶. Which active space to use for DMRG calculations: –> input with SCF rotations (INPUT); –> natural orbitals (NO); –> localized and ordered orbitals (LOC). Type: string; Possible Values: INPUT, NO, LOC; Default: INPUT. DMRG_SCF_DIIS_THR¶. When the update norm is smaller than this value DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whet",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5058,Energy Efficiency,reduce,reduced,5058,"ue DIIS starts. Type: double; Default: 1e-2. DMRG_SCF_GRAD_THR¶. The density RMS convergence to stop an instruction during successive DMRG instructions. Type: double; Default: 1.e-6. DMRG_SCF_MAX_ITER¶. Maximum number of DMRG iterations. Type: integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1224,Integrability,depend,dependent,1224," CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1488,Integrability,depend,dependent,1488,"those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whethe",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5783,Integrability,depend,dependencies,5783,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6941,Integrability,depend,dependencies,6941,"to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_E",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7136,Integrability,message,message,7136," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1642,Modifiability,config,configuration,1642,"C and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunct",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5309,Modifiability,config,configure,5309,": integer; Default: 100. DMRG_SCF_STATE_AVG¶. Whether or not to use state-averaging for roots >=2 with DMRG-SCF. Type: boolean; Default: true. DMRG_SWEEP_DVDSON_RTOL¶. The residual tolerances for the Davidson diagonalization during DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_ENERGY_CONV¶. The energy convergence to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -D",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5664,Modifiability,variab,variable,5664,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5747,Modifiability,variab,variable,5747,"ns. Type: array; Default: No Default. DMRG_SWEEP_MAX_SWEEPS¶. The maximum number of sweeps to stop an instruction during successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_NOISE_PREFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:5911,Modifiability,variab,variable,5911,"EFAC¶. The noise prefactors for successive DMRG instructions. Type: array; Default: No Default. DMRG_SWEEP_STATES¶. The number of reduced renormalized basis states to be retained during successive DMRG instructions. Type: array; Default: No Default. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6094,Modifiability,variab,variable,6094,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6212,Modifiability,variab,variable,6212,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6645,Modifiability,config,configdir,6645,"lib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS;",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7012,Modifiability,plugin,plugin,7012," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7146,Modifiability,plugin,plugin,7146," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:8027,Modifiability,config,configure,8027,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:8076,Modifiability,plugin,plugin,8076,"DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CheMPS2 by S. Wouters. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:7229,Performance,optimiz,optimization,7229," build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_DIIS_THR; DMRG_SCF_GRAD_THR; DMRG_SCF_MAX_ITER; DMRG_SCF_STATE_AVG; DMRG_SWEEP_DVDSON_RTOL; DMRG_SWEEP_ENERGY_CONV; DMRG_SWEEP_MAX_SWEEPS; DMRG_SWEEP_NOISE_PREFAC; DMRG_SWEEP_STATES; DMRG_UNITARY_WRITE. How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when buil",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:1196,Safety,detect,detect,1196," CheMPS2 by S. Wouters. Interface to CheMPS2 by S. Wouters¶; Code author: Sebastian Wouters; Section author: Lori A. Burns; Module: Keywords, PSI Variables, Samples. Note; As of late June 2016, DMRG keywords in PSI4 have been; realigned with those of the chemps2 executable, plus a; “dmrg_” prefix. The only exceptions are the orbital space; PSI4 keywords RESTRICTED_DOCC (formerly; CheMPS2 used FROZEN_DOCC, contrary to its; definition) and ACTIVE which are passed along to; CheMPS2 keywords NOCC and NACT. A translation table; is available. Installation¶; Binary. CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CheMPS2 has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CheMPS2 can be obtained through conda install chemps2.; Then enable it as a feature with ENABLE_CheMPS2,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect CheMPS2 and activate dependent code. To remove a conda installation, conda remove chemps2. Source. If using PSI4 built from source and you want CheMPS2 built from; from source also,; enable it as a feature with ENABLE_CheMPS2,; and let the build system fetch and build it and activate dependent code. Methods¶. Density matrix renormalization group capabilities of PSI4 through CheMPS2¶. name; calls method; Energy; Gradient. dmrg-ci; DMRG configuration interaction (CI); RHF/ROHF; —. dmrg-scf; DMRG complete active space SCF (CASSCF); RHF/ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:2730,Safety,avoid,avoid,2730,"ROHF; —. dmrg-caspt2; DMRG CAS with 2nd-order perturbation theory (CASPT2); RHF/ROHF; —. DMRG Keywords¶. DMRG_CASPT2_CALC¶. Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG¶. CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA¶. CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS¶. Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS¶. Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE¶. Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION¶. Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP¶. The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT¶. Whether to start the active space localization process from a random unitary or the unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE¶. DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE¶. Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY¶. The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT¶. Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRINT_CORR¶. Whether or not to print the correlation functions after the DMRG",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6149,Safety,detect,detecting,6149,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6230,Safety,detect,detecting,6230,"efault. DMRG_UNITARY_WRITE¶. Whether or not to store the unitary on disk (convenient for restarting). Type: boolean; Default: true. How to configure CheMPS2 for building Psi4¶; Role and Dependencies. Role — In PSI4, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CheMPS2; Upstream Dependencies — CheMPS2 \(\Leftarrow\) BLAS/LAPACK, HDF5 \(\Leftarrow\) zlib. CMake Variables. ENABLE_CheMPS2 — CMake variable toggling whether Psi4 builds with CheMPS2; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle l",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/chemps2.html:6831,Safety,detect,detectable,6831,"MPS2, set to an installation directory containing include/chemps2/DMRG.h; CheMPS2_DIR — CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing share/cmake/CheMPS2/CheMPS2Config.cmake; CMAKE_DISABLE_FIND_PACKAGE_CheMPS2 — CMake variable to force internal build of CheMPS2 instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_CheMPS2 — CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. Examples. Build bundled. >>> cmake -DENABLE_CheMPS2=ON. Build without CheMPS2. >>> cmake. Build bundled with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. Link against pre-built. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. Link against pre-built with specific HDF5. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". Build bundled despite pre-built being detectable. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. How to fix “plugin needed to handle lto object” when building CheMPS2¶; For building with GCC, errors involving unresolved symbols or a message; “plugin needed to handle lto object” may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to setup or cmake:; -DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar .; Details at https://github.com/psi4/psi4/issues/414. table of contents. Interface to CheMPS2 by S. Wouters; Installation; Methods; DMRG Keywords; DMRG_CASPT2_CALC; DMRG_CASPT2_IMAG; DMRG_CASPT2_IPEA; DMRG_CASPT2_ORBS; DMRG_DIIS; DMRG_DIIS_WRITE; DMRG_EXCITATION; DMRG_IRREP; DMRG_LOCAL_INIT; DMRG_MOLDEN_WRITE; DMRG_MPS_WRITE; DMRG_MULTIPLICITY; DMRG_OPDM_AO_PRINT; DMRG_PRINT_CORR; DMRG_SCF_ACTIVE_SPACE; DMRG_SCF_",MatchSource.WIKI,psi4manual/1.4.0/chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/chemps2.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:753,Deployability,install,installed,753,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:878,Deployability,integrat,integrating,878,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:927,Deployability,install,installing,927,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1127,Deployability,integrat,integrated,1127,"e conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integratin",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1659,Deployability,configurat,configuration,1659," is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code stylin",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1765,Deployability,install,install,1765," installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style th",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1804,Deployability,install,install,1804,"he code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git ho",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1849,Deployability,install,install,1849," automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and ya",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1905,Deployability,install,install,1905,"to your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code s",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1945,Deployability,install,install,1945,"hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:2094,Deployability,integrat,integrating,2094,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:2180,Deployability,install,installed,2180,"gin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:3105,Deployability,update,updated,3105,"gin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:2080,Energy Efficiency,power,powerful,2080,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:878,Integrability,integrat,integrating,878,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1127,Integrability,integrat,integrated,1127,"e conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integratin",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:2094,Integrability,integrat,integrating,2094,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1179,Modifiability,plugin,plugin,1179,"nd Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every ",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1193,Modifiability,config,configured,1193,"nd Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every ",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1659,Modifiability,config,configuration,1659," is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code stylin",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:1695,Modifiability,config,config,1695,"your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of co",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style-1.html:223,Safety,avoid,avoid,223,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style-1.html
https://psicode.org/psi4manual/1.4.0/code_style.html:753,Deployability,install,installed,753,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:878,Deployability,integrat,integrating,878,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:927,Deployability,install,installing,927,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1127,Deployability,integrat,integrated,1127,"e conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integratin",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1659,Deployability,configurat,configuration,1659," is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code stylin",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1765,Deployability,install,install,1765," installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style th",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1804,Deployability,install,install,1804,"he code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git ho",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1849,Deployability,install,install,1849," automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and ya",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1905,Deployability,install,install,1905,"to your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code s",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1945,Deployability,install,install,1945,"hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:2094,Deployability,integrat,integrating,2094,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:2180,Deployability,install,installed,2180,"gin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:3105,Deployability,update,updated,3105,"gin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:2080,Energy Efficiency,power,powerful,2080,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:878,Integrability,integrat,integrating,878,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1127,Integrability,integrat,integrated,1127,"e conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integratin",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:2094,Integrability,integrat,integrating,2094,"yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of contents. Code style conventions; How to impose code style through your editor; How to impose code style through Git hooks; How to run code-style tools clang-format and yapf manually; How and when to not apply code styling to your contributions. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. © Copyright 2021, The Psi4 Project.; Last updated on",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1179,Modifiability,plugin,plugin,1179,"nd Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every ",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1193,Modifiability,config,configured,1193,"nd Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every ",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1659,Modifiability,config,configuration,1659," is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code stylin",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:1695,Modifiability,config,config,1695,"your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commit, but the --no-verify; option can be used to skip their execution.; Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. How to run code-style tools clang-format and yapf manually¶; The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::clang-format -style=file -i git diff –relative –name-only HEAD – *.cc *.h; yapf -i git diff –relative –name-only HEAD – *.py. How and when to not apply code styling to your contributions¶; TODO. table of co",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/code_style.html:223,Safety,avoid,avoid,223,"﻿. Code style conventions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Code style conventions. Code style conventions¶; It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; clang-format and yapf can be used to format C++ and Python code,; respectively, according to a predefined style file.; PSI4 provides the psi4/.clang-format and psi4/.style.yapf files in the root; folder of the project.; It is recommended that modifications and/or new files checked into the; repository are formatted according to these style files using clang-format; and yapf. It is then helpful if these tools be part of your development toolchain.; Once clang-format and yapf are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. By integrating the formatters into your editor.; By installing Git hooks to run the formatters when committing.; By running the formatters manually on the modified files. How to impose code style through your editor¶; Both clang-format and yapf can be integrated into widely used editors.; The Neoformat plugin can be configured; to format files when saving them to disk. How to impose code style through Git hooks¶; Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with git add are formatted according to the style; before they committing them with git commit.; The hook to be modified is then the pre-commit hook.; PSI4 uses the pre-commit framework, with configuration file psi4/.pre-commit-config.yaml.; To take advantage of pre-commit hooks, you will need to install the pre-commit utility:. ::pip install pre-commit. or using Conda:. ::conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::pre-commit install. Pre-commit hooks will be run on every git commi",MatchSource.WIKI,psi4manual/1.4.0/code_style.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/code_style.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:276,Availability,avail,available,276,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:375,Availability,avail,available,375,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1198,Availability,avail,available,1198,"e available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 b",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1566,Availability,down,downloads,1566,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1895,Availability,down,download,1895,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2764,Availability,down,download,2764,"; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) ech",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2980,Availability,echo,echo,2980,"x/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python versio",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3070,Availability,echo,echo,3070," at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" select",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3329,Availability,down,download,3329,"get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationT",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3451,Availability,down,download,3451,"native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3670,Availability,echo,echo,3670,"tem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3766,Availability,echo,echo,3766,"si4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/d",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3958,Availability,down,download,3958,"cense terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or P",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4126,Availability,down,downloaded,4126,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4703,Availability,echo,echo,4703,"onda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH tha",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11905,Availability,robust,robust,11905,"ns. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13312,Availability,echo,echo,13312,"ns of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Ins",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13914,Availability,echo,echo,13914," Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available,",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14873,Availability,avail,available,14873,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14897,Availability,avail,available,14897,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15402,Availability,avail,availability,15402,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18048,Availability,down,download,18048,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:237,Deployability,update,updated,237,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:321,Deployability,install,installers,321,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:995,Deployability,update,updated,995,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1091,Deployability,install,install,1091,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1458,Deployability,install,installation,1458,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1485,Deployability,install,install,1485,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1526,Deployability,install,installer,1526,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1684,Deployability,install,installer,1684,"package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1843,Deployability,install,install,1843,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1884,Deployability,install,installer,1884,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1936,Deployability,install,installers,1936,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2185,Deployability,install,install,2185,"able as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2226,Deployability,install,installer,2226,"able as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2258,Deployability,install,install,2258,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2299,Deployability,install,installer,2299,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2439,Deployability,install,installers,2439,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4009,Deployability,install,installs,4009,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4091,Deployability,install,install,4091,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4215,Deployability,install,install,4215," >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an An",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4248,Deployability,install,install,4248,"n versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest ni",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4981,Deployability,install,installation,4981," py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment wher",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5006,Deployability,install,installs,5006,"cted; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; a",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5072,Deployability,install,installer,5072,"cted; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; a",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5172,Deployability,install,install,5172,"ne; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5248,Deployability,install,install,5248,"ne; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5519,Deployability,release,releases,5519,"t needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.c",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5846,Deployability,install,installation,5846,"s"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annu",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6670,Deployability,update,update,6670,"_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster an",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6713,Deployability,update,update,6713,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6743,Deployability,install,installation,6743,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6778,Deployability,release,release,6778,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6924,Deployability,update,update,6924,"t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --h",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:6970,Deployability,update,update,6970,"t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --h",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7056,Deployability,install,installers,7056," creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7079,Deployability,update,update,7079," creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7112,Deployability,update,update,7112," psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7142,Deployability,install,installation,7142," psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7236,Deployability,update,update,7236,"f snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7292,Deployability,update,update,7292,"f snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7358,Deployability,install,install,7358,"; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> con",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7556,Deployability,install,install,7556,"X-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCa",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:8732,Deployability,install,install,8732,".6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build c",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9212,Deployability,deploy,deployments,9212," -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; examp",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9579,Deployability,install,install,9579,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the c",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9795,Deployability,release,release,9795,"ddons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10564,Deployability,install,install,10564,"LN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev fo",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10625,Deployability,install,install,10625,"desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10693,Deployability,install,installer,10693,"dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda p",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11192,Deployability,install,install,11192,"-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installin",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11388,Deployability,install,installer,11388,"e; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installa",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11547,Deployability,install,install,11547,"may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11593,Deployability,install,install,11593,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11634,Deployability,install,installer,11634,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:12080,Deployability,install,installation,12080," or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13450,Deployability,update,update,13450,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13544,Deployability,install,install,13544,"utable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13643,Deployability,install,installation,13643,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.ana",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14121,Deployability,install,installation,14121,".sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other so",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14256,Deployability,install,installation,14256,"nda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between mult",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14769,Deployability,install,install,14769,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14923,Deployability,install,install,14923,"sting/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/mini",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15003,Deployability,install,install,15003," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15141,Deployability,install,installed,15141," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15340,Deployability,install,installing,15340,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15501,Deployability,install,installation,15501,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15530,Deployability,install,installed,15530,"ges. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified thr",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16649,Deployability,install,install,16649,"nvs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly b",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16669,Deployability,release,release,16669,"nvs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly b",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16702,Deployability,install,install,16702,"; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16734,Deployability,install,install,16734,"; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16773,Deployability,install,install,16773,"ate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda c",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16793,Deployability,release,release,16793,"ate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda c",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16836,Deployability,install,install,16836,"or csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> co",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16898,Deployability,release,release,16898,">>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16917,Deployability,update,update,16917," >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16948,Deployability,install,install,16948,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distr",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16963,Deployability,release,release,16963,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distr",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17205,Deployability,install,install,17205,"e the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17305,Deployability,install,install,17305,"BS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17357,Deployability,install,install,17357,"/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Det",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17399,Deployability,install,install,17399,"/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Det",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17448,Deployability,install,install,17448,". Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17510,Deployability,install,install,17510," Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Inde",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17600,Deployability,update,update,17600,"S cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Co",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17641,Deployability,install,install,17641,"ease. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17907,Deployability,install,install,17907,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17996,Deployability,install,install,17996,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18037,Deployability,install,installer,18037,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18070,Deployability,install,install,18070,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18111,Deployability,install,installer,18111,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18143,Deployability,install,install,18143,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18208,Deployability,update,update,18208,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18333,Deployability,install,installer,18333,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:18677,Deployability,update,updated,18677,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2118,Energy Efficiency,green,green,2118,"d-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:8522,Energy Efficiency,adapt,adapt,8522,".; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9307,Energy Efficiency,adapt,adapt,9307,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:7531,Integrability,depend,dependencies,7531," ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> ps",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:8160,Integrability,message,message,8160,">> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for clus",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9735,Integrability,depend,dependencies,9735,"ddons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:11765,Integrability,depend,dependencies,11765,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14527,Integrability,depend,dependency,14527,"nda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installati",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15061,Integrability,depend,dependencies,15061," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17078,Integrability,depend,dependency,17078,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17770,Integrability,depend,dependency,17770,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1128,Modifiability,plugin,plugins,1128,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1248,Modifiability,plugin,plugins,1248,"e available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 b",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4842,Modifiability,variab,variable,4842,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:8522,Modifiability,adapt,adapt,8522,".; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:9307,Modifiability,adapt,adapt,9307,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10103,Modifiability,config,configure,10103,"ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cm",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10459,Modifiability,plugin,plugins,10459,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10501,Modifiability,variab,variables,10501,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13480,Modifiability,config,config,13480,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14053,Modifiability,variab,variable,14053,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14607,Modifiability,config,config,14607,"es/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15100,Modifiability,sandbox,sandbox,15100," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17038,Modifiability,sandbox,sandbox,17038,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17730,Modifiability,sandbox,sandbox,17730,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:882,Performance,perform,performance,882,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:10441,Performance,cache,cache,10441,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17068,Performance,load,loaded,17068,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17760,Performance,load,loaded,17760,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15207,Safety,avoid,avoid,15207,"e end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:849,Security,access,access,849,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:1027,Security,access,accessible,1027,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:2112,Testability,test,test,2112,"d-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3156,Testability,log,log,3156,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3165,Testability,log,log,3165,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3215,Testability,test,test,3215,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3852,Testability,log,log,3852,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3861,Testability,log,log,3861,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:3911,Testability,test,test,3911,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4421,Testability,test,test,4421,"-keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4445,Testability,test,tested,4445,"1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions;",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4818,Testability,log,log,4818,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4827,Testability,log,log,4827,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:5734,Testability,test,test,5734,"=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an exis",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13401,Testability,log,log,13401,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13410,Testability,log,log,13410,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13628,Testability,test,test,13628,"nda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --ad",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13638,Testability,test,test,13638,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.ana",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:13715,Testability,test,tested,13715,": in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14029,Testability,log,log,14029,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:14038,Testability,log,log,14038,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15100,Testability,sandbox,sandbox,15100," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:15292,Testability,test,test,15292,"e end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found th",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17038,Testability,sandbox,sandbox,17038,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:17730,Testability,sandbox,sandbox,17730,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:4209,Usability,guid,guide,4209," >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an An",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda-1.html:16151,Usability,undo,undo,16151,"n Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate",MatchSource.WIKI,psi4manual/1.4.0/conda-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda-1.html
https://psicode.org/psi4manual/1.4.0/conda.html:276,Availability,avail,available,276,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:375,Availability,avail,available,375,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1198,Availability,avail,available,1198,"e available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 b",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1566,Availability,down,downloads,1566,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1895,Availability,down,download,1895,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2764,Availability,down,download,2764,"; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) ech",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2980,Availability,echo,echo,2980,"x/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python versio",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3070,Availability,echo,echo,3070," at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" select",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3329,Availability,down,download,3329,"get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationT",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3451,Availability,down,download,3451,"native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3670,Availability,echo,echo,3670,"tem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3766,Availability,echo,echo,3766,"si4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/d",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3958,Availability,down,download,3958,"cense terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or P",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4126,Availability,down,downloaded,4126,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4703,Availability,echo,echo,4703,"onda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH tha",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11905,Availability,robust,robust,11905,"ns. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13312,Availability,echo,echo,13312,"ns of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Ins",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13914,Availability,echo,echo,13914," Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available,",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14873,Availability,avail,available,14873,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14897,Availability,avail,available,14897,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15402,Availability,avail,availability,15402,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18048,Availability,down,download,18048,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:237,Deployability,update,updated,237,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:321,Deployability,install,installers,321,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:995,Deployability,update,updated,995,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1091,Deployability,install,install,1091,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1458,Deployability,install,installation,1458,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1485,Deployability,install,install,1485,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1526,Deployability,install,installer,1526,"through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns i",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1684,Deployability,install,installer,1684,"package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1843,Deployability,install,install,1843,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1884,Deployability,install,installer,1884,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1936,Deployability,install,installers,1936,"; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2185,Deployability,install,install,2185,"able as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2226,Deployability,install,installer,2226,"able as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2258,Deployability,install,install,2258,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2299,Deployability,install,installer,2299,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2439,Deployability,install,installers,2439,"ary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4009,Deployability,install,installs,4009,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4091,Deployability,install,install,4091,"ho ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4215,Deployability,install,install,4215," >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an An",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4248,Deployability,install,install,4248,"n versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest ni",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4981,Deployability,install,installation,4981," py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment wher",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5006,Deployability,install,installs,5006,"cted; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; a",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5072,Deployability,install,installer,5072,"cted; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; a",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5172,Deployability,install,install,5172,"ne; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5248,Deployability,install,install,5248,"ne; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5519,Deployability,release,releases,5519,"t needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.c",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5846,Deployability,install,installation,5846,"s"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annu",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6670,Deployability,update,update,6670,"_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster an",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6713,Deployability,update,update,6713,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6743,Deployability,install,installation,6743,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6778,Deployability,release,release,6778,"ion for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6924,Deployability,update,update,6924,"t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --h",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:6970,Deployability,update,update,6970,"t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --h",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7056,Deployability,install,installers,7056," creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7079,Deployability,update,update,7079," creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7112,Deployability,update,update,7112," psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7142,Deployability,install,installation,7142," psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7236,Deployability,update,update,7236,"f snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7292,Deployability,update,update,7292,"f snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7358,Deployability,install,install,7358,"; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> con",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7556,Deployability,install,install,7556,"X-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCa",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:8732,Deployability,install,install,8732,".6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build c",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9212,Deployability,deploy,deployments,9212," -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; examp",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9579,Deployability,install,install,9579,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the c",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9795,Deployability,release,release,9795,"ddons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10564,Deployability,install,install,10564,"LN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev fo",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10625,Deployability,install,install,10625,"desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10693,Deployability,install,installer,10693,"dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda p",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11192,Deployability,install,install,11192,"-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installin",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11388,Deployability,install,installer,11388,"e; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installa",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11547,Deployability,install,install,11547,"may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11593,Deployability,install,install,11593,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11634,Deployability,install,installer,11634,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:12080,Deployability,install,installation,12080," or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13450,Deployability,update,update,13450,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13544,Deployability,install,install,13544,"utable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13643,Deployability,install,installation,13643,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.ana",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14121,Deployability,install,installation,14121,".sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other so",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14256,Deployability,install,installation,14256,"nda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between mult",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14769,Deployability,install,install,14769,"tory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as nee",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14923,Deployability,install,install,14923,"sting/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/mini",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15003,Deployability,install,install,15003," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15141,Deployability,install,installed,15141," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15340,Deployability,install,installing,15340,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15501,Deployability,install,installation,15501,"ribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supply",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15530,Deployability,install,installed,15530,"ges. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified thr",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16649,Deployability,install,install,16649,"nvs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly b",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16669,Deployability,release,release,16669,"nvs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly b",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16702,Deployability,install,install,16702,"; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16734,Deployability,install,install,16734,"; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16773,Deployability,install,install,16773,"ate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda c",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16793,Deployability,release,release,16793,"ate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda c",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16836,Deployability,install,install,16836,"or csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> co",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16898,Deployability,release,release,16898,">>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16917,Deployability,update,update,16917," >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16948,Deployability,install,install,16948,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distr",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16963,Deployability,release,release,16963,"onfigure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distr",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17205,Deployability,install,install,17205,"e the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17305,Deployability,install,install,17305,"BS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17357,Deployability,install,install,17357,"/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Det",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17399,Deployability,install,install,17399,"/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Det",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17448,Deployability,install,install,17448,". Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17510,Deployability,install,install,17510," Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Inde",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17600,Deployability,update,update,17600,"S cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Co",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17641,Deployability,install,install,17641,"ease. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17907,Deployability,install,install,17907,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17996,Deployability,install,install,17996,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18037,Deployability,install,installer,18037,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18070,Deployability,install,install,18070,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18111,Deployability,install,installer,18111,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18143,Deployability,install,install,18143,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18208,Deployability,update,update,18208,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18333,Deployability,install,installer,18333,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:18677,Deployability,update,updated,18677,"el psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2118,Energy Efficiency,green,green,2118,"d-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:8522,Energy Efficiency,adapt,adapt,8522,".; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9307,Energy Efficiency,adapt,adapt,9307,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:7531,Integrability,depend,dependencies,7531," ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an existing PSI4 conda installation to the; newest stable release (roughly annually). It’s often a better idea to create; a new environment rather than updating the old one.; >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing PSI4 conda installation to the; latest development head (roughly nightly).; >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> ps",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:8160,Integrability,message,message,8160,">> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final -c psi4 represents any; additional channels or subchannels needed to locate all dependencies.; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for clus",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9735,Integrability,depend,dependencies,9735,"ddons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:11765,Integrability,depend,dependencies,11765,"n¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install psi4-dev for build tools.; The How to install a Psi4 binary with the Psi4conda installer, command-line uses a conda constructor to package up Miniconda,; the PSI4 conda package, the PSI4 add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ~/.condarc. But proficient; conda users may prefer to treat psi4 as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for PSI4. Installing just the psi4 package; itself will get you PSI4, whatever add-ons require linking in to; PSI4 (e.g., CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the psi4 package won’t get you add-ons that; don’t need linking (e.g., adcc and v2rdm_casscf). Quick Installation¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select betw",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14527,Integrability,depend,dependency,14527,"nda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installati",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15061,Integrability,depend,dependencies,15061," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17078,Integrability,depend,dependency,17078,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17770,Integrability,depend,dependency,17770,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1128,Modifiability,plugin,plugins,1128,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1248,Modifiability,plugin,plugins,1248,"e available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 b",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4842,Modifiability,variab,variable,4842,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:8522,Modifiability,adapt,adapt,8522,".; >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. How to use conda to compile Psi4 faster and easier¶; # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]. Build and Run path advisor for Psi4. optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`ge",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:9307,Modifiability,adapt,adapt,9307,"si4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10103,Modifiability,config,configure,10103,"ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cm",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10459,Modifiability,plugin,plugins,10459,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10501,Modifiability,variab,variables,10501,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13480,Modifiability,config,config,13480,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14053,Modifiability,variab,variable,14053,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14607,Modifiability,config,config,14607,"es/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15100,Modifiability,sandbox,sandbox,15100," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17038,Modifiability,sandbox,sandbox,17038,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17730,Modifiability,sandbox,sandbox,17730,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:882,Performance,perform,performance,882,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:10441,Performance,cache,cache,10441,"e compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include -c psi4/label/dev to get dependencies to; build current master, as opposed to latest release.; Activate environment, conda activate; p4dev. Go to where you’ve cloned psi4. Execute psi4-path-advisor.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There’s a help menu -h that gives more; info. There’s other options that will also pre-configure compilers. For; example, at GaTech psi4-path-advisor --intel works. On Macs with; XCode, psi4-path-advisor --clang works. Just read the help. For users; who want a minimal build, there’s a --disable-addons, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; — like the plugins you can always add your own CMake variables to; the command.; For run-time, you may also wish to install the optional runtime add-ons (e.g., adcc); >>> conda install psi4-rt. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain¶; psi4 - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (e.g., libgcc-ng) not compilers.; It doesn’t have the run-time qc addons psi4-rt (e.g., snsmp2) or build tools (e.g., g++, sphinx, cmake).; psi4-dev - does not have psi4 itself or the run-time addons psi4-rt or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages.; Psi4conda installer - has full-featured psi4 itself, all link-ti",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17068,Performance,load,loaded,17068,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17760,Performance,load,loaded,17760,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15207,Safety,avoid,avoid,15207,"e end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:849,Security,access,access,849,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:1027,Security,access,accessible,1027,"﻿. Conda Binary Distribution. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. Conda Binary Distribution¶. Warning; As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. PSI4 is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through Anaconda (formerly Continuum Analytics, the company that produces; Anaconda Python (a; full-fledged scientific python environment with package manager conda) and, more particularly, Miniconda (a lightweight Python; distribution with same package manager conda). Some nice features for us:. cross-platform; no root, administrator, or sudo access required; built with high-performance math libraries; lightweight software stack (<100 MB w/o PSI4; ~1 GB including PSI4, numpy, and MKL); updated nightly so new features accessible; standardizes python distribution so no need to find/install libpython packages; add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow t",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:2112,Testability,test,test,2112,"d-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages; develop PSI4 through plugins without a pre-existing development environment, see Creating a New Plugin Using a Conda Pre-compiled Binary. The PSI4 binary repository is at Anaconda (formerly Binstar).; For commands to get a default installation, go to How to install a Psi4 binary with the Psi4conda installer, command-line; or the psicode downloads page.; Users proficient with conda may prefer to consult What do the conda packages psi4 & psi4-dev and the installer psi4conda contain.; For more flexibility and a detailed explanation, go to; Detailed Installation of Miniconda and Detailed Installation of . How to install a Psi4 binary with the Psi4conda installer, download site¶; Download one of the nine installers (Linux/Mac/Windows; Py36/37/38/39).; bash it. Follow the prompts and do make the adjustments to; PATH and PSI_SCRATCH that it suggests at the end. Test; with psi4 --test (green and yellow good; red bad). Done. Explicit commands at How to install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3156,Testability,log,log,3156,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3165,Testability,log,log,3165,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3215,Testability,test,test,3215,"o install a Psi4 binary with the Psi4conda installer, command-line. How to install a Psi4 binary with the Psi4conda installer, command-line¶; Sequence of commands to get you to a working PSI4 on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into $HOME/psi4conda and; the PSI4 executable into the main conda environment at; $HOME/psi4conda/bin/psi4.; # Linux or WSL (Windows Subsystem for Linux); # py36|py37|py38|py39 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/proj",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3852,Testability,log,log,3852,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3861,Testability,log,log,3861,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:3911,Testability,test,test,3911,"sh Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Con",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4421,Testability,test,test,4421,"-keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4445,Testability,test,tested,4445,"1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions;",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4818,Testability,log,log,4818,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4827,Testability,log,log,4827,">> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module f",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:5734,Testability,test,test,5734,"=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an Ana/Miniconda distribution¶; Conda command to install the latest nightly build of PSI4 + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution.; # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to PATH and; PSI_SCRATCH that it suggests at the end. Test with psi4; --test. Configuration for this set-up is summarized at; How to run Psi4 as executable or Python module from conda installation.; Details:. It is advised to place PSI4 into a conda; environment where its libraries can’t interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (p4env above) can be; substituted.; The psi4-rt package can be added to the package list to get the; QC runtime add-ons; could say any combination of v2rdm_casscf snsmp2; openfermion-psi4 adcc cppe etc. instead of psi4-rt.; Grab a Miniconda through one of the below, selecting OS.; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". How to update a Psi4 binary¶; A. Conda command to update an exis",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13401,Testability,log,log,13401,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13410,Testability,log,log,13410,"¶; Sequence of commands to get you to a working PSI4. Installs; Miniconda into $HOME/miniconda and the PSI4 executable into the; main conda environment at $HOME/miniconda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our cha",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13628,Testability,test,test,13628,"nda/bin/psi4.; # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --ad",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13638,Testability,test,test,13638,"ac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.ana",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:13715,Testability,test,tested,13715,": in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14029,Testability,log,log,14029,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:14038,Testability,log,log,14038,"ontinuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. Now you need only specify a scratch directory; (see Scratch Files) by replacing the placeholder in the following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15100,Testability,sandbox,sandbox,15100," done!. Note; Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:15292,Testability,test,test,15292,"e end of the installation or consult step 7 below. Detailed Installation of Miniconda¶; https://docs.conda.io/en/latest/miniconda.html. Detailed Installation of PSI4¶. Subscribe to PSI4. Subscribe to our channel at https://anaconda.org/psi4 that contains the PSI4 package and several dependency packages. Make sure this shows up in your ~/.condarc file. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. Install PSI4. You can install into the main conda environment so that whenever commands conda or (Ana/Miniconda’s) python are available, then psi4 is available, too. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a conda environment that places PSI4 and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found th",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17038,Testability,sandbox,sandbox,17038,", either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:17730,Testability,sandbox,sandbox,17730,"-channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4. Uninstall PSI4 from current environment. >>> conda remove psi4. Initially install PSI4 nightly build. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. Initially install PSI4 nightly build with non-current python. >>> conda install psi4 python=3.8 -c psi4/label/dev. Update to latest PSI4 nightly build. >>> conda update psi4 -c psi4/label/dev. Initially install nightly build into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. Install a particular PSI4 version. >>> conda install psi4=1.4 -c psi4/label/dev. table of contents. Conda Binary Distribution; How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; Quick Installation; Detailed Installation of Miniconda; Detailed Installation of PSI4; Useful Commands. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Installation and Runtime Configuration; Conda Binary Distribution. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:4209,Usability,guid,guide,4209," >>> psi4 --test. # Mac; # py36|py37|py38|py39 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that psi4 is in your path, and it’s finding; all the libraries it needs. It works because PSI_SCRATCH; defaults to /tmp. Now you need only specify a permanent scratch; directory (see Scratch Files) by replacing the placeholder in the; following:; >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!; Configuration for this set-up is summarized at How to run Psi4 as executable or Python module from conda installation. Note; PSI4 installs a Python distribution alongside, so you should choose an installer based on the Python version you want, irrespective of any Python version you have. How to install a Psi4 binary into an An",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/conda.html:16151,Usability,undo,undo,16151,"n Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, etc.. In practical terms, installing into a conda environment means you can turn PSI4‘s availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, PSI4 is installed into an environment called p4env. Then the environment is activated, removing the main Ana/Miniconda bin and adding envs/p4env/bin to PATH. The conda activate command (conda >=4.4; December 2017) works in all shells, but if you’re using old source activate that only works for bash; adjust as needed for csh/tcsh.; >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. Configure environment. Preceding steps have placed conda and psi4 in your PATH, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the psi4 executable to be found through any of:. prepending to PATH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file; activating the conda environment (p4env above) in shell, ~/.bashrc, or PBS cmd file; supplying full path to executable (shell or PBS cmd file). Similarly, the scratch directory (see Scratch Files) must be specified through:. defining PSI_SCRATCH in shell, ~/.bashrc, ~/.tcshrc, or PBS cmd file. Useful Commands¶. Initially install PSI4 stable release. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. Initially install PSI4 stable release with non-current python. >>> conda install psi4 python=3.8 -c psi4. Update to latest PSI4 stable release. >>> conda update psi4 -c psi4. Initially install stable release into a conda environment “p4env” instead of “root”. This creates a sandbox with PSI4 and python (loaded as dependency). >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate",MatchSource.WIKI,psi4manual/1.4.0/conda.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/conda.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:448,Availability,down,downloads,448,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:756,Availability,avail,available,756,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1981,Availability,avail,available,1981," from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable em",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:2865,Availability,down,downloaded,2865,"are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:463,Deployability,configurat,configuration,463,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:895,Deployability,install,installed,895,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:994,Deployability,install,installed,994,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1078,Deployability,install,install,1078,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1261,Deployability,install,installation,1261,"ximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:4842,Deployability,install,installation,4842,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:5547,Deployability,update,updated,5547,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1703,Energy Efficiency,energy,energy,1703,"n¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:2782,Energy Efficiency,energy,energy,2782,"tion [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:3912,Energy Efficiency,charge,charges,3912,"able embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bund",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:341,Integrability,interface,interface,341,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1227,Integrability,depend,dependent,1227,"Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1482,Integrability,depend,dependent,1482,"The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.9420",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:463,Modifiability,config,configuration,463,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:4404,Modifiability,config,configure,4404," sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4.",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:4714,Modifiability,variab,variable,4714,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:4780,Modifiability,variab,variable,4780,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:5294,Modifiability,config,configure,5294,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:673,Performance,perform,perform,673,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe-1.html:1202,Safety,detect,detect,1202,"Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8",MatchSource.WIKI,psi4manual/1.4.0/cppe-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe-1.html
https://psicode.org/psi4manual/1.4.0/cppe.html:448,Availability,down,downloads,448,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:756,Availability,avail,available,756,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1981,Availability,avail,available,1981," from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable em",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:2865,Availability,down,downloaded,2865,"are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:463,Deployability,configurat,configuration,463,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:895,Deployability,install,installed,895,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:994,Deployability,install,installed,994,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1078,Deployability,install,install,1078,"rface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CP",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1261,Deployability,install,installation,1261,"ximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:4842,Deployability,install,installation,4842,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:5547,Deployability,update,updated,5547,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1703,Energy Efficiency,energy,energy,1703,"n¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:2782,Energy Efficiency,energy,energy,2782,"tion [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.94200 3.08900 0.38900; H 7.09700 2.51500 -2.01800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file pna_6w.pot can be downloaded; here. Keywords for CPPE¶. PE¶. PE boolean for polarizable embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:3912,Energy Efficiency,charge,charges,3912,"able embedding module. Type: boolean; Default: false. POTFILE¶. Name of the potential file OR contents of potential file to be written anonymously on-the-fly. Type: string; Default: potfile.pot. ISOTROPIC_POL¶. Make polarizabilities isotropic. Type: boolean; Default: false. INDUCED_CONVERGENCE¶. Threshold for induced moments convergence. Type: conv double; Default: 1e-8. MAXITER¶. Maximum number of iterations for induced moments. Type: integer; Default: 50. BORDER¶. Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bund",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:341,Integrability,interface,interface,341,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1227,Integrability,depend,dependent,1227,"Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1482,Integrability,depend,dependent,1482,"The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8.64800 1.07500 -1.71100; C 9.48200 0.43000 -0.80800; C 9.39600 0.75000 0.53800; C 8.48200 1.71200 0.99500; C 7.65300 2.34500 0.05500; C 7.73200 2.03100 -1.29200; H 10.18300 -0.30900 -1.16400; H 10.04400 0.25200 1.24700; H 6.9420",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:463,Modifiability,config,configuration,463,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:4404,Modifiability,config,configure,4404," sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_TYPE¶. border type, either remove or redistribute moments/polarizabilities. Type: string; Possible Values: REMOVE, REDIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4.",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:4714,Modifiability,variab,variable,4714,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:4780,Modifiability,variab,variable,4780,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:5294,Modifiability,config,configure,5294,"DIST; Default: REMOVE. BORDER_N_REDIST¶. number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER¶. order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_RMIN¶. minimum radius from QM atoms to MM sites to be taken into account for removal/redistribution. Type: double; Default: 2.2. BORDER_RMIN_UNIT¶. unit of BORDER_RMIN, default is atomic units (AU). Type: string; Possible Values: AU, AA; Default: AU. BORDER_REDIST_POL¶. redistribute polarizabilities? If false, polarizabilities are removed (default). Type: boolean; Default: false. How to configure CPPE for building Psi4¶; Role and Dependencies. Role — In PSI4, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling).; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) CPPE; Upstream Dependencies — CPPE. CMake Variables. ENABLE_cppe — CMake variable toggling whether Psi4 builds with CPPE; cppe_DIR — CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing share/cmake/cppe/cppeConfig.cmake. Examples. Build bundled. >>> cmake -DENABLE_cppe=ON. Build without CPPE. >>> cmake. table of contents. Interface to CPPE by M. Scheurer; Installation; Using the polarizable embedding model; Keywords for CPPE; PE; POTFILE; ISOTROPIC_POL; INDUCED_CONVERGENCE; MAXITER; BORDER; BORDER_TYPE; BORDER_N_REDIST; BORDER_REDIST_ORDER; BORDER_RMIN; BORDER_RMIN_UNIT; BORDER_REDIST_POL. How to configure CPPE for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:673,Performance,perform,perform,673,"﻿. Interface to CPPE by M. Scheurer. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to CPPE by M. Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; ",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cppe.html:1202,Safety,detect,detect,1202,"Scheurer. Interface to CPPE by M. Scheurer¶; Code author: Maximilian Scheurer; Section author: Maximilian Scheurer; Module: Keywords, PSI Variables. PSI4 contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721].; For a general tutorial on how to prepare/perform PE calculations, read the; tutorial review. Installation¶; Binary. CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell).; If using the PSI4 binary, CPPE has already been installed alongside.; If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; CPPE can be obtained through conda install cppe -c psi4.; Then enable it as a feature with ENABLE_cppe,; hint its location with cppe_DIR,; and rebuild PSI4 to detect CPPE and activate dependent code. To remove a conda installation, conda remove cppe. Source. If using PSI4 built from source and you want CPPE built from; from source also,; enable it as a feature with ENABLE_cppe,; and let the build system fetch and build it and activate dependent code. Using the polarizable embedding model¶; The inclusion of a PE description of the solvent into your calculation; is achieved by setting PE true in your input file. Note; At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104].; All ERI algorithms (PK, OUT_OF_CORE, DIRECT, DF, CD) are supported. Note; linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. Warning; The CPPE library cannot exploit molecular point group symmetry. A typical input for a Hartree–Fock calculation with PE would look like the following:; molecule pna {; C 8",MatchSource.WIKI,psi4manual/1.4.0/cppe.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cppe.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:3436,Availability,avail,available,3436,"1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\rho_\beta(\mathbf{r})\), together; with the total density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) + \rho_\beta(\mathbf{r})\),; and the spin density; \(\rho",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7291,Availability,down,downloaded,7291,"ed, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7266,Deployability,install,installed,7266,"ed, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7582,Deployability,install,installed,7582,"ault: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array;",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7637,Deployability,install,installed,7637," D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files gene",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7715,Deployability,release,releases,7715,"C_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_c",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7748,Deployability,install,installed,7748,"o 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; py",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7940,Deployability,install,installed,7940,"onality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; python vmd_cube.py /path/to/cube/files/ --opacity=0.5 --rx=90 --ry=60. The desired image in this case is called “",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:11912,Deployability,update,updated,11912,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:678,Energy Efficiency,energy,energy,678,"﻿. Generation of Cube Files — cubeprop(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). Generation of Cube Files — cubeprop()¶; Code author: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; Section author: Francesco A. Evangelista and Peter Kraus. psi4.cubeprop(wfn)[source]; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbital",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:942,Energy Efficiency,energy,energy,942,"﻿. Generation of Cube Files — cubeprop(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). Generation of Cube Files — cubeprop()¶; Code author: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; Section author: Francesco A. Evangelista and Peter Kraus. psi4.cubeprop(wfn)[source]; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbital",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:1620,Energy Efficiency,energy,energy,1620,"be files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option CUBEPROP_ORBITALS is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: Psi_a_5_1-B1.cube,; Psi_a_6_4-A1.cube, Psi_a_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:1715,Energy Efficiency,energy,energy,1715," cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option CUBEPROP_ORBITALS is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: Psi_a_5_1-B1.cube,; Psi_a_6_4-A1.cube, Psi_a_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocon",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:3650,Energy Efficiency,energy,energy,3650,"or 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\rho_\beta(\mathbf{r})\), together; with the total density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) + \rho_\beta(\mathbf{r})\),; and the spin density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) - \rho_\beta(\mathbf{r})\). BASIS_FUNCTIONSThis task is useful to produce cube files of the atomic orbital basis; functions \(\chi_\mu(\mathbf{r})\). ESPCalculates t",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:11330,Energy Efficiency,green,green,11330,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:9809,Integrability,message,message,9809," called “AlphaMOs.tga”, and looks like this:. Script Options¶; The help for vmd_cube.py can be obtained from the console:; >>> ./vmd_cube.py --help; usage: vmd_cube.py [-h] [--color1 [<integer>]] [--color2 [<integer>]]; [--iso [<isovalue>]] [--rx [<angle>]] [--ry [<angle>]]; [--rz [<angle>]] [--tx [<length>]] [--ty [<length>]]; [--tz [<length>]] [--opacity [<opacity>]]; [--scale [<factor>]] [--no-montage] [--no-labels]; [--imagesize [<integer>]] [--imagew [<integer>]]; [--imageh [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, defau",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7503,Modifiability,variab,variable,7503," (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cub",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:7774,Modifiability,variab,variable,7774,"o 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; py",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:3305,Performance,perform,perform,3305,"_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\r",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop-1.html:5461,Safety,avoid,avoid,5461," \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) - \rho_\beta(\mathbf{r})\). BASIS_FUNCTIONSThis task is useful to produce cube files of the atomic orbital basis; functions \(\chi_\mu(\mathbf{r})\). ESPCalculates the total (nuclear + electronic) electrostatic potential; \(V(\mathbf{r})\). DUAL_DESCRIPTORCalculates the dual descriptor from frontier orbitals:; \(f^2(\mathbf{r})=\rho_{\mathrm{LUMO}}(\mathbf{r})-\rho_{\mathrm{HOMO}}(\mathbf{r})\).; The dual descriptor is a good measure of nucleophilicity and electrophilicity,; containing information essentially equivalent to both Fukui functions combined.; More details on the dual descriptor itself can be found in [Morell:2005:205],; while the current implementation is described in [Martinez-Araya:2015:451].; This feature is currently only supported for closed shell systems. Note; The ESP task requires the user to specify a density-fitting basis; via the DF_BASIS_SCF keyword. Warning; It is important to specify the CUBEPROP_ORBITALS option when; dealing with large molecules to avoid running out of disk space.; For example, using the default grid spacing of; 0.2 Ångström, the size of a single cube file for a molecule like water; is of the order of 1.4 MB. For a molecule with 200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords¶. CUBEPROP_TASKS¶. Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBEPROP_FILEPATH¶. Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS¶. List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop-1.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:3436,Availability,avail,available,3436,"1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\rho_\beta(\mathbf{r})\), together; with the total density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) + \rho_\beta(\mathbf{r})\),; and the spin density; \(\rho",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7291,Availability,down,downloaded,7291,"ed, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7266,Deployability,install,installed,7266,"ed, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7582,Deployability,install,installed,7582,"ault: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array;",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7637,Deployability,install,installed,7637," D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files gene",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7715,Deployability,release,releases,7715,"C_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_c",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7748,Deployability,install,installed,7748,"o 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; py",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7940,Deployability,install,installed,7940,"onality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; python vmd_cube.py /path/to/cube/files/ --opacity=0.5 --rx=90 --ry=60. The desired image in this case is called “",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:11912,Deployability,update,updated,11912,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:678,Energy Efficiency,energy,energy,678,"﻿. Generation of Cube Files — cubeprop(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). Generation of Cube Files — cubeprop()¶; Code author: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; Section author: Francesco A. Evangelista and Peter Kraus. psi4.cubeprop(wfn)[source]; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbital",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:942,Energy Efficiency,energy,energy,942,"﻿. Generation of Cube Files — cubeprop(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). Generation of Cube Files — cubeprop()¶; Code author: Robert M. Parrish, Francesco A. Evangelista and Peter Kraus; Section author: Francesco A. Evangelista and Peter Kraus. psi4.cubeprop(wfn)[source]; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns; None. Parameters; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbital",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:1620,Energy Efficiency,energy,energy,1620,"be files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option CUBEPROP_ORBITALS is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: Psi_a_5_1-B1.cube,; Psi_a_6_4-A1.cube, Psi_a_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:1715,Energy Efficiency,energy,energy,1715," cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). Introduction¶; PSI4 has the ability to export cube files that store information about; basis functions, molecular orbitals, the electron density, and; the electrostatic potential (ESP). Cube files store the value of a scalar; quantity on a regular Cartesian grid, and can be visualized with several; visualization programs, some of which are free, like VMD; (http://www.ks.uiuc.edu/Research/vmd/).; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True; set cubeprop_tasks ['orbitals']; set cubeprop_orbitals [5,6,-5,-6]. E, wfn = energy('scf', return_wfn=True); cubeprop(wfn). In this example, the cubeprop(); call after the energy('scf') command; executes the cubeprop code. The array CUBEPROP_TASKS specifies which; tasks should be executed. In this case the task 'orbitals' generates cube; files for orbitals. The CUBEPROP_ORBITALS option specifies that cube files; should be generated only for alpha orbitals 5 (HOMO) and 6 (LUMO) and; beta orbitals 5 (indicated as -5) and 6.; If the option CUBEPROP_ORBITALS is not provided, then cube files are; generated for all orbitals.; After running, the above input will generate four files: Psi_a_5_1-B1.cube,; Psi_a_6_4-A1.cube, Psi_a_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocon",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:3650,Energy Efficiency,energy,energy,3650,"or 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\rho_\beta(\mathbf{r})\), together; with the total density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) + \rho_\beta(\mathbf{r})\),; and the spin density; \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) - \rho_\beta(\mathbf{r})\). BASIS_FUNCTIONSThis task is useful to produce cube files of the atomic orbital basis; functions \(\chi_\mu(\mathbf{r})\). ESPCalculates t",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:11330,Energy Efficiency,green,green,11330,"the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). table of contents. Generation of Cube Files — cubeprop(); Introduction; Cubeprop Tasks; Keywords; CUBEPROP_TASKS; CUBEPROP_FILEPATH; CUBEPROP_ORBITALS; CUBEPROP_BASIS_FUNCTIONS; CUBIC_GRID_SPACING; CUBIC_GRID_OVERAGE. Orbital Visualization with VMD; Script Prerequisites; Running the Script; Script Options. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Generation of Cube Files — cubeprop(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:9809,Integrability,message,message,9809," called “AlphaMOs.tga”, and looks like this:. Script Options¶; The help for vmd_cube.py can be obtained from the console:; >>> ./vmd_cube.py --help; usage: vmd_cube.py [-h] [--color1 [<integer>]] [--color2 [<integer>]]; [--iso [<isovalue>]] [--rx [<angle>]] [--ry [<angle>]]; [--rz [<angle>]] [--tx [<length>]] [--ty [<length>]]; [--tz [<length>]] [--opacity [<opacity>]]; [--scale [<factor>]] [--no-montage] [--no-labels]; [--imagesize [<integer>]] [--imagew [<integer>]]; [--imageh [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, defau",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7503,Modifiability,variab,variable,7503," (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBIC_GRID_SPACING¶. CubicScalarGrid grid spacing in bohr [D_X, D_Y, D_Z]. Defaults to 0.2 bohr each. Type: array; Default: No Default. CUBIC_GRID_OVERAGE¶. CubicScalarGrid spatial extent in bohr [O_X, O_Y, O_Z]. Defaults to 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cub",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:7774,Modifiability,variab,variable,7774,"o 4.0 bohr each. Type: array; Default: No Default. Orbital Visualization with VMD¶; Included in PSI4 is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in psi4/psi4/share/psi4/scripts/vmd_cube.py. Script Prerequisites¶. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as VMDPATH. VMDPATH must be defined as; an environment variable.; To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php .; With ImageMagick installed, an environment variable called MONTAGE needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. VMDPATH¶; Filesystem path to the VMD executable. MONTAGE¶; Filesystem path to the Montage executable of ImageMagick. Running the Script¶. Run a PSI4 calculation, generating .cube files as detailed in the above documentation.; Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument:; python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with:; py",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:3305,Performance,perform,perform,3305,"_5_1-B1.cube, and Psi_a_6_4-A1.cube. The subscript a in; Psi_a_5_1-B1.cube indicates an alpha orbital. The first number (5) is the index of the; orbital while 1-B1 indicates that this is the first orbital that belongs to the B1 irrep.; The file Psi_a_5_1-B1.cube begins with two comment lines:; Psi4 Gaussian Cube File.; Property: Psi_a_5_1-B1. Isocontour range for 85% of the density: (0.0787495,-0.0787495). The second line reports the isocontour values that capture 85% of the probability density using; the least amount of grid points. This quantity is determined for orbitals and densities. The; fraction of the density captured by the isocontour values is by default 0.85, but can; be changed via the option CUBEPROP_ISOCONTOUR_THRESHOLD. Note; If your cube plots are too coarse, try to decrease the grid spacing via; the option CUBIC_GRID_SPACING. If the edges of your plot are cut then; increase the size of the grid via the option CUBIC_GRID_OVERAGE. Cubeprop Tasks¶; The cubeprop utility can be provided a list of tasks to perform.; Tasks are specified by the CUBEPROP_TASKS option, which is a list of strings; that identify the tasks. Several tasks are available. These include:. ORBITALS [Default if CUBEPROP_TASKS is not specified]Produces cube representations of the molecular orbitals; \(\psi_q(\mathbf{r})\). Orbitals are sorted according to increasing; orbital energy ignoring symmetry. FRONTIER_ORBITALSProduces cube representations of the frontier molecular orbitals. For closed shell; species, the highest occupied (HOMO) and the lowest unoccupied (LUMO) alpha orbitals (ie.; \(\psi_{\alpha}(\mathbf{r})\)) are printed, while for open shell species a total; of \((4 + M_s)\) orbitals are printed (\(\alpha\) and \(\beta\); spin for both lowest virtual (LVMO) and highest doubly occupied; orbitals (DOMO), along with all \(\alpha\) singly occupied (SOMO) orbitals). DENSITYThis task can be used to obtain the alpha and beta electron densities,; \(\rho_\alpha(\mathbf{r})\) and \(\r",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/cubeprop.html:5461,Safety,avoid,avoid,5461," \(\rho(\mathbf{r}) = \rho_\alpha(\mathbf{r}) - \rho_\beta(\mathbf{r})\). BASIS_FUNCTIONSThis task is useful to produce cube files of the atomic orbital basis; functions \(\chi_\mu(\mathbf{r})\). ESPCalculates the total (nuclear + electronic) electrostatic potential; \(V(\mathbf{r})\). DUAL_DESCRIPTORCalculates the dual descriptor from frontier orbitals:; \(f^2(\mathbf{r})=\rho_{\mathrm{LUMO}}(\mathbf{r})-\rho_{\mathrm{HOMO}}(\mathbf{r})\).; The dual descriptor is a good measure of nucleophilicity and electrophilicity,; containing information essentially equivalent to both Fukui functions combined.; More details on the dual descriptor itself can be found in [Morell:2005:205],; while the current implementation is described in [Martinez-Araya:2015:451].; This feature is currently only supported for closed shell systems. Note; The ESP task requires the user to specify a density-fitting basis; via the DF_BASIS_SCF keyword. Warning; It is important to specify the CUBEPROP_ORBITALS option when; dealing with large molecules to avoid running out of disk space.; For example, using the default grid spacing of; 0.2 Ångström, the size of a single cube file for a molecule like water; is of the order of 1.4 MB. For a molecule with 200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords¶. CUBEPROP_TASKS¶. Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, ESP; ORBITALS - Psi_a_N, Psi_b_N; BASIS_FUNCTIONS - Phi_N; LOL - LOLa, LOLb; ELF - ELFa, ELFb; FRONTIER_ORBITALS - Psi_a_N_HOMO + Psi_a_N_LUMO; DUAL_DESCRIPTOR - DUAL_N_HOMO-M_LUMO. Type: array; Default: No Default. CUBEPROP_FILEPATH¶. Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ORBITALS¶. List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS¶. List ",MatchSource.WIKI,psi4manual/1.4.0/cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/cubeprop.html
https://psicode.org/psi4manual/1.4.0/customizing-1.html:650,Deployability,update,updated,650,"﻿. Customization: Adding Simple Extensions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. Customization: Adding Simple Extensions¶; PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. User-Defined Basis Sets. Defining a Method Alias; Creating a Database. https://github.com/dgasmith/psi4numpy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/customizing-1.html
https://psicode.org/psi4manual/1.4.0/customizing-1.html:277,Security,access,accessible,277,"﻿. Customization: Adding Simple Extensions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. Customization: Adding Simple Extensions¶; PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. User-Defined Basis Sets. Defining a Method Alias; Creating a Database. https://github.com/dgasmith/psi4numpy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/customizing-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/customizing-1.html
https://psicode.org/psi4manual/1.4.0/customizing.html:650,Deployability,update,updated,650,"﻿. Customization: Adding Simple Extensions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. Customization: Adding Simple Extensions¶; PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. User-Defined Basis Sets. Defining a Method Alias; Creating a Database. https://github.com/dgasmith/psi4numpy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/customizing.html
https://psicode.org/psi4manual/1.4.0/customizing.html:277,Security,access,accessible,277,"﻿. Customization: Adding Simple Extensions. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. Customization: Adding Simple Extensions¶; PSI4 has been designed to be easily extensible. There are several; customizations accessible to any user, no programming experience or; recompilation required. User-Defined Basis Sets. Defining a Method Alias; Creating a Database. https://github.com/dgasmith/psi4numpy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/customizing.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/customizing.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1754,Availability,avail,available,1754,"It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2841,Availability,avail,available,2841,"ndicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of referen",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3093,Availability,avail,available,3093,"thon functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than t",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3895,Availability,avail,available,3895,"lar complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3969,Availability,error,error,3969,"lar complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4462,Availability,avail,available,4462,"quire no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cas",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4989,Availability,avail,available,4989,"te (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimiz",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5180,Availability,avail,available,5180,"Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='smal",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7516,Availability,error,error,7516,"quested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:9133,Availability,avail,available,9133,"-------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:11426,Availability,avail,availability,11426,"79745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bo",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:23984,Availability,error,error,23984,"tabase_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmar",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2266,Deployability,continuous,continuous,2266,"nt, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2411,Deployability,continuous,continuous,2411,"nt, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:26285,Deployability,update,updated,26285,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1494,Energy Efficiency,energy,energy,1494,"ean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'rea",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1834,Energy Efficiency,energy,energy,1834,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1988,Energy Efficiency,energy,energy,1988," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2111,Energy Efficiency,energy,energy,2111," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3031,Energy Efficiency,energy,energy,3031," while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[st",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3602,Energy Efficiency,energy,energy,3602,"t file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a fe",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3651,Energy Efficiency,energy,energy,3651,"t file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a fe",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4059,Energy Efficiency,energy,energy,4059,"gy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4166,Energy Efficiency,energy,energy,4166,") only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database memb",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5535,Energy Efficiency,energy,energy,5535," subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counte",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5952,Energy Efficiency,energy,energy,5952,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6029,Energy Efficiency,energy,energy,6029,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6046,Energy Efficiency,energy,energy,6046,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6200,Energy Efficiency,energy,energy,6200,"nsult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6220,Energy Efficiency,energy,energy,6220,"nsult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6629,Energy Efficiency,energy,energy,6629,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through k",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7036,Energy Efficiency,energy,energy,7036,"database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; --------------------------",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7125,Energy Efficiency,energy,energy,7125,"database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; -----------------------------",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7448,Energy Efficiency,energy,energy,7448,"ach reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7636,Energy Efficiency,energy,energy,7636,"ly once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:9822,Energy Efficiency,energy,energy,9822,"99; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:11305,Energy Efficiency,energy,energy,11305,"ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_descri",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:13526,Energy Efficiency,energy,energy,13526,"ation energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:25726,Energy Efficiency,charge,charge-transfer,25726,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6565,Integrability,wrap,wrapper,6565,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through k",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7365,Integrability,wrap,wrapper,7365,"formed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:554,Modifiability,variab,variables,554,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1272,Modifiability,variab,variable,1272,"ns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keywo",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4122,Modifiability,variab,variables,4122,") only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database memb",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4196,Modifiability,variab,variable,4196,"n monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:4303,Modifiability,flexible,flexible,4303,"reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database pyth",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7395,Modifiability,variab,variable,7395,"formed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:7562,Modifiability,variab,variables,7562,"ly once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:9292,Modifiability,variab,variable,9292,"-------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:9473,Modifiability,variab,variables,9473,"-------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.188",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1859,Performance,optimiz,optimize,1859,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1916,Performance,perform,performed,1916,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1964,Performance,perform,performs,1964," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2011,Performance,optimiz,optimize,2011," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2039,Performance,optimiz,optimization,2039," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:2078,Performance,perform,performs,2078," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5987,Performance,optimiz,optimize,5987,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:6349,Performance,perform,performed,6349," keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the dat",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:16445,Performance,optimiz,optimize,16445,"0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 0",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:382,Security,access,access,382,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:723,Security,access,accessible,723,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:1134,Security,access,access,1134,"ns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keywo",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:330,Testability,benchmark,benchmark,330,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:3754,Testability,benchmark,benchmark,3754,"unction for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5679,Testability,benchmark,benchmark,5679,"base members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:5743,Testability,benchmark,benchmark,5743,"base members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:11491,Testability,benchmark,benchmark,11491,"79745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bo",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:12137,Testability,benchmark,benchmark,12137,"612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:12608,Testability,benchmark,benchmark,12608,"subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Refer",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:13247,Testability,benchmark,benchmark,13247,"nce>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part o",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:13620,Testability,benchmark,benchmark,13620,"2' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:14289,Testability,test,testing,14289,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:17384,Testability,benchmark,benchmark,17384," rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchm",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:18298,Testability,benchmark,benchmark,18298,"NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:20625,Testability,benchmark,benchmark,20625,"p) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation c",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:22225,Testability,benchmark,benchmark,22225,"18 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:24983,Testability,benchmark,benchmark,24983,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NB",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:25518,Testability,benchmark,benchmark,25518,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db-1.html:14260,Usability,simpl,simple,14260,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/db-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db-1.html
https://psicode.org/psi4manual/1.4.0/db.html:1754,Availability,avail,available,1754,"It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2841,Availability,avail,available,2841,"ndicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of referen",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3093,Availability,avail,available,3093,"thon functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than t",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3895,Availability,avail,available,3895,"lar complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3969,Availability,error,error,3969,"lar complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4462,Availability,avail,available,4462,"quire no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cas",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4989,Availability,avail,available,4989,"te (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimiz",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5180,Availability,avail,available,5180,"Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='smal",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7516,Availability,error,error,7516,"quested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:9133,Availability,avail,available,9133,"-------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:11426,Availability,avail,availability,11426,"79745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bo",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:23984,Availability,error,error,23984,"tabase_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. JSCH¶. Database (Hobza) of interaction energies for nucelobase pairs.; Geometries and reference interaction energies from Jurecka et al. PCCP 8 1985 (2006).; Corrections implemented from footnote 92 of Burns et al., JCP 134 084107 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems (coplanar base-pairs); 'MX' interstrand systems (adjacent base-pairs on different strands); 'DD' stacked systems (adjacent base-pairs on same strand). S22by5¶. Database (Hobza) of interaction energies for dissociation curves of bimolecular complexes.; Geometries and reference interaction energies from Grafova et al. JCTC 6 2365 (2010).; Note that the S22by5-N-1.0 members are essentially the same geometries as S22-N (there’s trivial round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmar",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2266,Deployability,continuous,continuous,2266,"nt, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2411,Deployability,continuous,continuous,2411,"nt, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:26285,Deployability,update,updated,26285,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1494,Energy Efficiency,energy,energy,1494,"ean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'rea",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1834,Energy Efficiency,energy,energy,1834,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1988,Energy Efficiency,energy,energy,1988," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2111,Energy Efficiency,energy,energy,2111," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3031,Energy Efficiency,energy,energy,3031," while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[st",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3602,Energy Efficiency,energy,energy,3602,"t file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a fe",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3651,Energy Efficiency,energy,energy,3651,"t file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a fe",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4059,Energy Efficiency,energy,energy,4059,"gy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4166,Energy Efficiency,energy,energy,4166,") only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database memb",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5535,Energy Efficiency,energy,energy,5535," subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counte",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5952,Energy Efficiency,energy,energy,5952,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6029,Energy Efficiency,energy,energy,6029,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6046,Energy Efficiency,energy,energy,6046,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6200,Energy Efficiency,energy,energy,6200,"nsult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6220,Energy Efficiency,energy,energy,6220,"nsult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6629,Energy Efficiency,energy,energy,6629,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through k",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7036,Energy Efficiency,energy,energy,7036,"database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; --------------------------",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7125,Energy Efficiency,energy,energy,7125,"database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; -----------------------------",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7448,Energy Efficiency,energy,energy,7448,"ach reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7636,Energy Efficiency,energy,energy,7636,"ly once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:9822,Energy Efficiency,energy,energy,9822,"99; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:11305,Energy Efficiency,energy,energy,11305,"ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_descri",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:13526,Energy Efficiency,energy,energy,13526,"ation energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:25726,Energy Efficiency,charge,charge-transfer,25726,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6565,Integrability,wrap,wrapper,6565,"action energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through k",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7365,Integrability,wrap,wrapper,7365,"formed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:554,Modifiability,variab,variables,554,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1272,Modifiability,variab,variable,1272,"ns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keywo",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4122,Modifiability,variab,variables,4122,") only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database memb",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4196,Modifiability,variab,variable,4196,"n monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:4303,Modifiability,flexible,flexible,4303,"reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database pyth",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7395,Modifiability,variab,variable,7395,"formed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:7562,Modifiability,variab,variables,7562,"ly once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the database. One of these, the mean absolute deviation, is; returned by the wrapper as an ordinary Python variable. (For databases; without a stored reference energy, e.g., BASIC, large and meaningless numbers are; printed for error.) The other two tables tabulate the PSI variables requested; through keyword tabulate, in this case the total SCF energy and the number; of atoms in each reagent.; ==> Mp2 Total Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Value Reagent 1 Reagent 2; Value Wt Value Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.00004802 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.00000064 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:9292,Modifiability,variab,variable,9292,"-------------------------. ==> Requested Energy <==. ------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt; ------------------------------------------------------------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:9473,Modifiability,variab,variables,9473,"-------------------------------------------------; RGC1-HeHe-0.85 0.0376 0.0301 -0.0075 -0.0312 -5.69430495 1 -2.84717649 -2; RGC1-HeHe-1.0 -0.0219 -0.0004 0.0215 0.0899 -5.69435362 1 -2.84717649 -2; ------------------------------------------------------------------------------------------------------; Minimal Dev -0.0075 -0.0312; Maximal Dev 0.0215 0.0899; Mean Signed Dev 0.0070 0.0293; Mean Absolute Dev 0.0145 0.0605; RMS Dev 0.0161 0.0673; ------------------------------------------------------------------------------------------------------. As well as being printed in the output file, database results from the; tabulate option are available in the input file as ordinary Python; dictionaries DB_RGT and DB_RXN, indexed firstly by reagent or reaction; name and secondly by the requested PSI variable name. See the first; paragraph of Creating a Database for the distinction between; reagents and reactions. For example, an input file like the following; requests a couple variables through tabulate and then makes use of the; resulting data structures, here, only to print.; set basis 6-31g*; db('mp2','s22',subset='small',tabulate=['CURRENT ENERGY','MP2 CORRELATION ENERGY']). from pprint import pprint. print_stdout('\nDB_RGT'); pprint(DB_RGT). print_stdout('\nDB_RXN'); pprint(DB_RXN). print_stdout('\nmp2 interaction energy of water dimer (S22-2)'); print_stdout(DB_RXN['S22-2']['CURRENT ENERGY']). The output to the screen is as follows.; DB_RGT; {'S22-16-dimer': {'CURRENT ENERGY': -155.37373581838636,; 'DF-MP2 CORRELATION ENERGY': -0.523870772178089},; 'S22-16-monoA-unCP': {'CURRENT ENERGY': -78.29412053242164,; 'DF-MP2 CORRELATION ENERGY': -0.2629759351596186},; 'S22-16-monoB-unCP': {'CURRENT ENERGY': -77.07606823017188,; 'DF-MP2 CORRELATION ENERGY': -0.2594122526144091},; 'S22-2-dimer': {'CURRENT ENERGY': -152.40958884746667,; 'DF-MP2 CORRELATION ENERGY': -0.3797598812113561},; 'S22-2-monoA-unCP': {'CURRENT ENERGY': -76.19905879745446,; 'DF-MP2 CORRELATION ENERGY': -0.188",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1859,Performance,optimiz,optimize,1859,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1916,Performance,perform,performed,1916,"ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Database",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1964,Performance,perform,performs,1964," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2011,Performance,optimiz,optimize,2011," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2039,Performance,optimiz,optimization,2039," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:2078,Performance,perform,performs,2078," global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keyword db_func instead of func. mode (str) – \(\Rightarrow\) 'continuous' \(\Leftarrow\) || 'sow' || 'reap'; Indicates whether the calculations required to complete the; database are to be run in one file ('continuous') or are to be; farmed out in an embarrassingly parallel fashion; ('sow'/'reap'). For the latter, run an initial job with; 'sow' and follow instructions in its output file. cp (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether counterpoise correction is employed in computing; interaction energies. Use this option and NOT the bsse_type=""cp""; function for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation ener",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5987,Performance,optimiz,optimize,5987,"tabase python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric we",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:6349,Performance,perform,performed,6349," keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted from each of the three dimers.; RGC1-HeHe-0.85-dimer; RGC1-He-mono-unCP; RGC1-HeHe-1.0-dimer; RGC1-HeHe-1.5-dimer. At the end of the job, the Requested Energy table is printed that gives the total; energies for the requested model chemistry for each reagent and each reaction, as; well as the stoichiometric weights by which the reagent energies are transformed; into the reaction energy. In this case, the dimer is +1 and the monomer is -2,; indicating the interaction energy is computed from dimer less first monomer; less second (identical) monomer. Error statistics are computed with respect to the reference; energies stored in the dat",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:16445,Performance,optimiz,optimize,16445,"0043793.; Variant with ghosted hydrogen as midbonds in the COM. no | name | subset. 1 | CN - He | DD; 2 | NH - He | DD; 3 | C2H3 - C2H4 | DD; 4 | O2 - H2 | DD; 5 | NH - Ar | DD; 6 | CN - Ar | DD; 7 | O2 - N2 | DD; 8 | H2O - O2(sp) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BBI¶. Database (Merz) of protein backbone-backbone interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from Sherrill group, Georgia Tech.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 0",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:382,Security,access,access,382,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:723,Security,access,accessible,723,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:1134,Security,access,access,1134,"ns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'), while; optimize perfoms a geometry optimization on each reagent, and; cbs performs a compound single-point energy. If a nested series; of python functions is intended (see Function Intercalls), use; keywo",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:330,Testability,benchmark,benchmark,330,"﻿. Database — database(). Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). Database — database()¶; Code author: Lori A. Burns; Section author: Lori A. Burns. psi4.driver.wrapper_database.database(name, db_name[, func, mode, cp, rlxd, symm, zpe, benchmark, tabulate, subset])[source]¶; Function to access the molecule objects and reference energies of; popular chemical databases. Aliases; db(). Returns; (float) Mean absolute deviation of the database in kcal/mol. PSI variables. db_name DATABASE MEAN SIGNED DEVIATION; db_name DATABASE MEAN ABSOLUTE DEVIATION; db_name DATABASE ROOT-MEAN-SQUARE DEVIATION; Python dictionaries of results accessible as DB_RGT and DB_RXN. Note; It is very easy to make a database from a collection of xyz files; using the script psi4/psi4/share/psi4/scripts/ixyz2database.py.; See Creating a Database for details. Caution; Some features are not yet implemented. Buy a developer some coffee. In sow/reap mode, use only global options (e.g., the local option set by set scf scf_type df will not be respected). Note; To access a database that is not embedded in a PSI4; distribution, add the path to the directory containing the database; to the environment variable PYTHONPATH. Parameters. name (str) – 'scf' || 'sapt0' || 'ccsd(t)' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.energy(). db_name (str) – 'BASIC' || 'S22' || 'HTBH' || etc.; Second argument, usually unlabeled. Indicates the requested database; name, matching (case insensitive) the name of a python file in; psi4/share/databases or PYTHONPATH. Consult that; directory for available databases and literature citations. func (function) – \(\Rightarrow\) energy \(\Leftarrow\) || optimize || cbs; Indicates the type of calculation to be performed on each database; member. The default performs a single-point energy('name'",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:3754,Testability,benchmark,benchmark,3754,"unction for BSSE correction in database(). Option available; (See Available Databases) only for databases of bimolecular complexes. rlxd (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether correction for deformation energy is; employed in computing interaction energies. Option available; (See Available Databases) only for databases of bimolecular complexes; with non-frozen monomers, e.g., HBC6. symm (boolean) – \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; Indicates whether the native symmetry of the database reagents is; employed ('on') or whether it is forced to \(C_1\) symmetry; ('off'). Some computational methods (e.g., SAPT) require no; symmetry, and this will be set by database(). zpe (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicates whether zero-point-energy corrections are appended to; single-point energy values. Option valid only for certain; thermochemical databases. Disabled until Hessians ready. benchmark (str) – \(\Rightarrow\) 'default' \(\Leftarrow\) || 'S22A' || etc.; Indicates whether a non-default set of reference energies, if; available (See Available Databases), are employed for the; calculation of error statistics. tabulate (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['scf total energy', 'natom'] || etc.; Indicates whether to form tables of variables other than the; primary requested energy. Available for any PSI variable. subset (Union[str, List[str]]) – Indicates a subset of the full database to run. This is a very; flexible option and can be used in three distinct ways, outlined; below. Note that two take a string and the last takes an array.; See Available Databases for available values. 'small' || 'large' || 'equilibrium'Calls predefined subsets of the requested database, either; 'small', a few of the smallest database members,; 'large', the largest of the database members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5679,Testability,benchmark,benchmark,5679,"base members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:5743,Testability,benchmark,benchmark,5743,"base members, or; 'equilibrium', the equilibrium geometries for a database; composed of dissociation curves. 'BzBz_S' || 'FaOOFaON' || 'ArNe' || 'HB' || etc.For databases composed of dissociation curves, or otherwise; divided into subsets, individual curves and subsets can be; called by name. Consult the database python files for available; molecular systems (case insensitive). [1,2,5] || ['1','2','5'] || ['BzMe-3.5', 'MeMe-5.0'] || etc.Specify a list of database members to run. Consult the; database python files for available molecular systems. This; is the only portion of database input that is case sensitive;; choices for this keyword must match the database python file. Examples. >>> # [1] Two-stage SCF calculation on short, equilibrium, and long helium dimer; >>> db('scf','RGC10',cast_up='sto-3g',subset=['HeHe-0.85','HeHe-1.0','HeHe-1.5'], tabulate=['scf total energy','natom']). >>> # [2] Counterpoise-corrected interaction energies for three complexes in S22; >>> # Error statistics computed wrt an old benchmark, S22A; >>> database('mp2','S22',cp=1,subset=[16,17,8],benchmark='S22A'). >>> # [3] SAPT0 on the neon dimer dissociation curve; >>> db('sapt0',subset='NeNe',cp=0,symm=0,db_name='RGC10'). >>> # [4] Optimize system 1 in database S22, producing tables of scf and mp2 energy; >>> db('mp2','S22',db_func=optimize,subset=[1], tabulate=['mp2 total energy','current energy']). >>> # [5] CCSD on the smallest systems of HTBH, a hydrogen-transfer database; >>> database('ccsd','HTBH',subset='small', tabulate=['ccsd total energy', 'mp2 total energy']). Output¶; At the beginning of a database job is printed a listing of the individual system; calculations which will be performed. The output snippet below is from the example job [1]; above. It shows each reagent required for the subset of database reactions requested.; Note that this is an un-counterpoise-corrected example, and the wrapper is smart enough; to compute only once the monomer whose energy will be subtracted fr",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:11491,Testability,benchmark,benchmark,11491,"79745446,; 'DF-MP2 CORRELATION ENERGY': -0.1887118848315123},; 'S22-2-monoB-unCP': {'CURRENT ENERGY': -76.19902978067739,; 'DF-MP2 CORRELATION ENERGY': -0.18857384937354635},; 'S22-8-dimer': {'CURRENT ENERGY': -80.67416758080654,; 'DF-MP2 CORRELATION ENERGY': -0.2844102558783027},; 'S22-8-monoA-unCP': {'CURRENT ENERGY': -40.336952636980364,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715307},; 'S22-8-monoB-unCP': {'CURRENT ENERGY': -40.336952636980506,; 'DF-MP2 CORRELATION ENERGY': -0.14185962536715097}}. DB_RXN; {'S22-16': {'CURRENT ENERGY': -0.0035470557928363178,; 'DF-MP2 CORRELATION ENERGY': -0.0014825844040612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bo",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:12137,Testability,benchmark,benchmark,12137,"612934},; 'S22-2': {'CURRENT ENERGY': -0.011500269334817403,; 'DF-MP2 CORRELATION ENERGY': -0.0024741470062974724},; 'S22-8': {'CURRENT ENERGY': -0.0002623068456699684,; 'DF-MP2 CORRELATION ENERGY': -0.0006910051439986686}}. mp2 interaction energy of water dimer (S22-2); -0.0115002693348. Available Databases¶; Below are documented for particular databases the availability of the generic; database function options cp, rlxd, benchmark, and the string; options for subset. The full reagent member list, which can also be used; in conjunction with subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:12608,Testability,benchmark,benchmark,12608,"subset, is not included here for consideration of space; and may be found in the database file. The database Python files are very; readable and should be consulted for more particular questions. A24¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Refer",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:13247,Testability,benchmark,benchmark,13247,"nce>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. RSE42¶. Database of radical stabilization energies.; Geometries from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; Reference radical stabilization energies from [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)] at CCSD(T)/cc-pCVTZ level. benchmark. 'RSE42' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part o",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:13620,Testability,benchmark,benchmark,13620,"2' [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)].; \(\Rightarrow\) 'RSE42' \(\Leftarrow\) [E. Soydas and U. Bozkaya, JCTC, 9, 1452-1460 (2013)]. subset. 'small' <members_description>; 'large' <members_description>; 'RSE30' smaller systems in RSE42; '<subset>' <members_description>. A24alt¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from <Reference>.; Reference interaction energies from Rezac and Hobza, JCTC (in press). cp 'off' <erase this comment and after unless on is a valid option> || 'on'; rlxd 'off' <erase this comment and after unless on is valid option> || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:14289,Testability,test,testing,14289,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:17384,Testability,benchmark,benchmark,17384," rlxd 'off'. BAKERJCC93¶. Database of molecules that are challenging to optimize.; Geometries from Baker J. Comput. Chem. 14 1085 (1993), as reported; in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002), with a few; further corrections.; No reference energies defined. cp 'off'; rlxd 'off'; subset. 'small'; 'large'. NBC10¶. Database (Sherrill) of interaction energies for dissociation curves of dispersion-bound bimolecular complexes.; Geometries and Reference interaction energies from the following articles:. Benzene Dimers from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Hydrogen Sulfide from Sherrill et al. JPCA 113 10146 (2009).; Benzene-Methane from Sherrill et al. JPCA 113 10146 (2009).; Methane Dimer from Takatani et al. PCCP 9 6106 (2007).; Pyridine Dimers from Hohenstein et al. JPCA 113 878 (2009).; Collection into NBC10 from Burns et al. JCP 134 084107 (2011).; Revised reference interaction energies (NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchm",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:18298,Testability,benchmark,benchmark,18298,"NBC10A) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'NBC100' Burns et al. JCP 134 084107 (2011).; \(\Rightarrow\) 'NBC10A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'; 'equilibrium'; 'BzBz_S' dissociation curve for benzene dimer, sandwich; 'BzBz_T' dissociation curve for benzene dimer, t-shaped; 'BzBz_PD34' dissociation curve for benzene dimer, parallel displaced by 3.4A; 'BzH2S' dissociation curve for benzene-H2S; 'BzMe' dissociation curve for benzene-methane; 'MeMe' dissociation curve for methane dimer; 'PyPy_S2' dissociation curve for pyridine dimer, sandwich; 'PyPy_T3' dissociation curve for pyridine dimer, t-shaped; 'BzBz_PD32' dissociation curve for benzene dimer, parallel displaced by 3.2A; 'BzBz_PD36' dissociation curve for benzene dimer, parallel displaced by 3.6A. HTR40¶. Database of Hydrogen transfer reactions.; Geometries from Bozkaya and Sherrill.; Reference energies from Bozkaya and Sherrill. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. S66¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference energies from Rezac et al. JCTC 7 2427 (2011). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems. NHTBH¶. Database (Truhlar) of non-hydrogen-transfer barrier height reactions.; Geometries and Reaction energies from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/non_H.htm (broken link). cp 'off'; rlxd 'off'; subset. 'small'; 'large'. O24by5¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x5/-/tree/4ec3cae0546b6ae4f4f2cf28482cd164c8",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:20625,Testability,benchmark,benchmark,20625,"p) | DD; 9 | O2 - O2 | DD. 10 | NH - NH | ED; 11 | CH2O - NH2 | ED; 12 | H2O - Na | ED; 13 | H2O - OH | ED; 14 | H2O - O2H | ED; 15 | Li - NH3(gm) | ED; 16 | Li - O2 | MX; 17 | CN - H2 | MX; 18 | Li - NH3(lm) | MX; 19 | H2O - O2(gm) | MX; 20 | Na - Li | MX; 21 | CO2 - O2 | MX; 22 | C2H3 - CO2 | MX; 23 | He* - He* | MX; 24 | HF - CO+ | MX. cp 'on'; subset; - 'DD' dispersion-dominated systems; - 'ED' electrostatically-dominated systems; - 'MX' mixed-interaction systems. BAKERJCC96¶. Geometries from Baker and Chan J. Comput. Chem. 17 888 (1996),. as reported in Bakken and Helgaker, J. Chem. Phys. 117, 9160 (2002). No reference energies defined. cp 'off'; rlxd 'off'. S22¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries from Jurecka et al. PCCP 8 1985 (2006).; First revision to interaction energies (S22A) from Takatani et al. JCP 132 144104 (2010).; Second revision to interaction energies (S22B) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'S220' Jurecka et al. PCCP 8 1985 (2006).; 'S22A' Takatani et al. JCP 132 144104 (2010).; \(\Rightarrow\) 'S22B' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small' water dimer, methane dimer, ethene-ethine; 'large' adenine-thymine; 'HB' hydrogen-bonded systems; 'MX' mixed-influence systems; 'DD' dispersion-dominated systems; 'S11' smaller systems in S22; 'WATER' water dimer. RGC10¶. Database (Sherrill) of interaction energies for dissociation curves of rare-gas biatomic complexes.; Geometries and reference interaction energies from Tang et al. JCP 118 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation c",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:22225,Testability,benchmark,benchmark,22225,"18 4976 (2003). cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HeHe' 18-point dissociation curve for helium dimer; 'HeNe' 18-point dissociation curve for helium-neon complex; 'HeAr' 18-point dissociation curve for helium-argon complex; 'HeKr' 18-point dissociation curve for helium-krypton complex; 'NeNe' 18-point dissociation curve for neon dimer; 'NeAr' 18-point dissociation curve for neon-argon complex; 'NeKr' 18-point dissociation curve for neon-krypton complex; 'ArAr' 18-point dissociation curve for argon dimer; 'ArKr' 18-point dissociation curve for argon-krypton complex; 'KrKr' 18-point dissociation curve for krypton dimer. HBC6¶. Database (Sherrill) of interaction energies for dissociation curves of doubly hydrogen-bonded bimolecular complexes.; Geometries from and original reference interaction energies from Thanthiriwatte et al. JCTC 7 88 (2011).; Revised reference interaction energies from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. 'HBC60' Thanthiriwatte et al. JCTC 7 88 (2011).; \(\Rightarrow\) 'HBC6A' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011).; 'HBC6ARLX' Sherrill group, unpublished. subset. 'small'; 'large'; 'equilibrium' equilibrium points for the six systems; 'FaOOFaOO' dissociation curve for formic acid dimer; 'FaONFaON' dissociation curve for formamide dimer; 'FaNNFaNN' dissociation curve for formamidine dimer; 'FaOOFaON' dissociation curve for formic acid- formamide complex; 'FaONFaNN' dissociation curve for formamide- formamidine complex; 'FaOOFaNN' dissociation curve for formic acid- formamidine complex. HTBH¶. Database (Truhlar) of hydrogen-transfer barrier height reactions.; Geometries from Truhlar and coworkers at site http://t1.chem.umn.edu/misc/database_group/database_therm_bh/raw_geom.cgi (broken link).; Reference energies from Zhao et al. JPCA, 109 2012-2018 (2005) doi: 10.1021/jp045141s [in supporting information]. cp 'off'; rlxd 'off'; subset. 'small'; 'large",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:24983,Testability,benchmark,benchmark,24983,"l round-off error) but the reference interaction energies for S22by5 are of lower quality than those of S22. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'mol1' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 1; …; 'mol22' five-point (0.9, 1.0, 1.2, 1.5, 2.0) \(\times R_{eq}\) dissociation curve for molecule 22. ACENES¶. Database of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NB",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:25518,Testability,benchmark,benchmark,25518,"tabase of Ed and Rob’s favorite linear acene dimers.; Geometries from nowhere special, and reference energies undefined. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'FIRST3' benzene, napthalene, and anthracene dimers; 'FIRST5' benzene - pentacene dimers; 'FIRST10' benzene - decacene dimers. HSG¶. Database (Merz) of interaction energies for bimolecular complexes from protein-indinavir reaction site.; Geometries from and original reference energies from Faver et al. JCTC 7 790 (2011).; Revised reference interaction energies (HSGA) from Marshall et al. JCP 135 194102 (2011). cp 'off' || 'on'; rlxd 'off'; benchmark. 'HSG0' Faver et al. JCTC 7 790 (2011).; \(\Rightarrow\) 'HSGA' \(\Leftarrow\) Marshall et al. JCP 135 194102 (2011). subset. 'small'; 'large'. NCB31¶. Database (Truhlar) of several classes of noncovalent interactions.; Geometries from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; Reference energies from Truhlar and coworkers at site http://comp.chem.umn.edu/database_noncov/noncovalent.htm; First comprehensive citation JPCA 109 5656 (2005). cp 'off' || 'on'; rlxd 'off' || 'on'; benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' 3: HF-HF, He-Ne, HCCH-HCCH; 'large' 1: BzBz_PD; 'HB6' hydrogen-bonded; 'CT7' charge-transfer; 'DI6' dipole-interacting; 'WI7' weakly interacting; 'PPS5' pi-pi stacking. table of contents. Database — database(); Output; Available Databases; A24; RSE42; A24alt; BENCH12; CORE; SSI; BASIC; S66by8; O24by5mb; BBI; BAKERJCC93; NBC10; HTR40; S66; NHTBH; O24by5; BAKERJCC96; S22; RGC10; HBC6; HTBH; JSCH; S22by5; ACENES; HSG; NCB31. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Psithon Functions: Invoking a Calculation; Database — database(). © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/db.html:14260,Usability,simpl,simple,14260,"me>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small' <members_description>; 'large' <members_description>; '<subset>' <members_description>. BENCH12¶. Database of <description of members and reference energy type>.; Geometries from <Reference>.; Reference interaction energies from <Reference>. benchmark. '<benchmark_name>' <Reference>.; \(\Rightarrow\) '<default_benchmark_name>' \(\Leftarrow\) <Reference>. subset. 'small'; 'large'; 'alkenes'; 'alkanes'; 'acenes'; 'thiophenes'; 'h2o_size'; 'h2o_shape'; 'atoms'; 'S22_HB'; 'S22_MX'; 'S22_DD'. CORE¶. Database of Pulay corannulene structures. Subsumed into CFLOW. cp 'off' || 'on'; rlxd 'off'. SSI¶. Database (Merz) of interaction energies for protein sidechain-sidechain interactions.; Geometries from Kenneth Merz Group, Univ. of Florida.; Reference interaction energies from <Reference>.; Part of the BioFragment Database (BFDb). cp 'off' || 'on'; rlxd 'off'. BASIC¶. Database of simple molecules, mostly for testing.; Geometries from nowhere special, and no reference energies defined. cp 'off'; rlxd 'off'; subset ['h2o', 'nh3', 'ch4']. S66by8¶. Database (Hobza) of interaction energies for bimolecular complexes.; Geometries and reference interaction energies from Rezac et al. JCTC 7 2427 (2011).; Note that the S66by8-N-1.0 members are not quite the same geometries as S66-N. cp 'off' || 'on'; rlxd 'off'; subset. 'small'; 'large'; 'equilibrium'; 'HB' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve hydrogen-bonded systems; 'MX' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve mixed-influence systems; 'DD' eight-point (0.9, 0.95, 1.0, 1.05, 1.1, 1.25, 1.5, 2.0) \(\times R_{eq}\) dissociation curve dispersion-dominated systems. O24by5mb¶. Database (O24) of interaction energies for small open-shell high-spin bimolecular complexes.; Geometries taken from https://gitlab.com/piotr.zuchowski/o24x",MatchSource.WIKI,psi4manual/1.4.0/db.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/db.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:4473,Availability,avail,available,4473,"\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital r",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:4672,Availability,avail,available,4672,"ditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7649,Availability,avail,available,7649,"DC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, t",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7954,Availability,avail,available,7954,"e; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteratio",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9111,Availability,avail,available,9111,"in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the or",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:11505,Availability,avail,available,11505,"0^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; En",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:11696,Availability,avail,available,11696,"nsformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\m",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12071,Availability,avail,available,12071,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12339,Availability,avail,available,12339,"ently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12925,Availability,avail,available,12925,"similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry o",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:14158,Availability,avail,available,14158," energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm fo",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:5783,Deployability,update,update,5783,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:8205,Deployability,update,update,8205,"moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:8259,Deployability,update,update,8259,"moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:8840,Deployability,update,update,8840,"f coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. S",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9225,Deployability,update,update,9225,"ed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of th",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9386,Deployability,update,update,9386," convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadraticall",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9754,Deployability,update,updates,9754,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9771,Deployability,update,updates,9771,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9880,Deployability,update,update,9880," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9987,Deployability,update,update,9987," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:10838,Deployability,update,updates,10838,"umulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solutio",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:11851,Deployability,update,updates,11851,"esult, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWO",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:14629,Deployability,update,update,14629,"n of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:15575,Deployability,update,update,15575,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:16085,Deployability,update,updated,16085,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:532,Energy Efficiency,energy,energy,532,"﻿. DCT: Density Cumulant Theory. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated i",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:1094,Energy Efficiency,energy,energy,1094,"SI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\ga",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:1155,Energy Efficiency,energy,energy,1155,"SI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\ga",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:2419,Energy Efficiency,energy,energy,2419,"o an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:2874,Energy Efficiency,energy,energy,2874,"rticle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minim",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:3087,Energy Efficiency,energy,energy,3087,"\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:3655,Energy Efficiency,energy,energy,3655,"ments were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functio",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:3702,Energy Efficiency,energy,energy,3702,"g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The f",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:3982,Energy Efficiency,energy,energy,3982,"f two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idemp",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:4045,Energy Efficiency,energy,energy,4045," which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (l",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:4211,Energy Efficiency,energy,energy,4211,"size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:5717,Energy Efficiency,efficient,efficient,5717,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:6364,Energy Efficiency,energy,energy,6364," of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:6715,Energy Efficiency,energy,energy,6715," a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7341,Energy Efficiency,energy,energy,7341,"mbination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7525,Energy Efficiency,energy,energy,7525,", we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extr",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7773,Energy Efficiency,energy,energy,7773,"rticle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the seco",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:10602,Energy Efficiency,energy,energy,10602,"od, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12301,Energy Efficiency,efficient,efficient,12301,"e terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12372,Energy Efficiency,energy,energy,12372,"ently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13194,Energy Efficiency,energy,energy,13194,"o response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use o",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13213,Energy Efficiency,energy,energy,13213,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13235,Energy Efficiency,energy,energy,13235,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13453,Energy Efficiency,energy,energy,13453,"rizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases whe",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13830,Energy Efficiency,energy,energy,13830,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:14269,Energy Efficiency,reduce,reduce,14269,"ich will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:14415,Energy Efficiency,energy,energy,14415,"n a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a ch",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:14958,Energy Efficiency,reduce,reduce,14958,"ion will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. In",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:1771,Integrability,rout,route,1771,"d indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Ener",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:2295,Integrability,depend,depends,2295,"ma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cum",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:10177,Modifiability,coupling,coupling,10177,"ations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the t",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:4983,Performance,optimiz,optimization,4983,"ds, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:5824,Performance,optimiz,optimization,5824,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:6059,Performance,optimiz,optimized,6059,"e density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTI",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:7333,Performance,perform,perform,7333,"mbination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:8805,Performance,perform,performed,8805,"f coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. S",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:8933,Performance,perform,performing,8933,"uations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cum",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9499,Performance,perform,performed,9499,"croiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm ca",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9783,Performance,perform,performed,9783,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:9853,Performance,perform,perform,9853," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:10409,Performance,optimiz,optimized,10409,"sformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12121,Performance,perform,perform,12121,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:12142,Performance,optimiz,optimizations,12142,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13311,Performance,perform,perform,13311,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13441,Performance,perform,perform,13441,"rizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases whe",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13606,Performance,perform,perform,13606,"MULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13624,Performance,optimiz,optimization,13624,"MULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13709,Performance,optimiz,optimize,13709,"HF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13730,Performance,optimiz,optimize,13730,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13762,Performance,perform,perform,13762,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13916,Performance,optimiz,optimization,13916,"and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usefu",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:13937,Performance,perform,performed,13937,"and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usefu",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:15375,Performance,perform,performing,15375,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:11126,Safety,avoid,avoiding,11126,"these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:1474,Usability,simpl,simple,1474,"energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct-1.html:3378,Usability,simpl,simplified,3378,"equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three diffe",MatchSource.WIKI,psi4manual/1.4.0/dct-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct-1.html
https://psicode.org/psi4manual/1.4.0/dct.html:4473,Availability,avail,available,4473,"\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital r",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:4672,Availability,avail,available,4672,"ditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7649,Availability,avail,available,7649,"DC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, t",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7954,Availability,avail,available,7954,"e; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteratio",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9111,Availability,avail,available,9111,"in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the or",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:11505,Availability,avail,available,11505,"0^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; En",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:11696,Availability,avail,available,11696,"nsformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\m",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12071,Availability,avail,available,12071,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12339,Availability,avail,available,12339,"ently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12925,Availability,avail,available,12925,"similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry o",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:14158,Availability,avail,available,14158," energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm fo",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:5783,Deployability,update,update,5783,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:8205,Deployability,update,update,8205,"moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:8259,Deployability,update,update,8259,"moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:8840,Deployability,update,update,8840,"f coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. S",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9225,Deployability,update,update,9225,"ed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of th",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9386,Deployability,update,update,9386," convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadraticall",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9754,Deployability,update,updates,9754,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9771,Deployability,update,updates,9771,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9880,Deployability,update,update,9880," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9987,Deployability,update,update,9987," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:10838,Deployability,update,updates,10838,"umulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solutio",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:11851,Deployability,update,updates,11851,"esult, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWO",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:14629,Deployability,update,update,14629,"n of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:15575,Deployability,update,update,15575,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:16085,Deployability,update,updated,16085,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:532,Energy Efficiency,energy,energy,532,"﻿. DCT: Density Cumulant Theory. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated i",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:1094,Energy Efficiency,energy,energy,1094,"SI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\ga",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:1155,Energy Efficiency,energy,energy,1155,"SI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. DCT: Density Cumulant Theory¶; Code author: Alexander Yu. Sokolov, Andrew C. Simmonett, and Xiao Wang; Section author: Alexander Yu. Sokolov; Module: Keywords, PSI Variables, DCT. Theory¶; Density cumulant theory (DCT) is a density-based ab initio theory; that can compute electronic energies without the use of a wavefunction. The; theory starts by writing the exact energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\ga",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:2419,Energy Efficiency,energy,energy,2419,"o an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:2874,Energy Efficiency,energy,energy,2874,"rticle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minim",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:3087,Energy Efficiency,energy,energy,3087,"\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:3655,Energy Efficiency,energy,energy,3655,"ments were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functio",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:3702,Energy Efficiency,energy,energy,3702,"g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The f",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:3982,Energy Efficiency,energy,energy,3982,"f two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idemp",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:4045,Energy Efficiency,energy,energy,4045," which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (l",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:4211,Energy Efficiency,energy,energy,4211,"size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:5717,Energy Efficiency,efficient,efficient,5717,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:6364,Energy Efficiency,energy,energy,6364," of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:6715,Energy Efficiency,energy,energy,6715," a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7341,Energy Efficiency,energy,energy,7341,"mbination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7525,Energy Efficiency,energy,energy,7525,", we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extr",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7773,Energy Efficiency,energy,energy,7773,"rticle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the seco",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:10602,Energy Efficiency,energy,energy,10602,"od, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12301,Energy Efficiency,efficient,efficient,12301,"e terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12372,Energy Efficiency,energy,energy,12372,"ently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13194,Energy Efficiency,energy,energy,13194,"o response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use o",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13213,Energy Efficiency,energy,energy,13213,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13235,Energy Efficiency,energy,energy,13235,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13453,Energy Efficiency,energy,energy,13453,"rizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases whe",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13830,Energy Efficiency,energy,energy,13830,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:14269,Energy Efficiency,reduce,reduce,14269,"ich will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:14415,Energy Efficiency,energy,energy,14415,"n a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a ch",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:14958,Energy Efficiency,reduce,reduce,14958,"ion will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. In",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:1771,Integrability,rout,route,1771,"d indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Ener",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:2295,Integrability,depend,depends,2295,"ma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cum",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:10177,Modifiability,coupling,coupling,10177,"ations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the t",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:4983,Performance,optimiz,optimization,4983,"ds, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three different algorithms for the; solution of the system of coupled equations are available (see; Iterative Algorithms for details).; Publications resulting from the use of the DCT code should cite contributions; listed here. Methods¶; Currently five DCT methods (functionals) are available: DC-06, DC-12, ODC-06, ODC-12, and ODC-13. The first four; methods use approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:5824,Performance,optimiz,optimization,5824,"approximate N-representability conditions derived from; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part \(\boldsymbol{\tau}\) of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively a",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:6059,Performance,optimiz,optimized,6059,"e density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods \(\boldsymbol{\tau}\) is derived from the density cumulant; in an approximate way (labelled by ‘06’), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by ‘12’). The corresponding DC and ODC methods; have similar description of the \(\boldsymbol{\gamma_1}\) N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12.; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution \(\boldsymbol{\tau}\), respectively,; and the orbitals are variationally optimized.; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTI",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:7333,Performance,perform,perform,7333,"mbination of the ODC-13 method with a three-particle energy correction; [\(\mbox{ODC-13$(\lambda_3)$}\)] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our publications.; The DCT functional can be specified by the DCT_FUNCTIONAL option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the \((\lambda_3)\) energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the \((\lambda_3)\) correction can be; requested by setting the THREE_PARTICLE option to PERTURBATIVE. A; combination of the ODC-13 functional with the \((\lambda_3)\) correction; [denoted as \(\mbox{ODC-13$(\lambda_3)$}\)] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries.; At the present moment, all of the DCT methods support unrestricted reference; orbitals (REFERENCE UHF), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (REFERENCE RHF) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for ALGORITHM SIMULTANEOUS. Iterative Algorithms¶; As explained in the Theory section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:8805,Performance,perform,performed,8805,"f coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. S",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:8933,Performance,perform,performing,8933,"uations are available. The choice of the algorithm is controlled using the; ALGORITHM option. SIMULTANEOUS [Default]In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEPIn the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cum",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9499,Performance,perform,performed,9499,"croiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm ca",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9783,Performance,perform,performed,9783,"ty cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:9853,Performance,perform,perform,9853," macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QCIn the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-st",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:10409,Performance,optimiz,optimized,10409,"sformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the QC_TYPE; option to TWOSTEP will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set QC_COUPLING to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12121,Performance,perform,perform,12121,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:12142,Performance,optimiz,optimizations,12142,"ous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minima",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13311,Performance,perform,perform,13311,"ficient. Analytic gradients are not available for the three-particle energy; correction \((\lambda_3)\). Methods Summary¶; The table below summarizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. Ho",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13441,Performance,perform,perform,13441,"rizes current DCT code features:. Method; Available algorithms; Energy; Gradient; Reference. ODC-06; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-12; SIMULTANEOUS, QC; Y; Y; RHF/UHF. ODC-13; SIMULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases whe",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13606,Performance,perform,perform,13606,"MULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13624,Performance,optimiz,optimization,13624,"MULTANEOUS, QC; Y; Y; UHF. \(\mbox{ODC-12$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital upda",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13709,Performance,optimiz,optimize,13709,"HF. \(\mbox{ODC-13$(\lambda_3)$}\); SIMULTANEOUS, QC; Y; N; UHF. DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13730,Performance,optimiz,optimize,13730,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13762,Performance,perform,perform,13762,"DC-06; SIMULTANEOUS, QC, TWOSTEP; Y; Y; UHF. DC-12; SIMULTANEOUS, QC, TWOSTEP; Y; N; UHF. Note that for ODC-06 and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13916,Performance,optimiz,optimization,13916,"and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usefu",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:13937,Performance,perform,performed,13937,"and ODC-12 REFERENCE RHF is only available for; ALGORITHM SIMULTANEOUS. To compute \((\lambda_3)\) correction,; the THREE_PARTICLE option needs to be set to PERTURBATIVE. Minimal Input¶; Minimal input for the DCT single-point computation looks like this:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. energy('dct'). The energy('dct') call to energy() executes the DCT; module, which will first call the SCF module and perform the SCF computation; with RHF reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below:; molecule {; H; H 1 1.0; }. set basis cc-pvdz. optimize('dct'). The optimize('dct') call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. Recommendations¶; Here is a list of recommendations for the DCT module:. Generally, the use of the simultaneous algorithm together with the; AO_BASIS DISK option is recommended (set by default).; In cases when available memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly usefu",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:15375,Performance,perform,performing,15375,"lable memory is insufficient, the use of the AO_BASIS DISK option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation.; In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; DIIS_START_CONVERGENCE option to the value greater than; \(10^{-3}\) by one or two orders of magnitude (e.g. \(10^{-2}\) or; \(10^{-1}\)). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations.; If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm.; When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the QC_COUPLING option to FALSE for efficiency; reasons (set by default).; For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set ODC_GUESS to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; GUESS_R_CONVERGENCE option. table of contents. DCT: Density Cumulant Theory; Theory; Methods; Iterative Algorithms; Analytic Gradients; Methods Summary; Minimal Input; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; DCT: Density Cumulant Theory. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:11126,Safety,avoid,avoiding,11126,"these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below \(10^{-7}\). The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive \({\cal O}(N^5)\) integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive \({\cal O}(N^6)\); cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; \((vv|vv)\) and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the AO_BASIS option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; Recommendations. Analytic Gradients¶; Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: TWOSTEP (default) and SIMULTANEOUS. These algorithms are similar to those; described for the orbital and cumulant updates in the Iterative Algorithms; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the RESPONSE_ALGORITHM option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:1474,Usability,simpl,simple,1474,"energy expression in terms of the one- and; two-particle density matrices (\(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\)):. \[E = h_p^q \gamma_q^p + \frac{1}{2} g_{pq}^{rs} \gamma_{rs}^{pq}\]; Here we used Einstein convention for the summation over the repeated indices.; \(h_p^q\) and \(g_{pq}^{rs}\) are the standard one- and two-electron integrals, and; \(\gamma_p^q\) and \(\gamma_{pq}^{rs}\) are the elements of \(\boldsymbol{\gamma_1}\) and \(\boldsymbol{\gamma_2}\),; respectively. Naively, one might expect that it is possible to minimize the; energy functional in the equation above and obtain the exact energy. This is,; however, not trivial, as the density matrix elements \(\gamma_p^q\) and; \(\gamma_{pq}^{rs}\) cannot be varied arbitrarily, but must satisfy some; conditions that make sure that the density matrices are N-representable, i.e.; correspond to an antisymmetric N-electron wavefunction. Unfortunately, no; simple set of necessary and sufficient N-representability conditions are known,; and some of the known conditions are not easily imposed. In addition, the lack; of separability of the density matrices may result in the loss of; size-consistency and size-extensivity. In DCT, one takes a different route and; replaces \(\boldsymbol{\gamma_2}\) in favor of its two-particle density cumulant:. \[\lambda_{pq}^{rs} = \gamma_{pq}^{rs} - \gamma_p^r \gamma_q^s + \gamma_p^s \gamma_q^r\]; The one-particle density matrix is separated into its idempotent part; \(\boldsymbol{\kappa}\) and a correction \(\boldsymbol{\tau}\):. \[\gamma_p^q = \kappa_p^q + \tau_p^q\]; The idempotent part of \(\boldsymbol{\gamma_1}\) corresponds to a mean-field Hartree–Fock-like density,; while the non-idempotent correction \(\boldsymbol{\tau}\); depends on the density cumulant and describes the electron correlation effects.; Inserting the above two equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/dct.html:3378,Usability,simpl,simplified,3378,"equations into the energy expression, we obtain:. \[E_{DCT} = \frac{1}{2} \left( h_p^q + f_p^q \right) \gamma_q^p + \frac{1}{4} \bar{g}_{pq}^{rs} \lambda_{rs}^{pq}\]; where the antisymmetrized two-electron integrals and the generalized Fock operator; matrix elements were defined as follows:. \[\bar{g}_{pq}^{rs} = g_{pq}^{rs} - g_{pq}^{sr}\]. \[f_p^q = h_p^q + \bar{g}_{pr}^{qs} \gamma_{s}^{r}\]; Energy functional \(E_{DCT}\) has several important properties. First,; the energy is now a function of two sets of independent parameters, the; idempotent part of \(\boldsymbol{\gamma_1}\) (\(\boldsymbol{\kappa}\)) and the density cumulant; (\(\boldsymbol{\lambda_2}\)). As a result, the energy functional is Hermitian,; which is important for the evaluation of the molecular properties. The additive; separability of the density cumulant guarantees that all of the DCT methods; are size-extensive and size-consistent. Furthermore, the N-representability; problem is now greatly simplified, because the idempotent part of \(\boldsymbol{\gamma_1}\) is; N-representable by construction. One only needs to worry about the; N-representability of the density cumulant, which is a relatively small part of; \(\boldsymbol{\gamma_2}\).; In order to obtain the DCT energy, two conditions must be satisfied:. The energy must be stationary with respect to a set of orbitals. This can be done by; diagonalizing the generalized Fock operator (as in the DC-06 and DC-12 methods, see below),; which introduces partial orbital relaxation, or by fully relaxing the orbitals and minimizing the entire energy expression; (as in the ODC-06 and ODC-12 methods).; The energy must be stationary with respect to the variation of the density; cumulant \(\boldsymbol{\lambda_2}\), constrained to N-representability conditions. Making the energy stationary requires solution of two sets of coupled; equations for orbitals and density cumulant, respectively (also known as; residual equations). At the present moment, three diffe",MatchSource.WIKI,psi4manual/1.4.0/dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dct.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4518,Availability,avail,available,4518,"putations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:6350,Availability,avail,available,6350,"l; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overri",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:7097,Availability,error,error,7097,"FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:9416,Availability,robust,robust,9416,"I vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. OPDM¶. Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, ad",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:15046,Availability,avail,available,15046,"onment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:635,Deployability,configurat,configuration,635,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:2679,Deployability,configurat,configuration,2679," for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3360,Deployability,configurat,configuration,3360,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3739,Deployability,configurat,configurational,3739,". Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI w",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:10683,Deployability,configurat,configuration,10683,"e one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix DETCI. Spin Multiplicities of Higher Roots¶; As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of \(M_s\) is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14177,Deployability,release,released,14177,"to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:16136,Deployability,update,updated,16136,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:626,Energy Efficiency,adapt,adapted,626,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:2371,Energy Efficiency,efficient,efficient,2371,"ant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in t",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3332,Energy Efficiency,efficient,efficient,3332,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4712,Energy Efficiency,energy,energy,4712,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4793,Energy Efficiency,energy,energy,4793," and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in p",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4833,Energy Efficiency,energy,energy,4833," and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in p",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4966,Energy Efficiency,efficient,efficient,4966,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:5016,Energy Efficiency,energy,energy,5016,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:5065,Energy Efficiency,efficient,efficient,5065,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:5472,Energy Efficiency,energy,energy,5472,"nual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:6575,Energy Efficiency,energy,energy,6575,"as built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13204,Energy Efficiency,energy,energy,13204,"nvergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interf",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13252,Energy Efficiency,energy,energy,13252,"nvergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interf",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13632,Energy Efficiency,energy,energy,13632,"le is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13830,Energy Efficiency,energy,energy,13830,"shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13956,Energy Efficiency,energy,energy,13956,"full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); howe",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13988,Energy Efficiency,energy,energy,13988,"full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); howe",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14771,Energy Efficiency,efficient,efficient,14771,"ses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14852,Energy Efficiency,efficient,efficient,14852,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Pe",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:15398,Energy Efficiency,energy,energy,15398,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14245,Integrability,interface,interface,14245,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14909,Integrability,interface,interface,14909,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Pe",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:626,Modifiability,adapt,adapted,626,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:635,Modifiability,config,configuration,635,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:2679,Modifiability,config,configuration,2679," for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3360,Modifiability,config,configuration,3360,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3739,Modifiability,config,configurational,3739,". Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI w",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:10683,Modifiability,config,configuration,10683,"e one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix DETCI. Spin Multiplicities of Higher Roots¶; As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of \(M_s\) is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:2124,Performance,optimiz,optimized,2124,"} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3514,Performance,perform,perform,3514,"erminant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided i",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4722,Performance,optimiz,optimize,4722,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:5385,Performance,perform,performed,5385,"nual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:6433,Performance,perform,performed,6433,"enerically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these ar",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:6539,Performance,optimiz,optimization,6539,"enerically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these ar",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:7517,Performance,optimiz,optimized,7517,"aller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to han",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:7764,Performance,optimiz,optimized,7764,"ZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:7963,Performance,optimiz,optimized,7963,"EFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in dia",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:8174,Performance,optimiz,optimized,8174,"ault is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditi",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:8514,Performance,perform,perform,8514,"ROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:14653,Performance,optimiz,optimized,14653,"ses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:15219,Performance,perform,perform,15219,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:11790,Safety,avoid,avoided,11790,"minants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)), the program; will typically return singlets and not triplets. However, if enough roots are sought,; higher-multiplicities may enter in. This can be avoided by ensuring that all the guess; vectors have the correct spin multiplicity, by setting CALC_S_SQUARED to TRUE).; It is also possible to ask DETCI to compute roots of higher multiplicities. The desired value of spin may be; provided by setting S = \(S\). Typically, it would be a good idea in this context to also set; CALC_S_SQUARED to TRUE to ensure the guess roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-sh",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:15127,Testability,test,testing,15127,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:1226,Usability,simpl,simplest,1226,"; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are pa",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:3957,Usability,simpl,simple,3957,"I selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; w",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:4697,Usability,simpl,simply,4697,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci-1.html:13121,Usability,simpl,simplest,13121,"s roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this ",MatchSource.WIKI,psi4manual/1.4.0/detci-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci-1.html
https://psicode.org/psi4manual/1.4.0/detci.html:4518,Availability,avail,available,4518,"putations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:6350,Availability,avail,available,6350,"l; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overri",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:7097,Availability,error,error,7097,"FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:9416,Availability,robust,robust,9416,"I vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots. Type: string; Possible Values: RSP, DAVIDSON, SEM; Default: SEM. OPDM¶. Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, ad",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:15046,Availability,avail,available,15046,"onment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:635,Deployability,configurat,configuration,635,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:2679,Deployability,configurat,configuration,2679," for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3360,Deployability,configurat,configuration,3360,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3739,Deployability,configurat,configurational,3739,". Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI w",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:10683,Deployability,configurat,configuration,10683,"e one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix DETCI. Spin Multiplicities of Higher Roots¶; As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of \(M_s\) is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14177,Deployability,release,released,14177,"to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:16136,Deployability,update,updated,16136,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:626,Energy Efficiency,adapt,adapted,626,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:2371,Energy Efficiency,efficient,efficient,2371,"ant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in t",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3332,Energy Efficiency,efficient,efficient,3332,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4712,Energy Efficiency,energy,energy,4712,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4793,Energy Efficiency,energy,energy,4793," and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in p",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4833,Energy Efficiency,energy,energy,4833," and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in p",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4966,Energy Efficiency,efficient,efficient,4966,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:5016,Energy Efficiency,energy,energy,5016,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:5065,Energy Efficiency,efficient,efficient,5065,"ause; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); R",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:5472,Energy Efficiency,energy,energy,5472,"nual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:6575,Energy Efficiency,energy,energy,6575,"as built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13204,Energy Efficiency,energy,energy,13204,"nvergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interf",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13252,Energy Efficiency,energy,energy,13252,"nvergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interf",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13632,Energy Efficiency,energy,energy,13632,"le is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13830,Energy Efficiency,energy,energy,13830,"shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13956,Energy Efficiency,energy,energy,13956,"full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); howe",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13988,Energy Efficiency,energy,energy,13988,"full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); howe",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14771,Energy Efficiency,efficient,efficient,14771,"ses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14852,Energy Efficiency,efficient,efficient,14852,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Pe",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:15398,Energy Efficiency,energy,energy,15398,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14245,Integrability,interface,interface,14245,"P10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbit",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14909,Integrability,interface,interface,14909,"_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Pe",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:626,Modifiability,adapt,adapted,626,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:635,Modifiability,config,configuration,635,"﻿. CI: Configuration Interaction. Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. CI: Configuration Interaction¶; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; Th",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:2679,Modifiability,config,configuration,2679," for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3360,Modifiability,config,configuration,3360,"ighly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This us",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3739,Modifiability,config,configurational,3739,". Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI w",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:10683,Modifiability,config,configuration,10683,"e one-particle density matrix if not otherwise required?. Type: boolean; Default: false. TDM¶. Do compute the transition density? Note: only transition densities between roots of the same symmetry will be evaluated. DETCI does not compute states of different irreps within the same computation; to do this, lower the symmetry of the computation. Type: boolean; Default: false. DIPMOM¶. Do compute the dipole moment?. Type: boolean; Default: false. MPN¶. Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix DETCI. Spin Multiplicities of Higher Roots¶; As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of \(M_s\) is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:2124,Performance,optimiz,optimized,2124,"} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3514,Performance,perform,perform,3514,"erminant-based string formalism; of Handy [Handy:1980]. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI’s. A RAS CI selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided i",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4722,Performance,optimiz,optimize,4722,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:5385,Performance,perform,performed,5385,"nual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:6433,Performance,perform,performed,6433,"enerically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these ar",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:6539,Performance,optimiz,optimization,6539,"enerically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially EX_LEVEL) are set appropriately. Some; examples of single-refence CI, RASCI, and full CI computations are provided; in psi4/samples. Orbital spaces for CI computations¶. CI (e.g., CISD, FCI); RASCI; CASCI. FROZEN_UOCC; FROZEN_UOCC; FROZEN_UOCC 1. (all orbitals not in; FROZEN_UOCC; or FROZEN_DOCC; are included in CI); RAS4; ACTIVE. RAS3. RAS2. RAS1. FROZEN_DOCC; FROZEN_DOCC; FROZEN_DOCC. 1; FROZEN_UOCC is not required and will be inferred if; ACTIVE is provided. However, if it is easier to specify; FROZEN_UOCC, then this may be provided and ACTIVE can; be inferred. The table above shows the relevant orbitals spaces for CI computations (an; analogous table for MCSCF is also available).; The third column of the; table refers to CASCI, in which a full CI is performed in some smaller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these ar",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:7517,Performance,optimiz,optimized,7517,"aller; set of active orbitals; it is equivalent to CASSCF except without; any orbital optimization. It can be invoked via energy('fci'); with appropriate values selected for FROZEN_DOCC and; ACTIVE. For CI computations, there is no difference between; FROZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to han",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:7764,Performance,optimiz,optimized,7764,"ZEN_DOCC and RESTRICTED_DOCC, or between; FROZEN_UOCC and RESTRICTED_UOCC. There are; differences between these keywords for MCSCF: Multi-Configurational Self-Consistent-Field. Basic DETCI Keywords¶. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:7963,Performance,optimiz,optimized,7963,"EFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF; Default: RHF. R_CONVERGENCE¶. Convergence criterion for CI residual vector in the Davidson algorithm (RMS error). The default is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in dia",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:8174,Performance,optimiz,optimized,8174,"ault is 1e-4 for energies and 1e-7 for gradients. Type: conv double; Default: 1e-4. EX_LEVEL¶. The CI excitation level. Type: integer; Default: 2. FCI¶. Do a full CI (FCI)? If TRUE, overrides the value of EX_LEVEL. Type: boolean; Default: false. FROZEN_DOCC¶. An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditi",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:8514,Performance,perform,perform,8514,"ROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. RESTRICTED_DOCC¶. An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC¶. An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. FROZEN_UOCC¶. An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. CI_MAXITER¶. Maximum number of iterations to diagonalize the Hamiltonian. Type: integer; Default: 24. NUM_ROOTS¶. number of CI roots to find. Type: integer; Default: 1. ICORE¶. Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. DIAG_METHOD¶. This specifies which method is to be used in diagonalizing the Hamiltonian. The valid options are: RSP, to form the entire H matrix and diagonalize using libciomr to obtain all eigenvalues (n.b. requires HUGE memory); OLSEN, to use Olsen’s preconditioned inverse subspace method (1990); MITRUSHENKOV, to use a 2x2 Olsen/Davidson method; and DAVIDSON (or SEM) to use Liu’s Simultaneous Expansion Method, which is identical to the Davidson method if only one root is to be found. There also exists a SEM debugging mode, SEMTEST. The SEM method is the most robust, but it also requires \(2NM+1\) CI vectors on disk, where \(N\) is the maximum number of iterations and \(M\) is the number of roots",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:14653,Performance,optimiz,optimized,14653,"ses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:15219,Performance,perform,perform,15219,"ion of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated on Thursday, 05 August 2021 02:16PM.; Created using Sphinx 4.1.2.; . ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:11790,Safety,avoid,avoided,11790,"minants; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin \(S\). For example, diagonalizing the; Hamiltonian in a space spanned by determinants with \(M_s = 0\) can yield; both singlet and triplet solutions, because triplets (\(S = 1\)) also have an; \(M_s = 0\) component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with \(M_s = 0\),; the program will assume by default that a singlet (\(S = 0\)) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation; (this is controlled by the advanced keyword MS0, which defaults to TRUE).; Thus, if a user requests multiple roots (NUM_ROOTS = \(n\)), the program; will typically return singlets and not triplets. However, if enough roots are sought,; higher-multiplicities may enter in. This can be avoided by ensuring that all the guess; vectors have the correct spin multiplicity, by setting CALC_S_SQUARED to TRUE).; It is also possible to ask DETCI to compute roots of higher multiplicities. The desired value of spin may be; provided by setting S = \(S\). Typically, it would be a good idea in this context to also set; CALC_S_SQUARED to TRUE to ensure the guess roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-sh",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:15127,Testability,test,testing,15127,"rsion of this feature is not yet released. However,; the current version of the code does include an interface to; Kallay’s MRCC code.; The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216], or of Olsen [Olsen:2000:7140].; Notably, the approach in DETCI also allows arbitrary-order; active space coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by Kállay, to which PSI4 can interface (see Section; Interface to MRCC by M. Kállay); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103].; To perform arbitrary-order coupled-cluster, set the DETCI; option CC to TRUE, and set; CC_EX_LEVEL (note: not EX_LEVEL); to the desired coupled-cluster excitation level, and invoke; energy('detci'). Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix DETCI. table of contents. CI: Configuration Interaction; Basic DETCI Keywords; REFERENCE; R_CONVERGENCE; EX_LEVEL; FCI; FROZEN_DOCC; RESTRICTED_DOCC; RESTRICTED_UOCC; FROZEN_UOCC; CI_MAXITER; NUM_ROOTS; ICORE; DIAG_METHOD; OPDM; TDM; DIPMOM; MPN. Spin Multiplicities of Higher Roots; Arbitrary Order Perturbation Theory; Arbitrary Order Coupled-Cluster Theory. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.4;  · . PSI4. Theoretical Methods: SCF to FCI; CI: Configuration Interaction. © Copyright 2021, The Psi4 Project.; Last updated ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:1226,Usability,simpl,simplest,1226,"; Code author: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; Section author: Daniel G. A. Smith and C. David Sherrill; Module: Keywords, PSI Variables, DETCI; Configuration interaction (CI) is one of the most general ways to; improve upon Hartree–Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a “single-reference” CI based; on reference function \(| \Phi_0 \rangle\), we can write the CI expansion as; follows:. (1)¶\[| \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab}; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots\]; The simplest standard CI method that improves upon Hartree–Fock is a CI; that adds all singly \(| \Phi_i^a \rangle\) and doubly; \(| \Phi_{ij}^{ab} \rangle\); substituted determinants (CISD) to the reference determinant; \(| \Phi_0 \rangle\). The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. MP2 is a less; expensive alternative giving results similar to those of CISD for small; molecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results.; The CI code in PSI4 is described in detail in; [Sherrill:1999:CI]. For the reasons stated above, the CI code in; PSI4 is not optimized for CISD computations, and it uses data structures; that are pa",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:3957,Usability,simpl,simple,3957,"I selects determinants for the; model space as those which have no more than \(n\) holes in the lowest set; of orbitals (called RAS I) and no more than \(m\) electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI.; The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; w",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:4697,Usability,simpl,simply,4697,"is called a; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in MCSCF: Multi-Configurational Self-Consistent-Field.; As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user’s; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix DETCI.; For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call energy(), optimize(), etc.,; with the common name for that CI wavefunction, like energy('cisd'); for a CISD single-point energy. The Python driver; recognizes cisd, cisdt, and cisdtq. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a; CISD computation, and energy('cisd') by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set QC_MODULE = DETCI.; Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ci6. A full; CI can be specified by fci. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like energy('detci'). The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options; (especially ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/detci.html:13121,Usability,simpl,simplest,13121,"s roots have the right spin. However, be advised that; seeking these higher roots may cause convergence problems, because roundoff may allow the lower-lying; roots of lower multiplicities to re-enter the computation (reducing convergence criteria may help).; For open-shell systems, the MS0 keyword is typically not relevant, and there; is no control over spin multiplicities of higher roots unless|detci__calc_s_squared| is; used. Arbitrary Order Perturbation Theory¶; The DETCI module is capable of computing energies for arbitrary; order Møller–Plesset perturbation theory (MPn, for closed-shell; systems with an RHF reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less).; The simplest way to run high-order perturbation theory computations is to; call, e.g., energy('mp10') to invoke a MP10 computation or; energy('zapt25') to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions.; For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; energy('mp10') sets MPN to TRUE.; The program uses the Wigner (2n+1) rule by default; (MPN_WIGNER = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets MAX_NUM_VECS to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. Arbitrary Order Coupled-Cluster Theory¶; This DETCI-based version of this ",MatchSource.WIKI,psi4manual/1.4.0/detci.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/detci.html
https://psicode.org/psi4manual/1.4.0/dfmp2-1.html:1343,Availability,robust,robust,1343,"les, DFMP2. Introduction¶; Second-order Møller–Plesset Perturbation Theory (MP2) occupies a unique role; in quantum chemistry due to its small-prefactor \({\cal O}(N^5)\) treatment of; dynamic electron correlation. This unusually cheap; ab initio treatment of electron correlation may be made even more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic \(ov\) products in the; bra- and ket- of the \((ov|ov)\)-type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; MP2 defaults in PSI4 to the density-fitted code. See; MP2_TYPE for performing a MP2 with conventional integrals.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('mp2'). The energy('mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted \((Q|ov)\) integrals and then builds the; full \((ov|ov)\) tensor in bloc",MatchSource.WIKI,psi4manual/1.4.0/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dfmp2-1.html
https://psicode.org/psi4manual/1.4.0/dfmp2-1.html:1691,Availability,avail,available,1691," more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic \(ov\) products in the; bra- and ket- of the \((ov|ov)\)-type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; MP2 defaults in PSI4 to the density-fitted code. See; MP2_TYPE for performing a MP2 with conventional integrals.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('mp2'). The energy('mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted \((Q|ov)\) integrals and then builds the; full \((ov|ov)\) tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result",MatchSource.WIKI,psi4manual/1.4.0/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dfmp2-1.html
https://psicode.org/psi4manual/1.4.0/dfmp2-1.html:1741,Availability,avail,available,1741," more; efficient by means of the Density-Fitting (DF) approximation (also known as; Resolution-of-the-Identity or RI), wherein the quadratic \(ov\) products in the; bra- and ket- of the \((ov|ov)\)-type Electron Repulsion Integrals (ERIs); appearing in MP2 are cast onto a linear-scaling auxiliary basis by least-squares; fitting. Substitution of the DF factorization into the MP2 equations results in; a formal scaling and prefactor reduction of MP2, and further speed gains are; possible due to heavy utilization of matrix-multiplication kernels and minimal; storage requirements in a DF approach. The method has been found to be quite; robust and accurate, and it should be preferred unless extreme accuracy is required; or a fitting basis is not defined for the primary basis and atom type; encountered. In particular, we have found excellent efficiency and tractability; gains when using DF-MP2 in concert with a DF-SCF reference. An efficient,; threaded, disk-based DF-MP2 code is available in PSI4 for all single; reference types available in the SCF module.; MP2 defaults in PSI4 to the density-fitted code. See; MP2_TYPE for performing a MP2 with conventional integrals.; An example utilization of the code is:; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set basis cc-pvdz; set scf_type df; set freeze_core True. energy('mp2'). The energy('mp2') call to energy() executes; the predefined DF-MP2 procedure, first calling; the SCF module with a default RHF reference and DF algorithm for the; two-electron integrals. When the orbitals are converged, the DF-MP2 module is; launched, which forms the density-fitted \((Q|ov)\) integrals and then builds the; full \((ov|ov)\) tensor in blocks, evaluating the contributions to the MP2 energy; as it goes. A RHF-MP2 wavefunction is selected automatically due to the RHF; reference. In this example, we freeze the core, both for efficiency and; because split-valence bases like cc-pVDZ do not contain core correlation; functions. The result",MatchSource.WIKI,psi4manual/1.4.0/dfmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.4.0/dfmp2-1.html
