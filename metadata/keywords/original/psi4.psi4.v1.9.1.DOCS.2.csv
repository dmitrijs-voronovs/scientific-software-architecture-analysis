id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:5362,Integrability,interface,interface,5362,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:5413,Integrability,rout,route,5413,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3594,Modifiability,variab,variables,3594,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4957,Performance,optimiz,optimization,4957,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:5003,Performance,optimiz,optimize,5003,"mited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_gcp`. (This function; is the same |PSIfour|/``gcp`` interface that is called during an scf job.); This route is much faster than running a HF or DFT energy. ::. molecule nene {; Ne; Ne 1 2.0; }. nene.update_geometry(). >>> E, G = nene.run_gcp('hf3c'). >>> E, G = nene.run_gcp(func='HF3c', verbose=True). .. autofunction:: qcdb.Molecule.run_gcp. ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3351,Safety,detect,detect,3351,"kage can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:1250,Testability,test,testSuitegcp,1250,"sponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gCP; .. _`sec:gcp`:. Interface to gCP by S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:3542,Usability,simpl,simply,3542,"t :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |P",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:4243,Usability,simpl,simple-,4243,"inary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PBEh-3c""; [Grimme:2015:054107]_, ""B97-3c"" [Brandenburg:2018:b973c]_, ""r2SCAN-3c"" [Grimme:2021:064103]_,; and ""wB97X-3c"" [Muller:2023:014103]_ methods (both energy and gradient).; The interface can use classic or mctc-gcp executables but only the latter implements ""B97-3c"" and ""r2SCAN-3c"".; The newest wB97X-3c method doesn't use a gcp correction (it does use ECPs down to first row elements); but is listed here for completeness of the ""3c"" family.; A :ref:`DFTD3 <sec:dftd3>` executable, classic or simple-dftd3, must also be available for; the HF-3c, PBEh-3c, or B97-3c methods to run.; A :ref:`DFTD4 <sec:dftd3>` python module must also be available for; the r2SCAN-3c or wB97X-3c methods to run.; These method are defined with their own basis set and thus no basis set should be set by the user.; |PSIfour| will select the intended basis sets: HF-3c/MINIX, PBEh-3c/def2-mSVP, B97-3c/def2-mTZVP, r2SCAN-3c/def2-mTZVPP, wB97X-3c/vDZP.; If a basis has previously been set for another calculation, use the slash syntax to ""empty"" the basis; option for the scope of the current calculation, ``energy(""hf3c/"")``. A few practical examples:. * HF-3c single point with default minix basis ::. energy('hf3c'). * PBEh-3c optimization with default def2-mSVP basis ::. optimize('pbeh3c'). * r2SCAN-3c with default basis after basis set ::. set basis cc-pvdz; energy('r2scan3c/'). If only BSSE/basis set corrections (rather than total energies) are of; interest, the ``gcp`` program can be run independently of the scf; through ",MatchSource.DOCS,doc/sphinxman/source/gcp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:1980,Availability,avail,available,1980," .. include:: autodoc_abbr_options_c.rst. .. index:: ; DMA; GDMA; Distributed Multipole Analysis. .. _`sec:gdma`:. Interface to GDMA Distributed Multipole Analysis by A. J. Stone |w---w| :py:func:`~psi4.driver.gdma`; ====================================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and act",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3237,Availability,avail,available,3237,"nstructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='co",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3471,Availability,checkpoint,checkpoint,3471,"ild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current mo",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3694,Availability,down,download,3694,"hinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads t",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2125,Deployability,install,installed,2125,"Analysis. .. _`sec:gdma`:. Interface to GDMA Distributed Multipole Analysis by A. J. Stone |w---w| :py:func:`~psi4.driver.gdma`; ====================================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2230,Deployability,install,installed,2230,"=============================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is availab",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2319,Deployability,install,install,2319,"=============================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is availab",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2662,Deployability,install,installation,2662," .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the opti",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6321,Deployability,install,installation,6321,"dma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/de",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6485,Deployability,install,installation,6485,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2506,Integrability,depend,dependent,2506,". *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3025,Integrability,depend,dependent,3025,"get: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:4071,Integrability,rout,routine,4071,"ultipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information. After running, two matrices of results can be accessed::. dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6274,Integrability,depend,dependencies,6274,"1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:7339,Integrability,depend,dependencies,7339,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:5733,Modifiability,config,configure,5733,"UTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the :math:`Q^l_m` components of the multipoles are ordered as; :math:`Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6139,Modifiability,variab,variable,6139,"1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6238,Modifiability,variab,variable,6238,"1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6423,Modifiability,variab,variable,6423,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6617,Modifiability,variab,variable,6617,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6748,Modifiability,variab,variable,6748,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:7161,Modifiability,config,configdir,7161,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2481,Safety,detect,detect,2481,". *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6669,Safety,detect,detecting,6669,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6766,Safety,detect,detecting,6766,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:7213,Safety,detect,detectable,7213,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:4709,Security,access,accessed,4709,"; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads the correct wavefunction; information. After running, two matrices of results can be accessed::. dma_results = get_array_variable('DMA DISTRIBUTED MULTIPOLES'); tot_results = get_array_variable('DMA TOTAL MULTIPOLES'). The first contains distributed multipoles, in units given by; |gdma__gdma_multipole_units|, with the row index corresponding to the site and; the column index referencing the multipole component. Both indices are zero; based, and the :math:`Q^l_m` components of the multipoles are ordered as; :math:`Q^0_0, Q^1_0, Q^1_{1c}, Q^1_{1s}, Q^2_0, Q^2_{1c}, Q^2_{1s}, Q^2_{2c},; Q^2_{2s}, \ldots` The second matrix returned has a single row, whose columns; are the total multipoles, translated to |gdma__gdma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__g",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3289,Usability,simpl,simply,3289,"-c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will hav",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:3530,Usability,simpl,simplest,3530,"hinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the options described in the ; :download:`GDMA manual <gdma-2.3.pdf>`. If more advanced usage is desired, which is not is permitted by the options; listed below, the user may provide their own data file containing keywords to; control the GDMA code. Simply place the data file in the directory |PSIfour|; is called from, and provide the file name as the datafile argument to the; :py:func:`~psi4.driver.gdma` routine. For example, if GDMA data file is called; *control.dma*, the GDMA code is called as follows::. grad, wfn = gradient('mp2', return_wfn=True); gdma(wfn, datafile='control.dma'). An FCHK file will be generated for the GDMA code to read; this file will have; the prefix given by |globals__writer_file_label| (if set), or else by the name; of the output file plus the name of the current molecule, and the suffix will; be '.fchk'. This FCHK file name should be passed to the 'File' keyword in the; DGMA data file, to ensure that the GDMA code reads t",MatchSource.DOCS,doc/sphinxman/source/gdma.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:28949,Availability,avail,available,28949," ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method formed by any reweighting of the named :samp:`{method} DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Contrast with :samp`SCS-{method} TOTAL ENERGY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contri",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:29320,Availability,avail,available,29320,"NERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method formed by any reweighting of the named :samp:`{method} DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Contrast with :samp`SCS-{method} TOTAL ENERGY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contrib",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:29690,Availability,avail,available,29690,"GY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in d",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23748,Deployability,configurat,configuration,23748,"AL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23878,Deployability,configurat,configuration,23878,"gy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION EN",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24044,Deployability,configurat,configuration,24044," electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24228,Deployability,configurat,configuration,24228,"iant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psiva",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24347,Deployability,configurat,configuration,24347," TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundan",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24497,Deployability,configurat,configuration,24497,"energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24719,Deployability,configurat,configuration,24719,"pole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25147,Deployability,configurat,configuration,25147,"UADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monome",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25252,Deployability,configurat,configuration,25252,"(3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. p",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25394,Deployability,configurat,configuration,25394,"). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25747,Deployability,configurat,configuration,25747,"ation interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten),",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30895,Deployability,configurat,configuration,30895,"theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35096,Deployability,configurat,configuration,35096,"tal electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35503,Deployability,integrat,integrated,35503,"n energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38843,Deployability,configurat,configuration,38843,"], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48754,Deployability,configurat,configuration,48754,"he orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48974,Deployability,configurat,configuration,48974,"rbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49129,Deployability,configurat,configuration,49129,"[E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60586,Deployability,update,update,60586,"-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 ener",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:2418,Energy Efficiency,energy,energy,2418,"; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:2447,Energy Efficiency,energy,energy,2447,"; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:2640,Energy Efficiency,energy,energy,2640,"rection [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN).",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:2861,Energy Efficiency,energy,energy,2861,"sivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN); ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:3116,Energy Efficiency,energy,energy,3116,"eraged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labe",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:3392,Energy Efficiency,energy,energy,3392,"E_h] and correlation energy component [E_h]; for the averaged coupled-pair functional level of theory. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY. The excitation energy [E_h] from ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY; TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY; TD-fctl ROOT 0 (h) -> ROOT n (i) EXCITATION ENERGY. The excitation energy [E_h] from the ground state (which is of irrep *h*); to root *n* (which is of irrep *i*).; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION; TD-fctl ROOT 0 -> ROOT n EXCITATION ENERGY - h TRANSITION. The excitation energy [E_h] from the ground state to root *n*, and the; transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the ground state to root *n*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN); TD-fctl ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (LEN). The electric transition dipole moment [e a0] in length gauge, for the transition; from the groun",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9092,Energy Efficiency,energy,energy,9092," (h) -> ROOT n (i) ROTATORY STRENGTH (VEL); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (VEL). The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9121,Energy Efficiency,energy,energy,9121," (h) -> ROOT n (i) ROTATORY STRENGTH (VEL); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (VEL). The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9605,Energy Efficiency,energy,energy,9605," root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9658,Energy Efficiency,energy,energy,9658," root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9855,Energy Efficiency,energy,energy,9855,",). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) COR",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10067,Energy Efficiency,energy,energy,10067,"[E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10290,Energy Efficiency,energy,energy,10290,"BER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled c",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10541,Energy Efficiency,energy,energy,10541," The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10710,Energy Efficiency,energy,energy,10710,"d through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (IN h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10912,Energy Efficiency,energy,energy,10912,"al. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (IN h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n DIPOLE - h TRANSITION. Dipole array [e ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:11090,Energy Efficiency,energy,energy,11090,"starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (IN h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n DIPOLE - h TRANSITION. Dipole array [e a0] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0), (3,). .. psivar:: CCname ROOT n QUADRUPOLE. Redundant quad",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:11285,Energy Efficiency,energy,energy,11285,"which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (IN h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n (h) DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0), (3,). .. psivar:: CCname ROOT n DIPOLE - h TRANSITION. Dipole array [e a0] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0), (3,). .. psivar:: CCname ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,3). .. psivar:: CCname ROOT n (IN h) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the re",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:13892,Energy Efficiency,energy,energy,13892,"me ROOT m -> ROOT n EINSTEIN A (LEN). The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between roots *m* and *n*. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) EINSTEIN A (LEN). The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN A (LEN). The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN A (LEN) - h TRANSITION. The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN) - h TRANSITION. The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n ROTAT",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:14138,Energy Efficiency,energy,energy,14138,". The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN A (LEN). The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN A (LEN) - h TRANSITION. The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN) - h TRANSITION. The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). The length-gauge rotatory strength of the transition from root *m* to root *n*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) ROTATORY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:14415,Energy Efficiency,energy,energy,14415,"ontaneous emission 'probability.'; Units are in [1/s].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN A (LEN) - h TRANSITION. The Einstein A coefficient, the spontaneous emission 'probability.'; Units are in [1/s].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN) - h TRANSITION. The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). The length-gauge rotatory strength of the transition from root *m* to root *n*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* within irrep *h*; to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (h) -> ROOT n (",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:14710,Energy Efficiency,energy,energy,14710,"nits are in [1/s].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between root *m* within irrep *h* and root *n* which irrep *i*. .. psivar:: CCname ROOT m (h) -> ROOT n (i) EINSTEIN B (LEN). The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the transition between roots *m* and *n*, which are in irreps *h* and *i*, respectively.. .. psivar:: CCname ROOT m -> ROOT n EINSTEIN B (LEN) - h TRANSITION. The Einstein B coefficient, the stimulated emission 'probability'; in terms of energy density. Units are in [m^3 / J / s^2].; Describes the irrep *h* transition between roots *m* and *n*. .. psivar:: CCname ROOT m -> ROOT n ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN). The length-gauge rotatory strength of the transition from root *m* to root *n*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (IN h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* within irrep *h*; to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (h) -> ROOT n (i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: CCname ROOT m -> ROOT n ROTA",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:16073,Energy Efficiency,energy,energy,16073,"h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* within irrep *h*; to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (h) -> ROOT n (i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: CCname ROOT m -> ROOT n ROTATORY STRENGTH (LEN) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN) - h TRANSITION. The length-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: CC TOTAL ENERGY; CC CORRELATION ENERGY. .. psivar:: CC CORRELATION KINETIC ENERGY. The correlation correction to the kinetic energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION POTENTIAL ENERGY. The correlation correction to the potential energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION VIRIAL RATIO. The correlation virial ratio, as defined in https://doi/org/10.1063/1.1535440 for basis set completeness analysis. Computed using coupled cluster. .. psivar:: CC VIRIAL RATIO. The virial ratio, as computed by a coupled cluster method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM or solvated. .. psivar:: CC T1 DIAGNOSTIC; CC D1 DIAGNOSTIC; CC NEW D1 DIAGNOSTIC; CC D2 DIAGNOSTIC. Diagnostic of multireference character. .. psivar:: CC2 TOTAL ENERGY; CC2 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC4 TOTAL ENERGY; CC4 CORRELATION ENERGY; CCnn TOTAL ENERGY; CCnn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested approximate coupled-cluster (CC2, CC3, up t",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:16217,Energy Efficiency,energy,energy,16217,"th of the transition from root *m* within irrep *h*; to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: CCname ROOT m (h) -> ROOT n (i) ROTATORY STRENGTH (LEN); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (LEN). The length-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: CCname ROOT m -> ROOT n ROTATORY STRENGTH (LEN) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (LEN) - h TRANSITION. The length-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: CC TOTAL ENERGY; CC CORRELATION ENERGY. .. psivar:: CC CORRELATION KINETIC ENERGY. The correlation correction to the kinetic energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION POTENTIAL ENERGY. The correlation correction to the potential energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION VIRIAL RATIO. The correlation virial ratio, as defined in https://doi/org/10.1063/1.1535440 for basis set completeness analysis. Computed using coupled cluster. .. psivar:: CC VIRIAL RATIO. The virial ratio, as computed by a coupled cluster method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM or solvated. .. psivar:: CC T1 DIAGNOSTIC; CC D1 DIAGNOSTIC; CC NEW D1 DIAGNOSTIC; CC D2 DIAGNOSTIC. Diagnostic of multireference character. .. psivar:: CC2 TOTAL ENERGY; CC2 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC4 TOTAL ENERGY; CC4 CORRELATION ENERGY; CCnn TOTAL ENERGY; CCnn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested approximate coupled-cluster (CC2, CC3, up to CC\ *nn*); level of theory. .. psivar:: CC DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root, (3,). .. p",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:16965,Energy Efficiency,energy,energy,16965,"ERGY. The correlation correction to the kinetic energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION POTENTIAL ENERGY. The correlation correction to the potential energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION VIRIAL RATIO. The correlation virial ratio, as defined in https://doi/org/10.1063/1.1535440 for basis set completeness analysis. Computed using coupled cluster. .. psivar:: CC VIRIAL RATIO. The virial ratio, as computed by a coupled cluster method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM or solvated. .. psivar:: CC T1 DIAGNOSTIC; CC D1 DIAGNOSTIC; CC NEW D1 DIAGNOSTIC; CC D2 DIAGNOSTIC. Diagnostic of multireference character. .. psivar:: CC2 TOTAL ENERGY; CC2 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC4 TOTAL ENERGY; CC4 CORRELATION ENERGY; CCnn TOTAL ENERGY; CCnn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested approximate coupled-cluster (CC2, CC3, up to CC\ *nn*); level of theory. .. psivar:: CC DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root, (3,). .. psivar:: CC2 DIPOLE POLARIZABILITY @ xNM; CCSD DIPOLE POLARIZABILITY @ xNM. The dipole polarizability in atomic units [(e^2 a0^2)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 DIPOLE POLARIZABILITY TENSOR @ xNM; CCSD DIPOLE POLARIZABILITY TENSOR @ xNM. The dipole polarizability tensor in atomic units [(e^2 a0^2)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 QUADRUPOLE POLARIZABILITY @ xNM; CCSD QUADRUPOLE POLARIZABILITY @ xNM. The quadrupole polarizability in atomic units [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 QUADRUPOLE POLARIZABILITY TENSOR @ xNM; CCSD QUADRUPOLE POLARIZABILITY TENSOR @ x",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:16994,Energy Efficiency,energy,energy,16994,"ERGY. The correlation correction to the kinetic energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION POTENTIAL ENERGY. The correlation correction to the potential energy [E_h], as computed by a coupled cluster method. .. psivar:: CC CORRELATION VIRIAL RATIO. The correlation virial ratio, as defined in https://doi/org/10.1063/1.1535440 for basis set completeness analysis. Computed using coupled cluster. .. psivar:: CC VIRIAL RATIO. The virial ratio, as computed by a coupled cluster method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM or solvated. .. psivar:: CC T1 DIAGNOSTIC; CC D1 DIAGNOSTIC; CC NEW D1 DIAGNOSTIC; CC D2 DIAGNOSTIC. Diagnostic of multireference character. .. psivar:: CC2 TOTAL ENERGY; CC2 CORRELATION ENERGY; CC3 TOTAL ENERGY; CC3 CORRELATION ENERGY; CC4 TOTAL ENERGY; CC4 CORRELATION ENERGY; CCnn TOTAL ENERGY; CCnn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested approximate coupled-cluster (CC2, CC3, up to CC\ *nn*); level of theory. .. psivar:: CC DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root, (3,). .. psivar:: CC2 DIPOLE POLARIZABILITY @ xNM; CCSD DIPOLE POLARIZABILITY @ xNM. The dipole polarizability in atomic units [(e^2 a0^2)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 DIPOLE POLARIZABILITY TENSOR @ xNM; CCSD DIPOLE POLARIZABILITY TENSOR @ xNM. The dipole polarizability tensor in atomic units [(e^2 a0^2)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 QUADRUPOLE POLARIZABILITY @ xNM; CCSD QUADRUPOLE POLARIZABILITY @ xNM. The quadrupole polarizability in atomic units [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 QUADRUPOLE POLARIZABILITY TENSOR @ xNM; CCSD QUADRUPOLE POLARIZABILITY TENSOR @ x",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:19228,Energy Efficiency,energy,energy,19228," specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (VEL) @ xNM; CCSD SPECIFIC ROTATION (VEL) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (MVG) @ xNM; CCSD SPECIFIC ROTATION (MVG) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM; CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM. The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:19257,Energy Efficiency,energy,energy,19257," specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (VEL) @ xNM; CCSD SPECIFIC ROTATION (VEL) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (MVG) @ xNM; CCSD SPECIFIC ROTATION (MVG) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM; CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM. The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20117,Energy Efficiency,adapt,adapted,20117,"unded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATI",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20402,Energy Efficiency,adapt,adapted,20402,"A-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20724,Energy Efficiency,energy,energy,20724,"NERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCS",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20753,Energy Efficiency,energy,energy,20753,"NERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCS",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21160,Energy Efficiency,energy,energy,21160,"PLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation ene",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21189,Energy Efficiency,energy,energy,21189,"PLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation ene",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21538,Energy Efficiency,energy,energy,21538,"N ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy co",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21567,Energy Efficiency,energy,energy,21567,"N ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy co",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21878,Energy Efficiency,energy,energy,21878,"RGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CC",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:21907,Energy Efficiency,energy,energy,21907,"RGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CC",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22212,Energy Efficiency,energy,energy,22212,"CSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEP",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22241,Energy Efficiency,energy,energy,22241,"CSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY; CCSDTQ-1a TOTAL ENERGY; CCSDTQ-1a CORRELATION ENERGY; CCn-1a TOTAL ENERGY; CCn-1a CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEP",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22565,Energy Efficiency,energy,energy,22565,")-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR COD",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22594,Energy Efficiency,energy,energy,22594,")-1a, CCSDT(Q)-1a,; up to CC\ *n*\ -1a) level of theory. .. psivar:: CCSDT-1b TOTAL ENERGY; CCSDT-1b CORRELATION ENERGY; CCSDTQ-1b TOTAL ENERGY; CCSDTQ-1b CORRELATION ENERGY; CCn-1b TOTAL ENERGY; CCn-1b CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR COD",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22871,Energy Efficiency,energy,energy,22871,"energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction leve",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:22900,Energy Efficiency,energy,energy,22900,"energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-1b, CCSDT(Q)-1b,; up to CC\ *n*\ -1b) level of theory. .. psivar:: CCSDT-3 TOTAL ENERGY; CCSDT-3 CORRELATION ENERGY; CCSDTQ-3 TOTAL ENERGY; CCSDTQ-3 CORRELATION ENERGY; CCn-3 TOTAL ENERGY; CCn-3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)-3, CCSDT(Q)-3,; up to CC\ *n*\ -3) level of theory. .. psivar:: CCSD(T)_L TOTAL ENERGY; CCSD(T)_L CORRELATION ENERGY; CCSDT(Q)_L TOTAL ENERGY; CCSDT(Q)_L CORRELATION ENERGY; CC(n-1)(n)_L TOTAL ENERGY; CC(n-1)(n)_L CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction leve",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23472,Energy Efficiency,energy,energy,23472,"ELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23501,Energy Efficiency,energy,energy,23501,"ELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the approximate coupled-cluster (CCSD(T)_L, CCSDT(Q)_L,; up to CC(\ *n*\ -1)(\ *n*\ )L level of theory. .. psivar:: CCSDT(Q)/A TOTAL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24648,Energy Efficiency,energy,energy,24648,"pole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24677,Energy Efficiency,energy,energy,24677,"pole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24903,Energy Efficiency,energy,energy,24903,"CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body intera",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24932,Energy Efficiency,energy,energy,24932,"CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body intera",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25076,Energy Efficiency,energy,energy,25076,"UADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monome",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25105,Energy Efficiency,energy,energy,25105,"UADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monome",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25678,Energy Efficiency,energy,energy,25678,"ation interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten),",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25707,Energy Efficiency,energy,energy,25707,"ation interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten),",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25897,Energy Efficiency,energy,energy,25897,"ergy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26199,Energy Efficiency,energy,energy,26199,"Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most re",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26317,Energy Efficiency,energy,energy,26317,"LE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26515,Energy Efficiency,energy,energy,26515,"RELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by any reweighting of :psivar:`MP2 DOUBLES ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:27417,Energy Efficiency,energy,energy,27417,"c energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by any reweighting of :psivar:`MP2 DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Depending on weights, may equal any of MP2, SCS-MP2, SCS(N)-MP2, etc. quantities.; Contrast with :psivar:`SCS-MP2 TOTAL ENERGY`. .. psivar:: CUSTOM SCS-MP2.5 TOTAL ENERGY; CUSTOM SCS-MP2.5 CORRELATION ENERGY; CUSTOM SCS-MP3 TOTAL ENERGY; CUSTOM SCS-MP3 CORRELATION ENERGY; CUSTOM SCS-REMP2 TOTAL ENERGY; CUSTOM SCS-REMP2 CORRELATION ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method fo",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:27446,Energy Efficiency,energy,energy,27446,"c energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by any reweighting of :psivar:`MP2 DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Depending on weights, may equal any of MP2, SCS-MP2, SCS(N)-MP2, etc. quantities.; Contrast with :psivar:`SCS-MP2 TOTAL ENERGY`. .. psivar:: CUSTOM SCS-MP2.5 TOTAL ENERGY; CUSTOM SCS-MP2.5 CORRELATION ENERGY; CUSTOM SCS-MP3 TOTAL ENERGY; CUSTOM SCS-MP3 CORRELATION ENERGY; CUSTOM SCS-REMP2 TOTAL ENERGY; CUSTOM SCS-REMP2 CORRELATION ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method fo",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:28443,Energy Efficiency,energy,energy,28443,"ES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Depending on weights, may equal any of MP2, SCS-MP2, SCS(N)-MP2, etc. quantities.; Contrast with :psivar:`SCS-MP2 TOTAL ENERGY`. .. psivar:: CUSTOM SCS-MP2.5 TOTAL ENERGY; CUSTOM SCS-MP2.5 CORRELATION ENERGY; CUSTOM SCS-MP3 TOTAL ENERGY; CUSTOM SCS-MP3 CORRELATION ENERGY; CUSTOM SCS-REMP2 TOTAL ENERGY; CUSTOM SCS-REMP2 CORRELATION ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method formed by any reweighting of the named :samp:`{method} DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Contrast with :samp`SCS-{method} TOTAL ENERGY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kc",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:28472,Energy Efficiency,energy,energy,28472,"ES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Depending on weights, may equal any of MP2, SCS-MP2, SCS(N)-MP2, etc. quantities.; Contrast with :psivar:`SCS-MP2 TOTAL ENERGY`. .. psivar:: CUSTOM SCS-MP2.5 TOTAL ENERGY; CUSTOM SCS-MP2.5 CORRELATION ENERGY; CUSTOM SCS-MP3 TOTAL ENERGY; CUSTOM SCS-MP3 CORRELATION ENERGY; CUSTOM SCS-REMP2 TOTAL ENERGY; CUSTOM SCS-REMP2 CORRELATION ENERGY; CUSTOM SCS-LCCD TOTAL ENERGY; CUSTOM SCS-LCCD CORRELATION ENERGY; CUSTOM SCS-OMP2 TOTAL ENERGY; CUSTOM SCS-OMP2 CORRELATION ENERGY; CUSTOM SCS-OMP2.5 TOTAL ENERGY; CUSTOM SCS-OMP2.5 CORRELATION ENERGY; CUSTOM SCS-OMP3 TOTAL ENERGY; CUSTOM SCS-OMP3 CORRELATION ENERGY; CUSTOM SCS-OREMP2 TOTAL ENERGY; CUSTOM SCS-OREMP2 CORRELATION ENERGY; CUSTOM SCS-OLCCD TOTAL ENERGY; CUSTOM SCS-OLCCD CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the method formed by any reweighting of the named :samp:`{method} DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Contrast with :samp`SCS-{method} TOTAL ENERGY`. .. psivar:: db_name DATABASE MEAN ABSOLUTE DEVIATION. The mean absolute deviation [\ |kcalpermol|\ ] of the requested method; *name* from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kc",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:29875,Energy Efficiency,energy,energy,29875," reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of c",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:29994,Energy Efficiency,reduce,reduced,29994,"ge; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30018,Energy Efficiency,energy,energy,30018,"ge; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30087,Energy Efficiency,reduce,reduced,30087,"EF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without an",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30154,Energy Efficiency,energy,energy,30154,"ermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30229,Energy Efficiency,reduce,reduced,30229,"b_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correct",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30279,Energy Efficiency,reduce,reduced,30279,"b_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correct",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30303,Energy Efficiency,energy,energy,30303,"b_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correct",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30436,Energy Efficiency,reduce,reduced,30436,"name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30542,Energy Efficiency,energy,energy,30542,"e*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30691,Energy Efficiency,energy,energy,30691,"ill be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\tex",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30996,Energy Efficiency,energy,energy,30996,"for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DFT TOTAL GRADIENT. The total electronic gradient [E_h/a0] of ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:31403,Energy Efficiency,energy,energy,31403,"cept by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DFT TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the requested DFT method, ({nat}, 3). .. psivar:: DFT DIPOLE GRADIENT. The derivative of the requested DFT method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: DFT TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the requested DFT method, (3 * {nat",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:32486,Energy Efficiency,energy,energy,32486,"rap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DFT TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the requested DFT method, ({nat}, 3). .. psivar:: DFT DIPOLE GRADIENT. The derivative of the requested DFT method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: DFT TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the requested DFT method, (3 * {nat}, 3 * {nat}). .. psivar:: DFT XC ENERGY. The functional energy contribution [E_h] to the total SCF energy (DFT only).; Quantity :math:`E_{xc}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`. .. psivar:: DFT VV10 ENERGY. The VV10 nonlocal contribution [E_h] to the total SCF energy (DFT only).; Included in :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DISPERSION CORRECTION ENERGY; fctl DISPERSION CORRECTION ENERGY. The dispersion correction [E_h] appended to an underlying functional; when a DFT-D method is requested. Quantity :math:`E_{\text{-D}}`; in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; When dispersion parameters are untweaked for a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:32529,Energy Efficiency,energy,energy,32529,"rap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DFT TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the requested DFT method, ({nat}, 3). .. psivar:: DFT DIPOLE GRADIENT. The derivative of the requested DFT method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: DFT TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the requested DFT method, (3 * {nat}, 3 * {nat}). .. psivar:: DFT XC ENERGY. The functional energy contribution [E_h] to the total SCF energy (DFT only).; Quantity :math:`E_{xc}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`. .. psivar:: DFT VV10 ENERGY. The VV10 nonlocal contribution [E_h] to the total SCF energy (DFT only).; Included in :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DISPERSION CORRECTION ENERGY; fctl DISPERSION CORRECTION ENERGY. The dispersion correction [E_h] appended to an underlying functional; when a DFT-D method is requested. Quantity :math:`E_{\text{-D}}`; in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; When dispersion parameters are untweaked for a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:32699,Energy Efficiency,energy,energy,32699,"_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corrected, this quantity is equal to; :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DFT TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the requested DFT method, ({nat}, 3). .. psivar:: DFT DIPOLE GRADIENT. The derivative of the requested DFT method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: DFT TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the requested DFT method, (3 * {nat}, 3 * {nat}). .. psivar:: DFT XC ENERGY. The functional energy contribution [E_h] to the total SCF energy (DFT only).; Quantity :math:`E_{xc}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`. .. psivar:: DFT VV10 ENERGY. The VV10 nonlocal contribution [E_h] to the total SCF energy (DFT only).; Included in :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DISPERSION CORRECTION ENERGY; fctl DISPERSION CORRECTION ENERGY. The dispersion correction [E_h] appended to an underlying functional; when a DFT-D method is requested. Quantity :math:`E_{\text{-D}}`; in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; When dispersion parameters are untweaked for a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding to the site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:33213,Energy Efficiency,energy,energy,33213,"degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: DFT TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the requested DFT method, (3 * {nat}, 3 * {nat}). .. psivar:: DFT XC ENERGY. The functional energy contribution [E_h] to the total SCF energy (DFT only).; Quantity :math:`E_{xc}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`. .. psivar:: DFT VV10 ENERGY. The VV10 nonlocal contribution [E_h] to the total SCF energy (DFT only).; Included in :psivar:`DFT FUNCTIONAL TOTAL ENERGY`. .. psivar:: DISPERSION CORRECTION ENERGY; fctl DISPERSION CORRECTION ENERGY. The dispersion correction [E_h] appended to an underlying functional; when a DFT-D method is requested. Quantity :math:`E_{\text{-D}}`; in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; When dispersion parameters are untweaked for a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding to the site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c, Q11s, Q20, Q21c, Q21s, Q22c, Q22s, etc. .. psivar:: DMA TOTAL MULTIPOLES. Distributed multipoles as a single row, whose columns are the total; multipoles, translated to |gdma__gdma_origin|, and summed. .. psivar:: DMRG-SCF TOTAL ENERGY. The total DMRG total electonic energy [E_h]. Not unique because oribital spaces vary. .. psivar:: DMRG-CASPT2 TOTAL ENERGY. The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:33951,Energy Efficiency,energy,energy,33951,"equested. Quantity :math:`E_{\text{-D}}`; in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; When dispersion parameters are untweaked for a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding to the site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c, Q11s, Q20, Q21c, Q21s, Q22c, Q22s, etc. .. psivar:: DMA TOTAL MULTIPOLES. Distributed multipoles as a single row, whose columns are the total; multipoles, translated to |gdma__gdma_origin|, and summed. .. psivar:: DMRG-SCF TOTAL ENERGY. The total DMRG total electonic energy [E_h]. Not unique because oribital spaces vary. .. psivar:: DMRG-CASPT2 TOTAL ENERGY. The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually ato",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:34087,Energy Efficiency,energy,energy,34087,"a functional and dispersion; level, labeled QCVariable also defined. .. psivar:: DOUBLE-HYBRID CORRECTION ENERGY. The scaled MP2 correlation energy correction [E_h] appended to an; underlying functional when a DH-DFT method is requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding to the site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c, Q11s, Q20, Q21c, Q21s, Q22c, Q22s, etc. .. psivar:: DMA TOTAL MULTIPOLES. Distributed multipoles as a single row, whose columns are the total; multipoles, translated to |gdma__gdma_origin|, and summed. .. psivar:: DMRG-SCF TOTAL ENERGY. The total DMRG total electonic energy [E_h]. Not unique because oribital spaces vary. .. psivar:: DMRG-CASPT2 TOTAL ENERGY. The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy compon",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:34339,Energy Efficiency,energy,energy,34339,"requested.; Quantity :math:`E_{\text{DH}}` in Eq. :eq:`DFTterms`. .. psivar:: DMA DISTRIBUTED MULTIPOLES. Distributed multipoles in units given by |gdma__gdma_multipole_units|; with the row index corresponding to the site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c, Q11s, Q20, Q21c, Q21s, Q22c, Q22s, etc. .. psivar:: DMA TOTAL MULTIPOLES. Distributed multipoles as a single row, whose columns are the total; multipoles, translated to |gdma__gdma_origin|, and summed. .. psivar:: DMRG-SCF TOTAL ENERGY. The total DMRG total electonic energy [E_h]. Not unique because oribital spaces vary. .. psivar:: DMRG-CASPT2 TOTAL ENERGY. The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, t",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:34511,Energy Efficiency,energy,energy,34511,"he site and the column index; referencing the multipole component. Both indices are zero based,; and the Qlm components of the multipoles are ordered as Q00, Q10,; Q11c, Q11s, Q20, Q21c, Q21s, Q22c, Q22s, etc. .. psivar:: DMA TOTAL MULTIPOLES. Distributed multipoles as a single row, whose columns are the total; multipoles, translated to |gdma__gdma_origin|, and summed. .. psivar:: DMRG-SCF TOTAL ENERGY. The total DMRG total electonic energy [E_h]. Not unique because oribital spaces vary. .. psivar:: DMRG-CASPT2 TOTAL ENERGY. The total DMRG plus CASPT2 total electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35030,Energy Efficiency,energy,energy,35030,"tal electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35059,Energy Efficiency,energy,energy,35059,"tal electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35187,Energy Efficiency,energy,energy,35187,"Y; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35591,Energy Efficiency,energy,energy,35591," enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35856,Energy Efficiency,energy,energy,35856,"R n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35951,Energy Efficiency,energy,energy,35951,"var:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster s",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:36680,Energy Efficiency,energy,energy,36680,"rms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar::",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:36709,Energy Efficiency,energy,energy,36709,"rms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar::",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:36872,Energy Efficiency,energy,energy,36872,"ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron dens",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:36901,Energy Efficiency,energy,energy,36901,"ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron dens",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:37057,Energy Efficiency,energy,energy,37057,"nly defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:37166,Energy Efficiency,energy,energy,37166,"tal electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the sa",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:37587,Energy Efficiency,charge,charges,37587,"). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster doubles level of theory. .. psivar:: LCCSD TOTAL ENERGY; LCCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the at",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:37797,Energy Efficiency,charge,charges,37797,"on energy component [E_h]; for the linearized coupled cluster singles and doubles level of theory. .. psivar:: LCC2 (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CC2 level of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-roo",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38108,Energy Efficiency,charge,charge,38108,"el of theory. .. psivar:: LCCSD (+LMP2) TOTAL ENERGY. The total electronic energy [E_h] for the local CCSD level of theory. .. psivar:: LEFT-RIGHT CC2 EIGENVECTOR OVERLAP; LEFT-RIGHT CC3 EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD EIGENVECTOR OVERLAP; LEFT-RIGHT CCSD(T) EIGENVECTOR OVERLAP. The overlap between the right-hand coupled coupled cluster eigenvector and the; left-hand eigenvector from the coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38489,Energy Efficiency,charge,charge,38489," coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38810,Energy Efficiency,energy,energy,38810,"], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:39660,Energy Efficiency,energy,energy,39660,"<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; M",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:39689,Energy Efficiency,energy,energy,39689,"<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; M",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40283,Energy Efficiency,energy,energy,40283,"LE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\te",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40312,Energy Efficiency,energy,energy,40312,"LE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\te",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40442,Energy Efficiency,energy,energy,40442,", 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40471,Energy Efficiency,energy,energy,40471,", 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40739,Energy Efficiency,energy,energy,40739," electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY;",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40768,Energy Efficiency,energy,energy,40768," electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY;",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:41076,Energy Efficiency,energy,energy,41076,"l electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:41105,Energy Efficiency,energy,energy,41105,"l electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:41450,Energy Efficiency,energy,energy,41450," for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named correlation energy; including same-spin and opposite-spin correlations. .. psivar:: MP2 SINGLES ENERGY; MP2.5 SINGLES ENERGY; MP3 SINGLES ENERGY; CEPA(0) SINGLES ENERGY; CEPA(1) SINGLES ENERGY; CEPA(2) SINGLES ENERGY; CEPA(3) SINGLES ENERGY; ACPF SINGLES ENERGY; AQCC SINGLES ENERGY; CISD SINGLES ENERGY; QCISD SINGLES ENERGY; REMP2 SINGLES ENERGY; LCCD SINGLES ENERGY; CCD SINGLES ENERGY; LC",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:41479,Energy Efficiency,energy,energy,41479," for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named correlation energy; including same-spin and opposite-spin correlations. .. psivar:: MP2 SINGLES ENERGY; MP2.5 SINGLES ENERGY; MP3 SINGLES ENERGY; CEPA(0) SINGLES ENERGY; CEPA(1) SINGLES ENERGY; CEPA(2) SINGLES ENERGY; CEPA(3) SINGLES ENERGY; ACPF SINGLES ENERGY; AQCC SINGLES ENERGY; CISD SINGLES ENERGY; QCISD SINGLES ENERGY; REMP2 SINGLES ENERGY; LCCD SINGLES ENERGY; CCD SINGLES ENERGY; LC",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:42115,Energy Efficiency,energy,energy,42115,ent [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named correlation energy; including same-spin and opposite-spin correlations. .. psivar:: MP2 SINGLES ENERGY; MP2.5 SINGLES ENERGY; MP3 SINGLES ENERGY; CEPA(0) SINGLES ENERGY; CEPA(1) SINGLES ENERGY; CEPA(2) SINGLES ENERGY; CEPA(3) SINGLES ENERGY; ACPF SINGLES ENERGY; AQCC SINGLES ENERGY; CISD SINGLES ENERGY; QCISD SINGLES ENERGY; REMP2 SINGLES ENERGY; LCCD SINGLES ENERGY; CCD SINGLES ENERGY; LCCSD SINGLES ENERGY; CCSD SINGLES ENERGY; OREMP2 SINGLES ENERGY; OLCCD SINGLES ENERGY. The singles portion [E_h] of the named correlation energy.; Zero except in ROHF. .. psivar:: MP2 SAME-SPIN CORRELATION ENERGY; MP2.5 SAME-SPIN CORRELATION ENERGY; MP3 SAME-SPIN CORRELATION ENERGY; CEPA(0) SAME-SPIN CORRELATION ENERGY; CEPA(1) SAME-SPIN CORRELATION ENERGY; CEPA(2) SAME-SPIN CORRELATION ENERGY; CEPA(3) SAME-SPIN CORRELATION ENERGY; CISD SAME-SPIN CORRELATION ENERGY; QCISD SAME-SPIN CORRELATION ENERGY; ACPF SAME-SPIN CORRELATION ENERGY; AQCC SAME-SPIN CORRELATION ENERGY; REMP2 SAME-SPIN CORRELATION ENERGY; LCCD SAME-SP,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:42632,Energy Efficiency,energy,energy,42632,DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named correlation energy; including same-spin and opposite-spin correlations. .. psivar:: MP2 SINGLES ENERGY; MP2.5 SINGLES ENERGY; MP3 SINGLES ENERGY; CEPA(0) SINGLES ENERGY; CEPA(1) SINGLES ENERGY; CEPA(2) SINGLES ENERGY; CEPA(3) SINGLES ENERGY; ACPF SINGLES ENERGY; AQCC SINGLES ENERGY; CISD SINGLES ENERGY; QCISD SINGLES ENERGY; REMP2 SINGLES ENERGY; LCCD SINGLES ENERGY; CCD SINGLES ENERGY; LCCSD SINGLES ENERGY; CCSD SINGLES ENERGY; OREMP2 SINGLES ENERGY; OLCCD SINGLES ENERGY. The singles portion [E_h] of the named correlation energy.; Zero except in ROHF. .. psivar:: MP2 SAME-SPIN CORRELATION ENERGY; MP2.5 SAME-SPIN CORRELATION ENERGY; MP3 SAME-SPIN CORRELATION ENERGY; CEPA(0) SAME-SPIN CORRELATION ENERGY; CEPA(1) SAME-SPIN CORRELATION ENERGY; CEPA(2) SAME-SPIN CORRELATION ENERGY; CEPA(3) SAME-SPIN CORRELATION ENERGY; CISD SAME-SPIN CORRELATION ENERGY; QCISD SAME-SPIN CORRELATION ENERGY; ACPF SAME-SPIN CORRELATION ENERGY; AQCC SAME-SPIN CORRELATION ENERGY; REMP2 SAME-SPIN CORRELATION ENERGY; LCCD SAME-SPIN CORRELATION ENERGY; CCD SAME-SPIN CORRELATION ENERGY; LCCSD SAME-SPIN CORRELATION ENERGY; CCSD SAME-SPIN CORRELATION ENERGY; OMP2 SAME-SPIN CORRELATION ENERGY; OMP2.5 SAME-SPIN CORRELATION ENERGY; OMP3 SAME-SPIN CORRELATION ENERGY; OREMP2 SAME-SPIN CORRELATION ENERGY; OLCCD SAME-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from same-spin or triplet doubles correlations. .. psivar:: MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2.5 OPPOSITE-SPIN CORRE,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:43479,Energy Efficiency,energy,energy,43479,GLES ENERGY; LCCSD SINGLES ENERGY; CCSD SINGLES ENERGY; OREMP2 SINGLES ENERGY; OLCCD SINGLES ENERGY. The singles portion [E_h] of the named correlation energy.; Zero except in ROHF. .. psivar:: MP2 SAME-SPIN CORRELATION ENERGY; MP2.5 SAME-SPIN CORRELATION ENERGY; MP3 SAME-SPIN CORRELATION ENERGY; CEPA(0) SAME-SPIN CORRELATION ENERGY; CEPA(1) SAME-SPIN CORRELATION ENERGY; CEPA(2) SAME-SPIN CORRELATION ENERGY; CEPA(3) SAME-SPIN CORRELATION ENERGY; CISD SAME-SPIN CORRELATION ENERGY; QCISD SAME-SPIN CORRELATION ENERGY; ACPF SAME-SPIN CORRELATION ENERGY; AQCC SAME-SPIN CORRELATION ENERGY; REMP2 SAME-SPIN CORRELATION ENERGY; LCCD SAME-SPIN CORRELATION ENERGY; CCD SAME-SPIN CORRELATION ENERGY; LCCSD SAME-SPIN CORRELATION ENERGY; CCSD SAME-SPIN CORRELATION ENERGY; OMP2 SAME-SPIN CORRELATION ENERGY; OMP2.5 SAME-SPIN CORRELATION ENERGY; OMP3 SAME-SPIN CORRELATION ENERGY; OREMP2 SAME-SPIN CORRELATION ENERGY; OLCCD SAME-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from same-spin or triplet doubles correlations. .. psivar:: MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2.5 OPPOSITE-SPIN CORRELATION ENERGY; MP3 OPPOSITE-SPIN CORRELATION ENERGY; CEPA(0) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; ACPF OPPOSITE-SPIN CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet double,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:44436,Energy Efficiency,energy,energy,44436," portion [E_h] of the named correlation energy; from same-spin or triplet doubles correlations. .. psivar:: MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2.5 OPPOSITE-SPIN CORRELATION ENERGY; MP3 OPPOSITE-SPIN CORRELATION ENERGY; CEPA(0) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; ACPF OPPOSITE-SPIN CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:44683,Energy Efficiency,charge,charges,44683,"TION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; ACPF OPPOSITE-SPIN CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribu",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:44947,Energy Efficiency,energy,energy,44947,"RELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:44999,Energy Efficiency,energy,energy,44999,"RELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45393,Energy Efficiency,energy,energy,45393,"aled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the f",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45597,Energy Efficiency,energy,energy,45597,"TAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45677,Energy Efficiency,energy,energy,45677," [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45720,Energy Efficiency,energy,energy,45720," [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45964,Energy Efficiency,energy,energy,45964,"y.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the o",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45993,Energy Efficiency,energy,energy,45993,"y.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the o",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46147,Energy Efficiency,energy,energy,46147,"; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbita",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46176,Energy Efficiency,energy,energy,46176,"; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbita",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46377,Energy Efficiency,energy,energy,46377,"n,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46575,Energy Efficiency,energy,energy,46575,"on. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OR",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46604,Energy Efficiency,energy,energy,46604,"on. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OR",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46773,Energy Efficiency,energy,energy,46773,"N} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46943,Energy Efficiency,energy,energy,46943,_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initia,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46972,Energy Efficiency,energy,energy,46972,_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initia,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47145,Energy Efficiency,energy,energy,47145,[E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy cont,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47313,Energy Efficiency,energy,energy,47313,en the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47342,Energy Efficiency,energy,energy,47342,en the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47511,Energy Efficiency,energy,energy,47511, OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The ene,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47681,Energy Efficiency,energy,energy,47681,the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadrat,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47710,Energy Efficiency,energy,energy,47710,the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadrat,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47943,Energy Efficiency,energy,energy,47943,_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration inte,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48144,Energy Efficiency,energy,energy,48144,inal and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singl,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48187,Energy Efficiency,energy,energy,48187,inal and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singl,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48286,Energy Efficiency,energy,energy,48286,_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48401,Energy Efficiency,energy,energy,48401,ION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48526,Energy Efficiency,energy,energy,48526,"rbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostat",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48683,Energy Efficiency,energy,energy,48683,"he orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48712,Energy Efficiency,energy,energy,48712,"he orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48903,Energy Efficiency,energy,energy,48903,"rbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48932,Energy Efficiency,energy,energy,48932,"rbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49294,Energy Efficiency,energy,energy,49294,"olvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psiva",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49323,Energy Efficiency,energy,energy,49323,"olvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psiva",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49639,Energy Efficiency,energy,energy,49639," psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SA",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49840,Energy Efficiency,energy,energy,49840,"GY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49967,Energy Efficiency,energy,energy,49967,"quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; fr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50097,Energy Efficiency,charge,charges,50097,"(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50205,Energy Efficiency,energy,energy,50205,"on [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of sub",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50311,Energy Efficiency,energy,energy,50311,"correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50487,Energy Efficiency,energy,energy,50487,"APT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAP",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50614,Energy Efficiency,energy,energy,50614,"l electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(H",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:50728,Energy Efficiency,energy,energy,50728,"elds; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51074,Energy Efficiency,energy,energy,51074," point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51187,Energy Efficiency,energy,energy,51187,"ergy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51303,Energy Efficiency,energy,energy,51303," implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51418,Energy Efficiency,energy,energy,51418,"H-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELS",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51526,Energy Efficiency,energy,energy,51526,"P20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EX",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51646,Energy Efficiency,energy,energy,51646," SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51773,Energy Efficiency,energy,energy,51773,".. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51900,Energy Efficiency,energy,energy,51900,"sivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term en",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52026,Energy Efficiency,energy,energy,52026,"GY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52145,Energy Efficiency,energy,energy,52145,"ERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAP",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52250,Energy Efficiency,energy,energy,52250,"(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified cou",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52376,Energy Efficiency,energy,energy,52376," SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52488,Energy Efficiency,energy,energy,52488,"APT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IN",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52619,Energy Efficiency,energy,energy,52619,"he Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXC",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52744,Energy Efficiency,energy,energy,52744," The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52914,Energy Efficiency,energy,energy,52914,"f subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53081,Energy Efficiency,energy,energy,53081,"T. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An i",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53296,Energy Efficiency,energy,energy,53296,"ted for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value vari",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53406,Energy Efficiency,energy,energy,53406,"F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP EN",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53562,Energy Efficiency,energy,energy,53562,"PT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53709,Energy Efficiency,energy,energy,53709,"An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENE",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:53891,Energy Efficiency,energy,energy,53891,"-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the tota",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:54015,Energy Efficiency,charge,charge-transfer,54015,"P22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory. The sum of these four components yields; the :samp:`{SAPT",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:54031,Energy Efficiency,energy,energy,54031,"P22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. See :ref:`sec:saptinf`. .. psivar:: SAPT DISP30 ENERGY; SAPT EXCH-DISP30 ENERGY; SAPT EXCH-IND-DISP30 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory. The sum of these four components yields; the :samp:`{SAPT",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:54917,Energy Efficiency,energy,energy,54917,"APT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT ALPHA. SAPT exchange-scaling alpha. .. psivar:: SAPT CT ENERGY. SAPT charge-transfer energy. .. psivar:: SAPT HF TOTAL ENERGY. An induction-classified correction from HF implemented for SAPT0.; Value varies by SAPT level. .. psivar:: SAPT MP2 CORRELATION ENERGY. An induction-classified correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory. The sum of these four components yields; the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT0 TOTAL ENERGY; SSAPT0 TOTAL ENERGY; SAPT2 TOTAL ENERGY; SAPT2+ TOTAL ENERGY; SAPT2+(3) TOTAL ENERGY; SAPT2+3 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory. .. psivar:: SAPT2+(CCD) DISP ENERGY; SAPT2+(CCD) ELST ENERGY; SAPT2+(CCD) EXCH ENERGY; SAPT2+(CCD) IND ENERGY; SAPT2+(3)(CCD) DISP ENERGY; SAPT2+(3)(CCD) ELST ENERGY; SAPT2+(3)(CCD) EXCH ENERGY; SAPT2+(3)(CCD) IND ENERGY; SAPT2+3(CCD) DISP ENERGY; SAPT2+3(CCD) ELST ENERGY; SAPT2+3(CCD) EXCH ENERGY; SAPT2+3(CCD) IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates coupled-cluster dispersion.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:55220,Energy Efficiency,energy,energy,55220,"fied correction from MP2 implemented for SAPT2.; Value varies by SAPT level. .. psivar:: SAPT0 DISP ENERGY; SAPT0 ELST ENERGY; SAPT0 EXCH ENERGY; SAPT0 IND ENERGY; SSAPT0 DISP ENERGY; SSAPT0 ELST ENERGY; SSAPT0 EXCH ENERGY; SSAPT0 IND ENERGY; SAPT2 DISP ENERGY; SAPT2 ELST ENERGY; SAPT2 EXCH ENERGY; SAPT2 IND ENERGY; SAPT2+ DISP ENERGY; SAPT2+ ELST ENERGY; SAPT2+ EXCH ENERGY; SAPT2+ IND ENERGY; SAPT2+(3) DISP ENERGY; SAPT2+(3) ELST ENERGY; SAPT2+(3) EXCH ENERGY; SAPT2+(3) IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory. The sum of these four components yields; the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT0 TOTAL ENERGY; SSAPT0 TOTAL ENERGY; SAPT2 TOTAL ENERGY; SAPT2+ TOTAL ENERGY; SAPT2+(3) TOTAL ENERGY; SAPT2+3 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory. .. psivar:: SAPT2+(CCD) DISP ENERGY; SAPT2+(CCD) ELST ENERGY; SAPT2+(CCD) EXCH ENERGY; SAPT2+(CCD) IND ENERGY; SAPT2+(3)(CCD) DISP ENERGY; SAPT2+(3)(CCD) ELST ENERGY; SAPT2+(3)(CCD) EXCH ENERGY; SAPT2+(3)(CCD) IND ENERGY; SAPT2+3(CCD) DISP ENERGY; SAPT2+3(CCD) ELST ENERGY; SAPT2+3(CCD) EXCH ENERGY; SAPT2+3(CCD) IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates coupled-cluster dispersion.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+(CCD) TOTAL ENERGY; SAPT2+(3)(CCD) TOTAL ENERGY; SAPT2+3(CCD) TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. .. psivar:: SAPT2+DMP2 DISP ENERGY; SAPT2+DMP2 ELST ENERGY; SAPT2+DMP2 EXCH ENERGY; SAPT2+DMP2 IND ENERGY; SAPT2+(3",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:55715,Energy Efficiency,energy,energy,55715,") IND ENERGY; SAPT2+3 DISP ENERGY; SAPT2+3 ELST ENERGY; SAPT2+3 EXCH ENERGY; SAPT2+3 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory. The sum of these four components yields; the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT0 TOTAL ENERGY; SSAPT0 TOTAL ENERGY; SAPT2 TOTAL ENERGY; SAPT2+ TOTAL ENERGY; SAPT2+(3) TOTAL ENERGY; SAPT2+3 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory. .. psivar:: SAPT2+(CCD) DISP ENERGY; SAPT2+(CCD) ELST ENERGY; SAPT2+(CCD) EXCH ENERGY; SAPT2+(CCD) IND ENERGY; SAPT2+(3)(CCD) DISP ENERGY; SAPT2+(3)(CCD) ELST ENERGY; SAPT2+(3)(CCD) EXCH ENERGY; SAPT2+(3)(CCD) IND ENERGY; SAPT2+3(CCD) DISP ENERGY; SAPT2+3(CCD) ELST ENERGY; SAPT2+3(CCD) EXCH ENERGY; SAPT2+3(CCD) IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates coupled-cluster dispersion.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+(CCD) TOTAL ENERGY; SAPT2+(3)(CCD) TOTAL ENERGY; SAPT2+3(CCD) TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. .. psivar:: SAPT2+DMP2 DISP ENERGY; SAPT2+DMP2 ELST ENERGY; SAPT2+DMP2 EXCH ENERGY; SAPT2+DMP2 IND ENERGY; SAPT2+(3)DMP2 DISP ENERGY; SAPT2+(3)DMP2 ELST ENERGY; SAPT2+(3)DMP2 EXCH ENERGY; SAPT2+(3)DMP2 IND ENERGY; SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:56017,Energy Efficiency,energy,energy,56017,". psivar:: SAPT0 TOTAL ENERGY; SSAPT0 TOTAL ENERGY; SAPT2 TOTAL ENERGY; SAPT2+ TOTAL ENERGY; SAPT2+(3) TOTAL ENERGY; SAPT2+3 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory. .. psivar:: SAPT2+(CCD) DISP ENERGY; SAPT2+(CCD) ELST ENERGY; SAPT2+(CCD) EXCH ENERGY; SAPT2+(CCD) IND ENERGY; SAPT2+(3)(CCD) DISP ENERGY; SAPT2+(3)(CCD) ELST ENERGY; SAPT2+(3)(CCD) EXCH ENERGY; SAPT2+(3)(CCD) IND ENERGY; SAPT2+3(CCD) DISP ENERGY; SAPT2+3(CCD) ELST ENERGY; SAPT2+3(CCD) EXCH ENERGY; SAPT2+3(CCD) IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates coupled-cluster dispersion.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+(CCD) TOTAL ENERGY; SAPT2+(3)(CCD) TOTAL ENERGY; SAPT2+3(CCD) TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. .. psivar:: SAPT2+DMP2 DISP ENERGY; SAPT2+DMP2 ELST ENERGY; SAPT2+DMP2 EXCH ENERGY; SAPT2+DMP2 IND ENERGY; SAPT2+(3)DMP2 DISP ENERGY; SAPT2+(3)DMP2 ELST ENERGY; SAPT2+(3)DMP2 EXCH ENERGY; SAPT2+(3)DMP2 IND ENERGY; SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :sam",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:56906,Energy Efficiency,energy,energy,56906," psivar:: SAPT2+(CCD) TOTAL ENERGY; SAPT2+(3)(CCD) TOTAL ENERGY; SAPT2+3(CCD) TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. .. psivar:: SAPT2+DMP2 DISP ENERGY; SAPT2+DMP2 ELST ENERGY; SAPT2+DMP2 EXCH ENERGY; SAPT2+DMP2 IND ENERGY; SAPT2+(3)DMP2 DISP ENERGY; SAPT2+(3)DMP2 ELST ENERGY; SAPT2+(3)DMP2 EXCH ENERGY; SAPT2+(3)DMP2 IND ENERGY; SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57297,Energy Efficiency,energy,energy,57297," SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, thi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57770,Energy Efficiency,energy,energy,57770,"RGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`DFT TOTAL ENERGY`. .. psivar:: SCF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear pe",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59170,Energy Efficiency,energy,energy,59170,"ext{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`DFT TOTAL ENERGY`. .. psivar:: SCF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59199,Energy Efficiency,energy,energy,59199,"ext{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`DFT TOTAL ENERGY`. .. psivar:: SCF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59473,Energy Efficiency,energy,energy,59473,"The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is fr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59502,Energy Efficiency,energy,energy,59502,"The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is fr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59780,Energy Efficiency,energy,energy,59780,"ent array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:59809,Energy Efficiency,energy,energy,59809,"ent array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the SCF stage, (3 * {nat}, 3 * {nat}). .. psivar:: SCF STABILITY EIGENVALUES. Array of eigenvalues from UHF or ROHF stability analysis. .. psivar:: SCS-CCSD TOTAL ENERGY; SCS-CCSD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60119,Energy Efficiency,energy,energy,60119,"d correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the S",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60148,Energy Efficiency,energy,energy,60148,"d correlation energy component [E_h]; for the CCSD-like method formed by reweighting :psivar:`CCSD DOUBLES ENERGY`; by 1.27 opposite-spin and 1.13 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2 TOTAL ENERGY; SCS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the S",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60679,Energy Efficiency,energy,energy,60679,"nic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60708,Energy Efficiency,energy,energy,60708,"nic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60980,Energy Efficiency,energy,energy,60980,"Y; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`O",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61009,Energy Efficiency,energy,energy,61009,"Y; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`O",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61192,Energy Efficiency,energy,energy,61192,"d by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENE",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61317,Energy Efficiency,energy,energy,61317,"CS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61346,Energy Efficiency,energy,energy,61346,"CS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES E",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61533,Energy Efficiency,energy,energy,61533,"ppear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along.",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61656,Energy Efficiency,energy,energy,61656,"gy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method for",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61685,Energy Efficiency,energy,energy,61685,"gy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method for",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61955,Energy Efficiency,energy,energy,61955,"rgy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:61984,Energy Efficiency,energy,energy,61984,"rgy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62256,Energy Efficiency,energy,energy,62256,"ion energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT func",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62285,Energy Efficiency,energy,energy,62285,"ion energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT func",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62473,Energy Efficiency,energy,energy,62473," ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62632,Energy Efficiency,energy,energy,62632,"rgy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n*, which is of irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62661,Energy Efficiency,energy,energy,62661,"rgy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n*, which is of irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68570,Energy Efficiency,energy,energy,68570,"*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state to root *n*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68741,Energy Efficiency,energy,energy,68741,"vectors of the named method; from ground state to root *n*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68820,Energy Efficiency,energy,energy,68820,"h) -> ROOT n (IN i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68863,Energy Efficiency,energy,energy,68863,"h) -> ROOT n (IN i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersi",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68991,Energy Efficiency,energy,energy,68991," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69443,Energy Efficiency,energy,energy,69443," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69472,Energy Efficiency,energy,energy,69472," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69644,Energy Efficiency,energy,energy,69644," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69708,Energy Efficiency,energy,energy,69708," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69881,Energy Efficiency,energy,energy,69881," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:19005,Integrability,depend,dependence,19005,"its [(e^2 a0^3)/E_h] calculated at; the CC level for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (LEN) @ xNM; CCSD SPECIFIC ROTATION (LEN) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (VEL) @ xNM; CCSD SPECIFIC ROTATION (VEL) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (MVG) @ xNM; CCSD SPECIFIC ROTATION (MVG) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM; CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM. The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35503,Integrability,integrat,integrated,35503,"n energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:1058,Modifiability,variab,variable,1058,"3 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Di",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:1120,Modifiability,variab,variables,1120,"3 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Di",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:1141,Modifiability,variab,variable,1141,"3 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Di",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:1426,Modifiability,variab,variable,1426,"Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy componen",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:1468,Modifiability,variab,variable,1468,"Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. * NOTES (LAB 3-26-2012); * Any PSI variable added to the codebase should be added to this list; (variables in the psi variable by module list will show up black; and un-clickable if an entry isn't present here).; * INCLUDE UNITS!; * ALPHABETIZE!. .. include:: autodoc_abbr_options_c.rst. .. _`apdx:psivariables_alpha`:. PSI Variables by Alpha; ======================. .. note:: Lowercase letters in PSI variable names represent portions of; the variable name that vary by root number, calculation order, etc.; See text for fuller description. .. psivar:: [T] CORRECTION ENERGY. The coupled-cluster bracket perturbative triples correction [E_h]. .. psivar:: (T) CORRECTION ENERGY. The coupled-cluster perturbative triples correction [E_h]. .. psivar:: (AT) CORRECTION ENERGY; A-(T) CORRECTION ENERGY. The coupled-cluster asymmetric perturbative triples correction [E_h]. .. psivar:: AAA (T) CORRECTION ENERGY; AAB (T) CORRECTION ENERGY; ABB (T) CORRECTION ENERGY; BBB (T) CORRECTION ENERGY. Spin components of the UHF-based coupled-cluster perturbative triples correction [E_h]. .. psivar:: ACPF DIPOLE. Dipole array [e a0] for the averaged coupled-pair functional level of theory, (3,). .. psivar:: ACPF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged coupled-pair functional level of theory, (3, 3). .. psivar:: ACPF TOTAL ENERGY; ACPF CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy componen",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20117,Modifiability,adapt,adapted,20117,"unded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATI",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:20402,Modifiability,adapt,adapted,20402,"A-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD TRIPLET PAIR ENERGIES; CC2 TRIPLET PAIR ENERGIES; CC3 TRIPLET PAIR ENERGIES; MP2 TRIPLET PAIR ENERGIES. Restricted-reference triplet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CCSD TOTAL ENERGY; CCSD CORRELATION ENERGY; CCSDT TOTAL ENERGY; CCSDT CORRELATION ENERGY; CCSDTQ TOTAL ENERGY; CCSDTQ CORRELATION ENERGY; CCn TOTAL ENERGY; CCn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested full coupled-cluster (CCSD, CCSDT, up to CC\ *n*); level of theory. .. psivar:: CCSD(T) TOTAL ENERGY; CCSD(T) CORRELATION ENERGY; CCSD(AT) TOTAL ENERGY; CCSD(AT) CORRELATION ENERGY; A-CCSD(T) TOTAL ENERGY; A-CCSD(T) CORRELATION ENERGY; CCSDT(Q) TOTAL ENERGY; CCSDT(Q) CORRELATION ENERGY; CC(n-1)(n) TOTAL ENERGY; CC(n-1)(n) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the perturbatively corrected coupled-cluster (CCSD(T), A-CCSD(T) = CCSD(AT), CCSDT(Q),; up to CC(\ *n*\ -1)(\ *n*\ ) level of theory. .. psivar:: CCSDT-1a TOTAL ENERGY; CCSDT-1a CORRELATION ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23748,Modifiability,config,configuration,23748,"AL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23878,Modifiability,config,configuration,23878,"gy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION EN",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24044,Modifiability,config,configuration,24044," electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24228,Modifiability,config,configuration,24228,"iant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psiva",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24347,Modifiability,config,configuration,24347," TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundan",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24497,Modifiability,config,configuration,24497,"energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24719,Modifiability,config,configuration,24719,"pole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25147,Modifiability,config,configuration,25147,"UADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monome",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25252,Modifiability,config,configuration,25252,"(3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. p",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25394,Modifiability,config,configuration,25394,"). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25747,Modifiability,config,configuration,25747,"ation interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten),",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25999,Modifiability,variab,variable,25999,"ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to n",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26258,Modifiability,variab,variable,26258,"Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most re",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26598,Modifiability,variab,variable,26598,"RELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by any reweighting of :psivar:`MP2 DOUBLES ENERGY",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30895,Modifiability,config,configuration,30895,"theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corre",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35096,Modifiability,config,configuration,35096,"tal electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38843,Modifiability,config,configuration,38843,"], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48754,Modifiability,config,configuration,48754,"he orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psiv",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48974,Modifiability,config,configuration,48974,"rbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49129,Modifiability,config,configuration,49129,"[E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57861,Modifiability,variab,variables,57861,"rgy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`DFT TOTAL ENERGY`. .. psivar:: SCF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57971,Modifiability,variab,variables,57971,"rgy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`DFT TOTAL ENERGY`. .. psivar:: SCF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the SCF stage of the calculation, ({nat}, 3). .. psivar:: SCF DIPOLE GRADIENT. The derivative of the SCF stage dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: SCF TOTAL HESSIAN. The total electr",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:69096,Modifiability,variab,variable,69096," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9398,Performance,perform,performs,9398,"ional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).;",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26445,Performance,optimiz,optimizer,26445,"s and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:26918,Performance,optimiz,optimizer,26918,"E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten), (3,). .. psivar:: CURRENT GRADIENT. The total electronic gradient [E_h/a0] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer, ({nat}, 3). .. psivar:: CURRENT DIPOLE GRADIENT. The derivative of the dipole with respect to nuclear perturbations [E_h a0/u] = [(e a0/a0)^2/u]; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: CURRENT HESSIAN. The total electronic Hessian [E_h/a0/a0] of the most recent stage of a; calculation, (3 * {nat}, 3 * {nat}). .. psivar:: CUSTOM SCS-MP2 TOTAL ENERGY; CUSTOM SCS-MP2 CORRELATION ENERGY. Changeable quantities based on options.; The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by any reweighting of :psivar:`MP2 DOUBLES ENERGY`; for opposite-spin and same-spin contributions, with; any singles carried along.; Depending on weights, may equal any of MP2, SCS-MP2, SCS(N)-MP2, etc. quantities.; Contrast with :psivar:`SCS-MP2 TOTAL ENERGY`. .. psivar:: CUSTOM SCS-MP2.5 TOTAL ENERGY; CUSTOM SCS-MP2.5 CORRELATION ENERGY; CUSTOM SCS-MP3 TOTAL ENERGY; CUSTOM SCS-MP3 CORRELATION ENERGY;",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46033,Performance,optimiz,optimized,46033,"y.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the o",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46216,Performance,optimiz,optimized,46216,"; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbita",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46435,Performance,optimiz,optimized,46435,"n,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46644,Performance,optimiz,optimized,46644,"on. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OR",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:46831,Performance,optimiz,optimized,46831,"N} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47012,Performance,optimiz,optimized,47012,_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initia,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47203,Performance,optimiz,optimized,47203,[E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy cont,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47382,Performance,optimiz,optimized,47382,en the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47569,Performance,optimiz,optimized,47569, OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The ene,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47750,Performance,optimiz,optimized,47750,the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadrat,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48001,Performance,optimiz,optimized,48001,_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration inte,MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57535,Performance,optimiz,optimization,57535,"T2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`HF TOTAL ENERGY` (for HF) or; :psivar:`DFT FUNCTIONAL TOTAL ENERGY` (for; DFT). Unless the method is a DFT double-hybrid, this quantity is equal; to :psivar:`",MatchSource.DOCS,doc/sphinxman/source/glossary_psivariables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst:1126,Energy Efficiency,adapt,adapt,1126,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. Psithon documentation master file, created by; sphinx-quickstart on Sun Feb 12 04:25:25 2012.; You can adapt this file completely to your liking, but it should at least; contain the root `toctree` directive. ==========================================; |PSIfour|\ : Open-Source Quantum Chemistry; ==========================================. .. toctree::; :maxdepth: 2; :caption: Contents:; ; introduction; external; index_tutorials; psithoninput; methods; interfacing; psithonfunc; customizing. .. toctree::; :maxdepth: 3. appendices. ===================; Programmers' Manual; ===================. .. toctree::; :maxdepth: 2. prog_intro; prog_newcode; prog_corelibs; prog_integrals; add_tests; prog_debug_profile; documentation; code_style; psipep; manage_index; psi4api; external_apis. * Indices. - :ref:`genindex`; - :ref:`modindex`; - :ref:`search`. .. comment autodoc_available_plugins; ",MatchSource.DOCS,doc/sphinxman/source/index.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst:1126,Modifiability,adapt,adapt,1126,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. Psithon documentation master file, created by; sphinx-quickstart on Sun Feb 12 04:25:25 2012.; You can adapt this file completely to your liking, but it should at least; contain the root `toctree` directive. ==========================================; |PSIfour|\ : Open-Source Quantum Chemistry; ==========================================. .. toctree::; :maxdepth: 2; :caption: Contents:; ; introduction; external; index_tutorials; psithoninput; methods; interfacing; psithonfunc; customizing. .. toctree::; :maxdepth: 3. appendices. ===================; Programmers' Manual; ===================. .. toctree::; :maxdepth: 2. prog_intro; prog_newcode; prog_corelibs; prog_integrals; add_tests; prog_debug_profile; documentation; code_style; psipep; manage_index; psi4api; external_apis. * Indices. - :ref:`genindex`; - :ref:`modindex`; - :ref:`search`. .. comment autodoc_available_plugins; ",MatchSource.DOCS,doc/sphinxman/source/index.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/index.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1354,Energy Efficiency,energy,energy,1354,"free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()`",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1642,Energy Efficiency,energy,energy,1642,"hout even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+--",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1769,Energy Efficiency,energy,energy,1769,"e details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1805,Energy Efficiency,energy,energy,1805,"e details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:2125,Energy Efficiency,energy,energy,2125,"dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expected final argument of; ``cbs_func=energy`` is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (``db_func``; above can be called as just ``func``. Several examples of intercalls; between Python functions can be found in sample input :srcsample:`pywrap-all`. - All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or design",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:2629,Energy Efficiency,energy,energy,2629,"dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expected final argument of; ``cbs_func=energy`` is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (``db_func``; above can be called as just ``func``. Several examples of intercalls; between Python functions can be found in sample input :srcsample:`pywrap-all`. - All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or design",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:2755,Energy Efficiency,energy,energy,2755,"se or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expected final argument of; ``cbs_func=energy`` is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (``db_func``; above can be called as just ``func``. Several examples of intercalls; between Python functions can be found in sample input :srcsample:`pywrap-all`. - All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, *e.g.*, **db_mode** and **opt_mode**. - Function intercalls should not be used in sow/reap mode. ",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:2884,Energy Efficiency,energy,energy,2884,"se or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expected final argument of; ``cbs_func=energy`` is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (``db_func``; above can be called as just ``func``. Several examples of intercalls; between Python functions can be found in sample input :srcsample:`pywrap-all`. - All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, *e.g.*, **db_mode** and **opt_mode**. - Function intercalls should not be used in sow/reap mode. ",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:2916,Energy Efficiency,energy,energy,2916,"se or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expected final argument of; ``cbs_func=energy`` is not necessary since energy() is always the function; called by default. Also, the outermost internal function call (``db_func``; above can be called as just ``func``. Several examples of intercalls; between Python functions can be found in sample input :srcsample:`pywrap-all`. - All keyword arguments are passed along to each function traversed in the; Python driver, so there should be no concern for separating them, grouping; them, or designating them for a particular function when undertaking a; nested calculation. Where the same keyword is used by multiple functions,; prefixes are added, *e.g.*, **db_mode** and **opt_mode**. - Function intercalls should not be used in sow/reap mode. ",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1295,Modifiability,extend,extended,1295,"free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()`",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1553,Performance,optimiz,optimize,1553,"hout even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+--",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1234,Security,access,accessed,1234,"ies are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst:1847,Security,validat,validated,1847,"g; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:intercalls`:. Function Intercalls; ===================. This topic is in transition. As of 1.0, the functionality provided by; ``cp()`` and ``cbs()`` should not be accessed directly. Instead, use the; ``cp`` kwarg and/or the extended method syntax like; ``'mp3/aug-cc-pv[dt]z'`` to ``energy()``, ``opt()``, *etc.*, respectively. For many of the |PSIfour| Python functions described above, it makes scientific; sense that they could be called in combination. For instance, one could; optimize all the reagents in a database or compute a; counterpoise-corrected interaction energy with an extrapolated method. The; table below outlines permitted intercalls between functions, showing that; db(opt(cbs(energy()))) is allowed, while db(cp(energy())) is not. This; table is not yet validated for calls with cp(). .. _`table:intercalls`:. .. table:: Permitted nesting of Psithon functions. +-------------------------+-----+-----+-----+-----+--------+; | Caller | Callee |; +-------------------------+-----+-----+-----+-----+--------+; | | cp | db | opt | cbs | energy |; +=========================+=====+=====+=====+=====+========+; | :ref:`sec:cp()` | | --- | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:db()` | --- | | Y | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:opt()` | --- | --- | | Y | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:cbs()` | --- | --- | --- | | Y |; +-------------------------+-----+-----+-----+-----+--------+; | :ref:`sec:energy()` | --- | --- | --- | --- | |; +-------------------------+-----+-----+-----+-----+--------+. - The command db(opt(cbs(energy()))) is actually expressed as ``db(...,; db_func=opt, opt_func=cbs)``. The perhaps expec",MatchSource.DOCS,doc/sphinxman/source/intercalls.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/intercalls.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2138,Availability,avail,available,2138,"======; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details int",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2253,Availability,avail,available,2253,"hods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIf",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:3899,Availability,avail,available,3899,"with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The :ref:`Appendices <sec:appendices>` include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under :source:`samples`.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkow",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:3961,Availability,avail,available,3961,"with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The :ref:`Appendices <sec:appendices>` include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under :source:`samples`.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkow",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:15498,Availability,avail,available,15498,"34927 <https://doi.org/10.1063/1.2834927>`_). Mk-MRPT2. * ""A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decompositi",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:24851,Availability,avail,available,24851,"ons,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). * ""Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,""; U. Bozkaya, *Phys. Chem. Chem. Phys.* **18**, 11362 (2016).; (doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connect.org/q/publications. Density Matrix Renormalization Group (DMRG); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; * ""CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,""; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; *Comput. Phys. Commun.* **185** (6), 1501-1514 (2014).; (doi: `10.1016/j.cpc.2014.01.019 <https://doi.org/10.1016/j.cpc.2014.01.019>`_). * ""The density matrix renormalization group for ab initio quantum chemistry,""; S. Wouters and D. Van Neck, *Eur. Phys. J. D* **68** (9), 272 (2014).; (doi: `10.1140/epjd/e2014-50500-1 <https://doi.org/10.1140/epjd/e2014-505",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:26954,Availability,avail,available,26954,"xact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,""; P. Verma, W. D. Derricotte and F. A. Evangelista,; *J. Chem. Theory Comput.* (2015).; (doi: `10.1021/acs.jctc.5b00817 <https://doi.org/10.1021/acs.jctc.5b00817>`_). .. index:: architectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel and Apple Silicon), or Windows (both native and via Windows Subsystem for; Linux aka `Bash on Ubuntu on Windows; <https://docs.microsoft.com/en-us/windows/wsl/about>`_); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4.; Compilers; |PSIfour| has been successfully compiled using Intel, GCC, and Clang; compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:27581,Availability,avail,available,27581,"jctc.5b00817 <https://doi.org/10.1021/acs.jctc.5b00817>`_). .. index:: architectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel and Apple Silicon), or Windows (both native and via Windows Subsystem for; Linux aka `Bash on Ubuntu on Windows; <https://docs.microsoft.com/en-us/windows/wsl/about>`_); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4.; Compilers; |PSIfour| has been successfully compiled using Intel, GCC, and Clang; compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:29241,Availability,avail,available,29241,"11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient t",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:30363,Availability,avail,available,30363," Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table:methods`:. .. table:: Summary of theoretical methods available in |PSIfour|. +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | Method [#f10]_ | Reference\ [#f8]_ | Type\ [#f8]_ | Variants\ [#f9]_ |; + + + +------------+------------+------------+------------+; | | | | Canonical | OO | FNO [#f1]_ | DLPNO |; +=========================+===================+===================+============+============+============+============+; | HF | RHF/UHF/ROHF/CUHF | CONV/DF/CD | E/G/H | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DFT | RKS/UKS | CONV/DF/CD | E/G | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DFT-D2, DFT-NL | RKS/UKS | CONV/DF/CD | E/G | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DCT | RHF/UHF | CONV/DF |",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40479,Availability,avail,available,40479,"-----------+------------+; | ADC(3), CVS-ADC(3) | RHF/UHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | ❖ with :ref:`CheMPS2 <sec:chemps2>` |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CI | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40720,Availability,avail,available,40720,"-----+------------+; | ❖ with :ref:`CheMPS2 <sec:chemps2>` |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CI | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with ex",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40772,Availability,avail,available,40772,"--------------+------------+------------+------------+------------+; | DMRG-CI | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psi",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40802,Availability,avail,available,40802,"----------+------------+; | DMRG-CI | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `a",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40862,Availability,avail,available,40862,"V | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `ask the forum <http://forum.psicode.org>`_. * I ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40892,Availability,avail,available,40892,"-----------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `ask the forum <http://forum.psicode.org>`_. * I got this error and I'm sure it's a bug -- `fi",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:41283,Availability,reliab,reliability,41283,"----------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `ask the forum <http://forum.psicode.org>`_. * I got this error and I'm sure it's a bug -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * Can I open a discussion on this bit of code? -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request and a plan -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request -- `ask the forum <http://forum.psicode.org>`_. * Why do you? -- `ask the f",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:41784,Availability,error,error,41784,"HF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `ask the forum <http://forum.psicode.org>`_. * I got this error and I'm sure it's a bug -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * Can I open a discussion on this bit of code? -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request and a plan -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request -- `ask the forum <http://forum.psicode.org>`_. * Why do you? -- `ask the forum <http://forum.psicode.org>`_. * When will you? -- `ask the forum <http://forum.psicode.org>`_. * I have an experience that can improve the build documentation -- `inform the forum <http://forum.psicode.org>`_ or :source:`add to the documentation itself <doc/sphinxman/source>`. * Anything you want to share privately -- `crawdad@vt.edu <mailto:crawdad@vt.edu>`_ or `sherrill@gatech.edu <mailto:sherrill@gatech.edu>`_. .. [#f6] Adapted from `here <https://groups.google.com/forum/#!topic/google-collections-users/m8FnC",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:41857,Availability,error,error,41857,"r, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with example inputs, would be; appreciated. Where-to-post summary:[#f6]_. * How do I? -- `ask the forum <http://forum.psicode.org>`_. * I got this error, why? -- `ask the forum <http://forum.psicode.org>`_. * I got this error and I'm sure it's a bug -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * Can I open a discussion on this bit of code? -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request and a plan -- `file a GitHub issue <https://github.com/psi4/psi4/issues/new>`_. * I have an idea/request -- `ask the forum <http://forum.psicode.org>`_. * Why do you? -- `ask the forum <http://forum.psicode.org>`_. * When will you? -- `ask the forum <http://forum.psicode.org>`_. * I have an experience that can improve the build documentation -- `inform the forum <http://forum.psicode.org>`_ or :source:`add to the documentation itself <doc/sphinxman/source>`. * Anything you want to share privately -- `crawdad@vt.edu <mailto:crawdad@vt.edu>`_ or `sherrill@gatech.edu <mailto:sherrill@gatech.edu>`_. .. [#f6] Adapted from `here <https://groups.google.com/forum/#!topic/google-collections-users/m8FnCcmtC88>`_. .. toctree::; :hidden:. mrcc_table_energy; cfour_table_energy; cfour_table_",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:5137,Deployability,release,releases,5137,"ere.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U.; Bozkaya, R. A. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, C.; D. Sherrill, *J. Chem. Phys.* (2020).; (doi: `10.1063/5.0006002; <https://doi.org/10.1063/5.0006002>`_). The following citation covers |PSIfour| early stable releases:. * ""Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability"", R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, *J. Chem. Theory Comput.*, **13(7)** 3185--3197 (2017).; (doi: `10.1021/acs.jctc.7b00174; <https://doi.org/10.1021/acs.jctc.7b00174>`_). The following citation covers |PSIfour| alpha and beta versions:. * ""Psi4: An open-source *ab initio* electronic structure program,""; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leinin",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10329,Deployability,configurat,configuration,10329,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10378,Deployability,configurat,configuration,10378,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:27633,Deployability,install,installFile,27633,"hitectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel and Apple Silicon), or Windows (both native and via Windows Subsystem for; Linux aka `Bash on Ubuntu on Windows; <https://docs.microsoft.com/en-us/windows/wsl/about>`_); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4.; Compilers; |PSIfour| has been successfully compiled using Intel, GCC, and Clang; compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; ve",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1340,Energy Efficiency,efficient,efficiently,1340,"ware; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for e",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1766,Energy Efficiency,power,powerful,1766,"Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme d",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2091,Energy Efficiency,efficient,efficient,2091,"======; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details int",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2222,Energy Efficiency,efficient,efficient,2222,"hods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIf",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2303,Energy Efficiency,power,powerful,2303,"ficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discuss",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2325,Energy Efficiency,energy,energy,2325,"ficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discuss",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2394,Energy Efficiency,adapt,adapted,2394,"ficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discuss",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8354,Energy Efficiency,efficient,efficient,8354,"uess is the superposition of atomic; densities (SAD), discussed in. * ""Principles for a direct SCF approach to LCAO-MO ab-initio; calculations"", J. Alml\ |o_dots|\ f, K. Faegri, and K. Korsell,; *J. Comput. Chem.* **3**, 385 (1982).; (doi: `10.1002/jcc.540030314 <https://doi.org/10.1002/jcc.540030314>`_). * ""Starting SCF calculations by superposition of atomic; densities"", J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, *J. Comput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:12526,Energy Efficiency,energy,energy,12526," in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. * ""Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 2687-2696 (2013).; (doi: `10.1021/ct400250u <https://doi.org/10.1021/ct400250u>`_). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. * ""A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,""; U. Bozkaya, *J. Chem. Phys.* **144**, 144108 (2016).; (doi: `10.1063/1.4945706 <https://doi.org/10.1063/1.4945706>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. * ""Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **144**, 174103 (2016).; (doi: `10.1063/1.4948318 <https://doi.org/10.1063/1.4948318>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. * ""Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **147**, 044104 (2017).; (doi: `10.1063/1.4994918 <https://doi.org/10.1063/1.4994918>`_). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; |PSIfour| features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and |PSIfour|; implementation of these methods is dis",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:12918,Energy Efficiency,energy,energy,12918,"0250u>`_). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. * ""A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,""; U. Bozkaya, *J. Chem. Phys.* **144**, 144108 (2016).; (doi: `10.1063/1.4945706 <https://doi.org/10.1063/1.4945706>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. * ""Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **144**, 174103 (2016).; (doi: `10.1063/1.4948318 <https://doi.org/10.1063/1.4948318>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. * ""Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **147**, 044104 (2017).; (doi: `10.1063/1.4994918 <https://doi.org/10.1063/1.4994918>`_). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; |PSIfour| features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and |PSIfour|; implementation of these methods is discussed in the following papers. General Mk-MRCC. * ""Coupling Term Derivation and General Implementation of; State-Specific Multireference Coupled-Cluster Theories,""; F. A. Evangelista, W. D. Allen, and H. F. Schaefer,; *J. Chem. Phys.* **127**, 024102 (2007).; (doi: `10.1063/1.2743014 <https://doi.org/10.1063/1.2743014>`_). Mk-MRCCSD(T). * ""Perturbative Triples Corrections in State-Specific Multirefere",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:14967,Energy Efficiency,efficient,efficient,14967,"luster Theory,""; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; *J. Chem. Phys.* **132**, 074107 (2010).; (doi: `10.1063/1.3305335 <https://doi.org/10.1063/1.3305335>`_). Mk-MRCCSDT(-n). * ""Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,"" F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, *J. Chem. Phys.* **128**, 124104; (2008).; (doi: `10.1063/1.2834927 <https://doi.org/10.1063/1.2834927>`_). Mk-MRPT2. * ""A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed;",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:16083,Energy Efficiency,adapt,adapted,16083,"ular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of :math:`\pi - \pi` Interactions in Linear Acenes,""; E. G. Hohenstein and C. D. Sherrill, *J. Chem. Phys.* **132**,; 184111 (2010).; (doi: `10.1063/1.3426316 <https://doi.org/10.1063/1.3426316>`_). SAPT2. * ""Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,""; E. G. Hohenstein and C. D. Sherrill, *J. Chem. Phys.* **133**,; 014101 (2010).; (doi: `10.1063/1.3451077 <https://doi.org/10.1063/1.3451077>`_). SAPT2+, SAPT2+(3), SAPT2+3. * ""Wavefunction Methods for Noncovalent Interactions,"" E. G.; Hohenstein and ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:19613,Energy Efficiency,adapt,adapted,19613,"l Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,""; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; *J. Chem. Theory Comput.* **10**, 4417 (2014).; (doi: `10.1021/ct500724p <https://doi.org/10.1021/ct500724p>`_). * ""Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,""; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; *J. Chem. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_).",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20397,Energy Efficiency,energy,energy,20397,"d G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. So",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:21585,Energy Efficiency,energy,energy,21585,"`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkay",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:24218,Energy Efficiency,efficient,efficient,24218,"on Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). * ""Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,""; U. Bozkaya, *Phys. Chem. Chem. Phys.* **18**, 11362 (2016).; (doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connec",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:25319,Energy Efficiency,adapt,adapted,25319,"doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connect.org/q/publications. Density Matrix Renormalization Group (DMRG); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; * ""CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,""; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; *Comput. Phys. Commun.* **185** (6), 1501-1514 (2014).; (doi: `10.1016/j.cpc.2014.01.019 <https://doi.org/10.1016/j.cpc.2014.01.019>`_). * ""The density matrix renormalization group for ab initio quantum chemistry,""; S. Wouters and D. Van Neck, *Eur. Phys. J. D* **68** (9), 272 (2014).; (doi: `10.1140/epjd/e2014-50500-1 <https://doi.org/10.1140/epjd/e2014-50500-1>`_). Scalar Relativistic Corrections; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General theory for the exact two-component approach (X2C). * ""Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:25984,Energy Efficiency,energy,energy,25984," Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connect.org/q/publications. Density Matrix Renormalization Group (DMRG); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; * ""CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,""; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; *Comput. Phys. Commun.* **185** (6), 1501-1514 (2014).; (doi: `10.1016/j.cpc.2014.01.019 <https://doi.org/10.1016/j.cpc.2014.01.019>`_). * ""The density matrix renormalization group for ab initio quantum chemistry,""; S. Wouters and D. Van Neck, *Eur. Phys. J. D* **68** (9), 272 (2014).; (doi: `10.1140/epjd/e2014-50500-1 <https://doi.org/10.1140/epjd/e2014-50500-1>`_). Scalar Relativistic Corrections; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General theory for the exact two-component approach (X2C). * ""Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,""; P. Verma, W. D. Derricotte and F. A. Evangelista,; *J. Chem. Theory Comput.* (2015).; (doi: `10.1021/acs.jctc.5b00817 <https://doi.org/10.1021/acs.jctc.5b00817>`_). .. index:: architectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:29340,Energy Efficiency,energy,energy,29340,"ompatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:30089,Energy Efficiency,energy,energy,30089,"s of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table:methods`:. .. table:: Summary of theoretical methods available in |PSIfour|. +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | Method [#f10]_ | Reference\ [#f8]_ | Type\ [#f8]_ | Variants\ [#f9]_ |; + + + +------------+------------+------------+------------+; | | | | Canonical | OO | FNO [#f1]_ | DLPNO |; +=========================+===================+===================+============+============+============+============+; | HF | RHF/UHF/ROHF/CUHF | CONV/DF/CD | E/G/H | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DFT | RKS/UKS | CONV/DF/CD | E/G | | | |; +-------------------------+--",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:40604,Energy Efficiency,energy,energy,40604,"-----+------------+; | ❖ with :ref:`CheMPS2 <sec:chemps2>` |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CI | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-SCF | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+; | DMRG-CASPT2 | RHF | CONV | E | | | |; +-------------------------+-------------------+-------------------+------------+------------+------------+------------+. .. [#f10] Many methods have a more detailed breakdown of capabilities :ref:`here <table:managedmethods>`.; .. [#f8] Not all combinations of reference and algorithm type may be available for any variant and derivative. See detailed capabilities tables.; .. [#f9] Shown are analytic implementations for energy (E), gradient, (G), and Hessian (H); finite difference derivatives are invoked automatically if analytic not available.; .. [#f1] Frozen natural orbital variant available. In particular, RHF available as CONV.; .. [#f2] Frozen natural orbital variant available. In particular, RHF available as CONV/DF. .. not enumerated; .. * scs/sos; .. * full controls: ccenergy, detci; .. * deprecated: adc, mrcc, dfocc; .. * composite: g2; .. * narrow alternate scf: mcscf, qchf. .. include:: autodoc_capabilities_summary.rst. .. index::; single: contact; single: bugs. Technical Support; =================. The |PSIfour| package is distributed for free and without any guarantee of; reliability, accuracy, or suitability for any particular purpose. No; obligation to provide technical support is expressed or implied. As time; allows, the developers will attempt to answer inquiries on the `forum; <http://forum.psicode.org>`_ or `GitHub; <https://github.com/psi4/psi4/issues/new>`_. For bug reports,; specific and detailed information, with ex",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1502,Integrability,rout,routine,1502,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28704,Integrability,depend,dependencies,28704,"r 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Bre",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28853,Integrability,depend,dependencies,28853,"ects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28967,Integrability,contract,contracted,28967,"|PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2394,Modifiability,adapt,adapted,2394,"ficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discuss",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:7938,Modifiability,extend,extended,7938,"mann, M. J. T. Oliveira,; and M. A. L. Marques, *SoftwareX* **7**, 1 (2018). (doi:; `10.1016/j.softx.2017.11.002; <https://doi.org/10.1016/j.softx.2017.11.002>`_). Regardless of the type of the calculation, an initial guess is; necessary. |PSIfour| features several initial guesses for the; molecular orbitals. The default guess is the superposition of atomic; densities (SAD), discussed in. * ""Principles for a direct SCF approach to LCAO-MO ab-initio; calculations"", J. Alml\ |o_dots|\ f, K. Faegri, and K. Korsell,; *J. Comput. Chem.* **3**, 385 (1982).; (doi: `10.1002/jcc.540030314 <https://doi.org/10.1002/jcc.540030314>`_). * ""Starting SCF calculations by superposition of atomic; densities"", J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, *J. Comput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10329,Modifiability,config,configuration,10329,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10378,Modifiability,config,configuration,10378,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:16083,Modifiability,adapt,adapted,16083,"ular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Application; to Probe the Nature of :math:`\pi - \pi` Interactions in Linear Acenes,""; E. G. Hohenstein and C. D. Sherrill, *J. Chem. Phys.* **132**,; 184111 (2010).; (doi: `10.1063/1.3426316 <https://doi.org/10.1063/1.3426316>`_). SAPT2. * ""Density Fitting of Intramonomer Correlation Effects in; Symmetry-Adapted Perturbation Theory,""; E. G. Hohenstein and C. D. Sherrill, *J. Chem. Phys.* **133**,; 014101 (2010).; (doi: `10.1063/1.3451077 <https://doi.org/10.1063/1.3451077>`_). SAPT2+, SAPT2+(3), SAPT2+3. * ""Wavefunction Methods for Noncovalent Interactions,"" E. G.; Hohenstein and ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:19613,Modifiability,adapt,adapted,19613,"l Assignment of Symmetry-Adapted Perturbation Theory Interaction; Energy Components: The Functional-Group SAPT Partition,""; R. M. Parrish, T. M. Parker, and C. D. Sherrill,; *J. Chem. Theory Comput.* **10**, 4417 (2014).; (doi: `10.1021/ct500724p <https://doi.org/10.1021/ct500724p>`_). * ""Communication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,""; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; *J. Chem. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_).",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:22511,Modifiability,extend,extended,22511,"01078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **1",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:25319,Modifiability,adapt,adapted,25319,"doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connect.org/q/publications. Density Matrix Renormalization Group (DMRG); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; * ""CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,""; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; *Comput. Phys. Commun.* **185** (6), 1501-1514 (2014).; (doi: `10.1016/j.cpc.2014.01.019 <https://doi.org/10.1016/j.cpc.2014.01.019>`_). * ""The density matrix renormalization group for ab initio quantum chemistry,""; S. Wouters and D. Van Neck, *Eur. Phys. J. D* **68** (9), 272 (2014).; (doi: `10.1140/epjd/e2014-50500-1 <https://doi.org/10.1140/epjd/e2014-50500-1>`_). Scalar Relativistic Corrections; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General theory for the exact two-component approach (X2C). * ""Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2431,Performance,optimiz,optimized,2431,"ple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire d",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:3709,Performance,optimiz,optimization,3709,"ffective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The :ref:`Appendices <sec:appendices>` include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under :source:`samples`.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:9713,Performance,optimiz,optimized,9713,"ory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10305,Performance,optimiz,optimized,10305,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:11171,Performance,perform,performance,11171,"; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 293-299 (2013).; (doi: `10.1021/ct300780u <https://doi.org/10.1021/ct300780u>`_). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. * ""Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 2687-2696 (2013).; (doi: `10.1021/ct400250u <https://doi.org/10.1021/ct400250u>`_). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. * ""A noniterative asy",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:11593,Performance,perform,performance,11593," L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 293-299 (2013).; (doi: `10.1021/ct300780u <https://doi.org/10.1021/ct300780u>`_). Implementation of density-fitted (DF) and Cholesky decomposition (CD); coupled cluster in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. * ""Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 2687-2696 (2013).; (doi: `10.1021/ct400250u <https://doi.org/10.1021/ct400250u>`_). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. * ""A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,""; U. Bozkaya, *J. Chem. Phys.* **144**, 144108 (2016).; (doi: `10.1063/1.4945706 <https://doi.org/10.1063/1.4945706>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. * ""Analytic energy gradients for the coupled-cluster singles and dou",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:14985,Performance,perform,perform,14985,"luster Theory,""; F. A. Evangelista, E. Prochnow, J. Gauss, and H. F. Schaefer,; *J. Chem. Phys.* **132**, 074107 (2010).; (doi: `10.1063/1.3305335 <https://doi.org/10.1063/1.3305335>`_). Mk-MRCCSDT(-n). * ""Triple Excitations in State-Specific Multireference Coupled; Cluster Theory: Application of Mk-MRCCSDT and Mk-MRCCSDT-n Methods to; Model Systems,"" F. A. Evangelista, A. C. Simmonett, W. D. Allen,; H. F. Schaefer, and J. Gauss, *J. Chem. Phys.* **128**, 124104; (2008).; (doi: `10.1063/1.2834927 <https://doi.org/10.1063/1.2834927>`_). Mk-MRPT2. * ""A Companion Perturbation Theory for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed;",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:19952,Performance,optimiz,optimized,19952,"mmunication: Practical Intramolecular Symmetry Adapted Perturbation Theory; via Hartree-Fock Embedding,""; R. M. Parrish, J. F. Gonthier, C. Corminboeuf, and C. D. Sherrill,; *J. Chem. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20053,Performance,optimiz,optimization,20053,"em. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20082,Performance,optimiz,optimized,20082,"em. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20138,Performance,optimiz,optimized,20138,"em. Phys.* **143**, 051103 (2015).; (doi: `10.1063/1.4927575 <https://doi.org/10.1063/1.4927575>`_). The derivation of the second-order exchange terms without the single-exchange; approximation are found in the following two works:. * ""Intermolecular exchange-induction energies without the overlap expansion,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20430,Performance,optimiz,optimized,20430,"d G. Jansen, *Theor. Chem. Acc.* **131**, 1235 (2012).; (doi: `10.1007/s00214-012-1235-6 <https://doi.org/10.1007/s00214-012-1235-6>`_). * ""Single-determinant-based symmetry-adapted perturbation theory without; single-exchange approximation,""; R. Sch\ |a_dots|\ ffer and G. Jansen, *Mol. Phys.* **111**, 2570 (2013).; (doi: `10.1080/00268976.2013.827253 <https://doi.org/10.1080/00268976.2013.827253>`_). Orbital-Optimized Post-Hartree |--| Fock Methods; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. So",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:20914,Performance,optimiz,optimized,20914,"^^^^^^^^; Orbital-optimized second-order perturbation theory (OMP2). * ""Quadratically convergent algorithm for orbital optimization in the; orbital-optimized coupled-cluster doubles method and in orbital-optimized; second-order |MollerPlesset| perturbation theory,""; U. Bozkaya, J. M. Turney, Y. Yamaguchi, H. F. Schaefer, and C. D. Sherrill,; *J. Chem. Phys.* **135**, 104103 (2011).; (doi: `10.1063/1.3631129 <https://doi.org/10.1063/1.3631129>`_). * ""Analytic energy gradients for the orbital-optimized second-order; |MollerPlesset| perturbation theory,"" U. Bozkaya and; C. D. Sherrill, *J. Chem. Phys.* **138**, 184103 (2013).; (doi: `10.1063/1.4803662 <https://doi.org/10.1063/1.4803662>`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:21618,Performance,optimiz,optimized,21618,"`_). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkay",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:21807,Performance,optimiz,optimized,21807,"(2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). Orbital-optimized third-order perturbation theory (OMP3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:21879,Performance,optimiz,optimized,21879,"P3). * ""Orbital-Optimized Third-Order |MollerPlesset| Perturbation; Theory and Its Spin-Component and Spin-Opposite Scaled Variants: Application; to Symmetry Breaking Problems,"" U. Bozkaya,; *J. Chem. Phys.* **135**, 224103 (2011).; (doi: `10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:22196,Performance,optimiz,optimized,22196,"`10.1063/1.3665134 <https://doi.org/10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficie",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:22233,Performance,optimiz,optimized,22233,"10.1063/1.3665134>`_). * ""Assessment of Orbital-Optimized Third-Order |MollerPlesset|; Perturbation Theory and Its Spin-Component and Spin-Opposite Scaled Variants; for Thermochemistry and Kinetics,"" E. Soydas and U. Bozkaya,; *J. Chem. Theory Comput.* **9**, 1452 (2013).; (doi: `10.1021/ct301078q <https://doi.org/10.1021/ct301078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:22550,Performance,optimiz,optimized,22550,"01078q>`_). * ""Analytic energy gradients for the orbital-optimized third-order |MollerPlesset|; Perturbation Theory,"" U. Bozkaya,; *J. Chem. Phys.* **139**, 104116 (2013).; (doi: `10.1063/1.4820877 <https://doi.org/10.1063/1.4820877>`_). Orbital-optimized linearized coupled-cluster doubles method (OLCCD). * ""Orbital-optimized coupled-electron pair theory and its analytic gradients:; Accurate equilibrium geometries, harmonic vibrational frequencies, and hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **1",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:23016,Performance,optimiz,optimized,23016,"hydrogen transfer; reactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **139**, 054104 (2013).; (doi: `10.1063/1.4816628 <https://doi.org/10.1063/1.4816628>`_). Orbital-optimized MP2.5 (OMP2.5). * ""Orbital-optimized MP2.5 and its analytic gradients: Approaching CCSD(T); quality for noncovalent interactions,"" U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **141**, 204105 (2014).; (doi: `10.1063/1.4902226 <https://doi.org/10.1063/1.4902226>`_). Extended Koopmans' Theorem. * ""The extended Koopmans' theorem for orbital-optimized methods: Accurate; computation of ionization potentials,"" U. Bozkaya, *J. Chem. Phys.*; **139**, 154105 (2013).; (doi: `10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decompos",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:23693,Performance,optimiz,optimized,23693,"10.1063/1.4825041 <https://doi.org/10.1063/1.4825041>`_). * ""Accurate Electron Affinities from the Extended Koopmans' Theorem Based on Orbital-Optimized Methods,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2041 (2014).; (doi: `10.1021/ct500186j <https://doi.org/10.1021/ct500186j>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized second-order perturbation theory (DF-OMP2). * ""Orbital-Optimized Second-Order Perturbation Theory with Density-Fitting; and Cholesky Decomposition Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). * ""Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,""; U. Bozkaya, *Phys. Chem. Chem. Phys.* **18**, 11362 (2016).; (doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (20",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:24105,Performance,optimiz,optimized,24105,"on Approximations: An Efficient Implementation,""; U. Bozkaya, *J. Chem. Theory Comput.* **10**, 2371 (2014).; (doi: `10.1021/ct500231c <https://doi.org/10.1021/ct500231c>`_). * ""Analytic Energy Gradients and Spin Multiplicities for Orbital-Optimized; Second-Order Perturbation Theory with Density-Fitting Approximation: An; Efficient Implementation,"" U. Bozkaya, *J. Chem. Theory Comput.* **10**, 4389 (2014).; (doi: `10.1021/ct500634s <https://doi.org/10.1021/ct500634s>`_). Density-Fitted and Cholesky-Decomposed Orbital-optimized MP3 and MP2.5 (DF-OMP3 and DF-OMP2.5). * ""Orbital-Optimized MP3 and MP2.5 with Density-Fitting; and Cholesky Decomposition Approximations,""; U. Bozkaya, *J. Chem. Theory Comput.* **12**, 1179 (2016).; (doi: `10.1021/acs.jctc.5b01128 <https://doi.org/10.1021/acs.jctc.5b01128>`_). Density-Fitted and Cholesky-Decomposed Orbital-Optimized Linearized Coupled-Cluster Doubles Method (DF-OLCCD). * ""Orbital-optimized linearized coupled-cluster doubles with density-fitting; and Cholesky decomposition approximations: an efficient implementation,""; U. Bozkaya, *Phys. Chem. Chem. Phys.* **18**, 11362 (2016).; (doi: `10.1039/c6cp00164e <https://doi.org/10.1039/c6cp00164e>`_). Algebraic-Diagrammatic Construction methods (ADC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General ADC theory. * ""Intermediate state representation approach to physical properties of; electronically excited molecules,""; J. Schirmer, and A. B. Trofimov, *J. Chem. Phys.* **120**,; 11449-11464 (2004).; (doi: `10.1063/1.1752875 <https://doi.org/10.1063/1.1752875>`_). Implementation inside `adcc <https://adc-connect.org>`_,; the ADC backend used for most ADC methods available in |PSIfour|. * ""adcc: A versatile toolkit for rapid development of; algebraic-diagrammatic construction methods,""; M. F. Herbst, M. Scheurer, T. Fransson, D. R. Rehn, and A. Dreuw.; *WIREs Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connec",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28909,Performance,perform,perform,28909,"|PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:29274,Performance,optimiz,optimization,29274,"ompatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:29294,Performance,perform,performed,29294,"ompatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies can be; computed by analytic second derivatives, by finite; differences of analytic gradients, or by finite differences of energies.; |PSIfour| can also compute an extensive list of one-electron properties. For more tables with capabilities details:. * :ref:`Full Capabilities <table:methods>` (first below) lists all methods; * :ref:`Capabilities Breakdown <table:stdsuite>` (second below) lists selected methods by reference, etc.; * :ref:`Module Capabilities <table:managedmethods>` lists selected methods by implementation; * :ref:`Energy <table:energy_gen>`, :ref:`Energy (DFT) <table:energy_dft>`, :ref:`Energy (MRCC) <table:energy_mrcc>`, :ref:`Energy (CFOUR) <table:energy_cfour>` fully list energy target methods; * :ref:`Gradient <table:grad_gen>`, :ref:`Gradient (CFOUR) <table:grad_cfour>` fully list gradient target methods; * :ref:`Frequency <table:freq_gen>` fully lists Hessian target methods. .. _`table",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2600,Security,access,access,2600,"odules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and g",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:2023,Testability,test,test,2023,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8759,Testability,benchmark,benchmark,8759,"omput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10.1063/1.4739423 <https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H.",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:28414,Testability,test,test,28414," compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; version 3, `LGPL-3.0 <https://opensource.org/licenses/LGPL-3.0>`_. Its; required dependencies and add-ons have their own licenses, ranging from; BSD-2-Clause to GPL-2.0+. It is possible to build |PSIfour| without any; General GPL dependencies. Capabilities; ============. |PSIfour| can perform *ab initio* computations employing basis; sets of contracted Gaussian-type functions of virtually arbitrary; orbital quantum number. Many parts of |PSIfour| can recognize and; exploit the largest Abelian subgroup of the molecular point group.; Table :ref:`Methods <table:methods>` displays the range of theoretical methods; available in |PSIfour|. Geometry optimization can be performed using either analytic gradients; or energy points. Likewise, vibrational frequencies c",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1485,Usability,simpl,simple,1485,"on 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster ",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:1871,Usability,user-friendly,user-friendly,1871,". # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:introduction`:. ============; Introduction; ============. Overview; ========. |PSIfour| provides a wide variety of quantum chemical methods using; state-of-the-art numerical methods and algorithms. Several parts of; the code feature shared-memory parallelization to run efficiently on; multi-core machines (see Sec. :ref:`sec:threading`).; An advanced parser written in Python allows the user; input to have a very simple style for routine computations, but it can also; automate very complex tasks with ease. |PSIfour| is, in many ways, a whole new package compared to Psi3.; While some libraries and modules remain the same, the majority of the code has; been rewritten from scratch based on a powerful set of new libraries written; in C++. A totally new Python front-end makes |PSIfour| incredibly user-friendly; and automates many common tasks such as basis set extrapolation, composite; methods, running the same computation on every molecule in a test set, etc.; Density-functional theory, absent in Psi3, is quite efficient; in |PSIfour|, with many functionals available. Density fitting is ubiquitous in; |PSIfour|, leading to some of the most efficient MP2 and CCSD(T) code available.; |PSIfour| also introduces extensive,; powerful features for energy component analysis of non-covalent interactions; via symmetry-adapted perturbation theory. Orbital-optimized versions of; perturbation theory and coupled-cluster methods, and their analytic gradients,; have also been added. Through external libraries, |PSIfour| gains access to implicit; solvent (PCM) capabilities, density-matrix renormalization group CI, effective; fragment potentials, Grimme dispersion corrections, and high-order; coupled-cluster theory. In this section, we provide an overview of some of the features of; |PSIfour| along with the prerequisite steps for running calculati",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:8342,Usability,simpl,simple,8342,"uess is the superposition of atomic; densities (SAD), discussed in. * ""Principles for a direct SCF approach to LCAO-MO ab-initio; calculations"", J. Alml\ |o_dots|\ f, K. Faegri, and K. Korsell,; *J. Comput. Chem.* **3**, 385 (1982).; (doi: `10.1002/jcc.540030314 <https://doi.org/10.1002/jcc.540030314>`_). * ""Starting SCF calculations by superposition of atomic; densities"", J. H. Van Lenthe, R. Zwaans, H. J. J. Van Dam,; and M. F. Guest, *J. Comput. Chem.* **27**, 926 (2006).; (doi: `10.1002/jcc.20393 <https://doi.org/10.1002/jcc.20393>`_). |PSIfour| also features a SAD natural orbital guess, an extended; H\ |u_dots|\ ckel guess that employs on-the-fly atomic calculations alike the SAD; guess, as well as a superposition of atomic potentials (SAP) guess; that is based on screening of atomic nuclei. The SAD natural orbitals,; H\ |u_dots|\ ckel and SAP guesses have been described in. * ""An assessment of initial guesses for self-consistent field; calculations. Superposition of Atomic Potentials: simple yet; efficient"", S. Lehtola, *J. Chem. Theory Comput.* **15**,; 1593 (2019) (doi: `10.1021/acs.jctc.8b01089; <https://doi.org/10.1021/acs.jctc.8b01089>`_). Density Cumulant Theory (DCT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _`intro:dctcitations`:. |PSIfour| features several formulations of newly-developed density cumulant; theory (DCT), also known as density cumulant functional theory (DCFT).; The theory and benchmark of this theory are discussed in the following papers:. DC-06 (also known as DCT-06):. * ""Density Cumulant Functional Theory: First Implementation and; Benchmark Results for the DCFT-06 Model,"" A. C. Simmonett,; J. J. Wilke, H. F. Schaefer, and W. Kutzelnigg, *J. Chem. Phys.*; **133**, 174122 (2010).; (doi: `10.1063/1.3503657 <https://doi.org/10.1063/1.3503657>`_). * ""Analytic gradients for density cumulant functional theory: The; DCFT-06 model,"" A. Yu. Sokolov, J. J. Wilke, A. C. Simmonett,; and H. F. Schaefer, *J. Chem. Phys.* **137**, 054105 (2012).; (doi: `10",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:15527,Usability,guid,guidance,15527," for State-specific; Multireference Coupled Cluster Methods,""; F. A. Evangelista, A. C. Simmonett, H. F. Schaefer, D. Mukherjee, and; W. D. Allen,; *Phys. Chem. Chem. Phys.* **11**, 4728-4741 (2009).; (doi: `10.1039/b822910d <https://doi.org/10.1039/b822910d>`_). Symmetry-Adapted Perturbation Theory (SAPT); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. |PSIfour| features an extremely efficient code to perform wavefunction-based; Symmetry Adapted Perturbation Theory (SAPT). A good review article for this; method is as follows:. * ""Perturbation Theory Approach to Intermolecular Potential Energy; Surfaces of van der Waals Complexes,"" B. Jeziorski, R. Moszynski,; and K. Szalewicz, *Chem. Rev.* **94**, 1887-1930 (1994).; (doi: `10.1021/cr00031a008 <https://doi.org/10.1021/cr00031a008>`_). |PSIfour| benefits enormously from the introduction of density fitting (DF); into SAPT. There are several SAPT truncations available in |PSIfour|. For; guidance on which one to choose, see the SAPT section of the manual; and refer to the following systematic study:. * ""Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and; Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M.; Parrish, A. G. Ryno, and C. D. Sherrill, *J. Chem. Phys.* **140**,; 094106 (2014).; (doi: `10.1063/1.4867135 <https://doi.org/10.1063/1.4867135>`_). The theory and implementation of DF-SAPT is discussed; in the following papers for various levels of SAPT. DF-SAPT0. * ""Large-scale Symmetry-adapted Perturbation Theory Computations via; Density Fitting and Laplace Transformation Techniques: Investigating the; Fundamental Forces of DNA-Intercalator Interactions,"" E. G. Hohenstein,; R. M. Parrish, C. D. Sherrill, J. M. Turney, and H. F. Schaefer, *J.; Chem. Phys.* **135**, 174017 (2011).; (doi: `10.1063/1.3656681 <https://doi.org/10.1063/1.3656681>`_). * ""Density Fitting and Cholesky Decomposition Approximations; in Symmetry-Adapted Perturbation Theory: Implementation and Applicatio",MatchSource.DOCS,doc/sphinxman/source/introduction.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:1829,Availability,down,downloads,1829," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2084,Availability,avail,available,2084,"P by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system f",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3409,Availability,avail,availableEFPFragments,3409,"onda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4855,Availability,error,error,4855,"uld perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: EFP; molecule specification. .. _`sec:usingEFPFragments`:. Molecule Specification; ~~~~~~~~~~~~~~~~~~~~~~. EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the ``--`` fragment separation scheme; described :ref:`here <sec:fragments>`. Each EFP fragment has its own; fragment section that includes the label ``efp``, the name of the file; *fragname* from which EFP parameters are to be read, and the position; specification for the fragment in one of two ways, XYZABC or POINTS. For; XYZABC, the fragment specification is all on one line: ``efp`` and; *fragname* are followed by two sets of three numbers: the coordinates; of the center of mas",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10455,Availability,error,error,10455," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10612,Availability,error,error,10612," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11173,Availability,avail,availableEFPFragments,11173,"+----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify whe",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11273,Availability,avail,available,11273,"---------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory con",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:1843,Deployability,configurat,configuration,1843," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2231,Deployability,install,installed,2231,". Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EF",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2336,Deployability,install,installed,2336," Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water,",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2427,Deployability,install,install,2427," Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water,",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2778,Deployability,install,installation,2778,". LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11387,Deployability,configurat,configuration,11387,"-------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp c",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12244,Deployability,install,installation,12244,"he EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/lib",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12399,Deployability,install,installation,12399,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:7882,Energy Efficiency,energy,energy,7882,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8076,Energy Efficiency,energy,energy,8076," is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt c",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8636,Energy Efficiency,energy,energy,8636,".0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At thi",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8719,Energy Efficiency,energy,energy,8719,"978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geo",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8999,Energy Efficiency,energy,energy,8999,"p h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+=",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:9067,Energy Efficiency,energy,energy,9067,"p h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+=",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10151,Energy Efficiency,energy,energy,10151," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10752,Energy Efficiency,energy,energy,10752," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10950,Energy Efficiency,energy,energy,10950," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:1705,Integrability,interface,interface,1705,"sser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. li",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2620,Integrability,depend,dependent,2620,"befp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PS",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3153,Integrability,depend,dependent,3153,"psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/li",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12195,Integrability,depend,dependencies,12195,"--------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Buil",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:13283,Integrability,depend,dependencies,13283,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:1843,Modifiability,config,configuration,1843," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4644,Modifiability,variab,variable,4644,"te:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: EFP; molecule specification. .. _`sec:usingEFPFragments`:. Molecule Specification; ~~~~~~~~~~~~~~~~~~~~~~. EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the ``--`` fragment separation scheme; described :ref:`here <sec:fragments>`. Each EFP fragment has its own; fragment section that includes the label ``efp``, the name of the file; *fragname* from which EFP parameters are to be read, and the position; specification for th",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10773,Modifiability,coupling,coupling,10773," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11387,Modifiability,config,configuration,11387,"-------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp c",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11649,Modifiability,config,configure,11649,"--------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12058,Modifiability,variab,variable,12058,"--------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Buil",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12159,Modifiability,variab,variable,12159,"--------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Buil",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12335,Modifiability,variab,variable,12335,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12537,Modifiability,variab,variable,12537,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12672,Modifiability,variab,variable,12672,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:13101,Modifiability,config,configdir,13101,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3845,Performance,perform,perform,3845,"https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; f",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8162,Performance,perform,performed,8162," the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preced",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:9471,Performance,load,load,9471," augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:9665,Performance,perform,perform,9665,"he active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:9710,Performance,optimiz,optimizations,9710,"he active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt computation will always; be run on the molecule defined in the preceding block. For advanced; users, unexpected difficulties may arise due to: (1) the EFP fragment; from the last molecule block executed will always be active (and; potentially interfering with SCF) and (2) recalling a molecule; through ``activate(name)`` (where ``name`` was the python handle; in the molecule block) will not load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2593,Safety,detect,detect,2593,"befp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PS",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12591,Safety,detect,detecting,12591,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12690,Safety,detect,detecting,12690,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:13153,Safety,detect,detectable,13153,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4518,Security,access,accessible,4518,"ctly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: EFP; molecule specification. .. _`sec:usingEFPFragments`:. Molecule Specification; ~~~~~~~~~~~~~~~~~~~~~~. EFP fragment geometries are specified alongside the quantum mechanical; (QM) molecule and make use of the ``--`` fragment separation scheme; described :ref:`here <sec:fragments>`. Each EFP fragment has its own; fragment section that includes the label ``efp``, the name of the",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11327,Security,access,accessible,11327,"|; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CM",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:3994,Testability,test,test,3994,"built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. ",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4051,Testability,test,tests,4051,"ar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must corresp",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:4120,Testability,test,tests,4120,"ate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many of the same; .. comment molecules are present and should perform similarly in computations,; .. comment exact matches of fragment geometries or efp energies should not be; .. comment expected. See files in test case directories :source:`qchem-efp-sp; .. comment <tests/libefp/qchem-efp-sp>` and :source:`qchem-qmefp-sp; .. comment <tests/libefp/qchem-qmefp-sp>` for equivalent Q-Chem and |PSIfour|; .. comment EFP input files. Creating new efp fragments requires the `GAMESS; <https://www.msg.chem.iastate.edu/gamess/index.html>`_ quantum chemistry package.; Instructions on building new fragments are `here; <https://github.com/libefp2/libefp#how-to-create-custom-efp-fragment-types>`_.; Once your new fragment is ready, make it accessible to |PSIfour| by; including the directory in which the ``.efp`` file is located to the colon; separated environment variable :envvar:`PSIPATH`. Fragments are searched; for first in the current directory, next in the paths of :envvar:`PSIPATH`, and; finally in built-in library. If |PSIfour| is unable to find the; fragment, an error will be reported. .. note:: When constructing new fragment files, the name of the name of the; file should be lowercase and have extension ``.efp``. The molecule name; within the file, *e.g.*, ``$NH3`` must correspond to the name of the; fragment file. .. index:: molecule; EFP; single: E",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:7918,Usability,simpl,simply,7918,"or QM <sec:moleculeKeywords>`, the center of mass; coordinates in the XYZABC format and all coordinates in the POINTS format are; taken to be in Angstroms by default or in Bohr if ``units au`` is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally th",MatchSource.DOCS,doc/sphinxman/source/libefp.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1795,Availability,down,downloads,1795," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2327,Availability,avail,available,2327,"ource:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Li",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1809,Deployability,configurat,configuration,1809," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1906,Deployability,release,release,1906,"tware Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda witho",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2446,Deployability,install,installed,2446,"dge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and t",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2551,Deployability,install,installed,2551,"test-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far lo",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2642,Deployability,install,install,2642,"test-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far lo",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2941,Deployability,install,installation,2941,"bint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependenc",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4136,Deployability,install,installation,4136,"es v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Buil",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4296,Deployability,install,installation,4296,"ndent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISAB",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2782,Integrability,depend,dependent,2782,"y roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Depe",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:3322,Integrability,depend,dependent,3322,"/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where ",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4087,Integrability,depend,dependencies,4087,"vg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:5296,Integrability,depend,dependencies,5296,"w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. ",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1809,Modifiability,config,configuration,1809," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:3639,Modifiability,config,configure,3639,", hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4051,Modifiability,variab,variable,4051,"vg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4232,Modifiability,variab,variable,4232,"built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_P",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4358,Modifiability,config,config,4358,"ndent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISAB",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4436,Modifiability,variab,variable,4436,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4572,Modifiability,variab,variable,4572,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4708,Modifiability,variab,variable,4708,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4833,Modifiability,variab,variable,4833,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:5133,Modifiability,config,configdir,5133,"w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. ",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:5666,Modifiability,variab,variables,5666,"w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. ",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2755,Safety,detect,detect,2755,"y roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Depe",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4490,Safety,detect,detecting,4490,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4590,Safety,detect,detecting,4590,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4895,Safety,detect,detected,4895,"w to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:5185,Safety,detect,detectable,5185,"w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. D. Build bundled shared library with up to AM=5. .. code-block:: bash. >>> cmake -DBUILD_SHARED_LIBS=ON. E. Build custom library from generator source. .. code-block:: bash. >>> # find the ""new-cmake-harness-lab-rb1"" block at :source:`external/upstream/libint2/CMakeLists.txt`; >>> # edit the ""ENABLE"" and ""AM"" variables; >>> cmake -DBUILD_Libint2_GENERATOR=ON -DCMAKE_DISABLE_FIND_PACKAGE_Libint2=ON. ",MatchSource.DOCS,doc/sphinxman/source/libint.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:1756,Availability,down,downloads,1756,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:1996,Availability,avail,available,1996,"utodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:1770,Deployability,configurat,configuration,1770,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2142,Deployability,install,installed,2142,"e to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:l",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2247,Deployability,install,installed,2247,"thor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2337,Deployability,install,install,2337,"thor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2631,Deployability,install,installation,2631,"c/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation d",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3625,Deployability,install,installation,3625,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3783,Deployability,install,installation,3783,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2474,Integrability,depend,dependent,2474,"img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Up",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3096,Integrability,depend,dependent,3096,"ux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Li",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3577,Integrability,depend,dependencies,3577,"m source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:4521,Integrability,depend,dependencies,4521,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:1770,Modifiability,config,configuration,1770,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3139,Modifiability,config,configure,3139," |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. cod",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3541,Modifiability,variab,variable,3541,"m source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3720,Modifiability,variab,variable,3720,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3918,Modifiability,variab,variable,3918,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:4051,Modifiability,variab,variable,4051,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:4359,Modifiability,config,configdir,4359,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2448,Safety,detect,detect,2448,"img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Up",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3971,Safety,detect,detecting,3971,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:4069,Safety,detect,detecting,4069,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:4411,Safety,detect,detectable,4411,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,doc/sphinxman/source/libxc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:4412,Availability,error,errors,4412,"l cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7763,Availability,down,download,7763,"s of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, bu",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10369,Availability,toler,tolerance,10369," ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10904,Availability,error,errors,10904,"JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed. * For Tikhonow regularization, ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3285,Deployability,integrat,integrate,3285,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6996,Deployability,install,installed,6996,"me. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7449,Deployability,integrat,integration,7449,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7638,Deployability,install,install,7638,"llowing precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; m",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:8247,Energy Efficiency,energy,energy,8247,"s and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10106,Energy Efficiency,charge,charge,10106,"UREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This mean",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10878,Energy Efficiency,energy,energy,10878,"JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed. * For Tikhonow regularization, ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3285,Integrability,integrat,integrate,3285,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3587,Integrability,depend,dependency,3587,"n is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follo",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:4314,Integrability,depend,dependency,4314,"hat's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` a",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:4515,Integrability,interface,interface,4515,"me}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:4562,Integrability,interface,interface,4562,"me}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5022,Integrability,depend,dependencies,5022," * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5184,Integrability,depend,dependencies,5184,"ule (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; la",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6231,Integrability,depend,dependency,6231,"external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) co",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6908,Integrability,depend,dependencies,6908,"t add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_o",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7449,Integrability,integrat,integration,7449,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:12779,Integrability,interface,interface,12779,"name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed. * For Tikhonow regularization, use ``TIKONOW_OMEGA``, not regularizer. * ``SYM`` for symmetry. * ``OCC`` for occupied/occupation (e.g., ``DOCC``, ``LOCK_OCC``, ``OCC_TOLERANCE``). * ``COND`` for condition and ``CONDITIONER`` for conditioner. * ``LOCAL`` (not localize). * Use ``AO`` and ``MO`` for atomic and molecular orbitals. When 'O' for; orbitals is too obsure or would make for too short a keyword, as in; ""bool NO"" for ""Do use natural orbitals"", use ``ORBS`` for orbitals. So; natural orbitals are ``NAT_ORBS`` and Brueckner orbitals are; ``BRUECKNER_ORBS``. * ``LEVEL`` (not ``LVL``, not ``LEV``). * ``EX`` for excitation. * ``VAL`` for valence. * ``GEOM`` (not geo, not geometry). * ``SYM`` (not symm, not symmetry). * ``FILE`` (unless truly multiple FILES). * ``WRITE``/``READ`` for info transfer across jobs. ``SAVE``/``RESTART``; for same in context of restart. * Damping should interface through option (double) ``DAMPING_PERCENTAGE``,; where a value of 0.0 indicates no damping. * Try to avoid ``COMPUTE`` or ``CALC`` in an option name. If it's a; boolean like ""opdm_compute"" for ""Do compute the one-particle density; matrix"", just use ``OPDM``. * Properties should be governed by a ``PROPERTIES`` array for the root of; interest or by a ``PROPERTIES_ALL`` array for all roots in a multi-root; calc. Since no module conforms to this right now, use ``PROPERTY``; alone and ``PROP`` in multi-part option as ``PROP_ROOT``, ``PROP_ALL``,; ``PROP_SYM`` to conform. * Use ``DF`` (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that's what; EMSL uses. ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2012,Modifiability,variab,variables,2012,"e:: autodoc_abbr_options_c.rst. .. _`sec:addAddOns`:. Adding Add-Ons; ==============. .. _`faq:addonname`:. How to use an Add-On's name in directory structure, build, and distribution; ---------------------------------------------------------------------------. * Select a name. May be mixed case with numerals and underscores; (*e.g.*, CheMPS2, libefp, PCMSolver, v2rdm_casscf). Shouldn't start with a; numeral. Needn't start with ""lib"", even if a library. * GitHub repository name should be :samp:`{AddOn_name}` or; :samp:`{AddOn_name}.lower()` (hereafter, :samp:`{addon_name}`. For example: CheMPS2, libefp, pcmsolver,; v2rdm_casscf. * CMake project name should be :samp:`{AddOn_name}`. For example:; ``project(libefp)``, ``project(CheMPS2)``, ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirecto",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3672,Modifiability,variab,variable,3672,"abling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5076,Modifiability,variab,variables,5076," export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ``core``. Basically,; try to leave this file alone, but if there are compile errors,; add the definitions/headers as needed. * :source:`psi4/src/psi4/`. * If a module is needed to interface the AddOn to |PSIfour|, try to; put ""interface"" in the name. Follow the pattern of CheMPS2 or gdma.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7696,Modifiability,sandbox,sandbox,7696,"ipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vec",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7736,Modifiability,plugin,plugins,7736,"ipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vec",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:8411,Modifiability,flexible,flexible,8411,"(2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; optio",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:9695,Performance,optimiz,optimizations,9695,"teration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; inte",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:1876,Safety,detect,detect,1876,"ot, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:addAddOns`:. Adding Add-Ons; ==============. .. _`faq:addonname`:. How to use an Add-On's name in directory structure, build, and distribution; ---------------------------------------------------------------------------. * Select a name. May be mixed case with numerals and underscores; (*e.g.*, CheMPS2, libefp, PCMSolver, v2rdm_casscf). Shouldn't start with a; numeral. Needn't start with ""lib"", even if a library. * GitHub repository name should be :samp:`{AddOn_name}` or; :samp:`{AddOn_name}.lower()` (hereafter, :samp:`{addon_name}`. For example: CheMPS2, libefp, pcmsolver,; v2rdm_casscf. * CMake project name should be :samp:`{AddOn_name}`. For example:; ``project(libefp)``, ``project(CheMPS2)``, ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5649,Safety,detect,detecting,5649,"a.; If non-required, be sure to conditionalize it with ``if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7030,Safety,detect,detected,7030,"me. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:9904,Safety,avoid,avoid,9904,"r number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; ``NUM_THREADS``). * Some names that could be split into multiple words are staying as one.; Use ``MAXITER``, ``CACHELEVEL``, ``PUREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10140,Safety,safe,safer,10140,"UREAM``, ``DERTYPE``. * ``INTS`` (not integrals), also ``OEI`` (not oe_integrals) for; one-electron integrals and ``TEI`` (not te_integrals) for two-electron; integrals. * ``PERTURB`` (not pert) for perturbation. * Use ``PRINT`` options to indicate printing to output file. Use ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This mean",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:12890,Safety,avoid,avoid,12890,"name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (role of boolean) if the value (role of double) has; changed. * For Tikhonow regularization, use ``TIKONOW_OMEGA``, not regularizer. * ``SYM`` for symmetry. * ``OCC`` for occupied/occupation (e.g., ``DOCC``, ``LOCK_OCC``, ``OCC_TOLERANCE``). * ``COND`` for condition and ``CONDITIONER`` for conditioner. * ``LOCAL`` (not localize). * Use ``AO`` and ``MO`` for atomic and molecular orbitals. When 'O' for; orbitals is too obsure or would make for too short a keyword, as in; ""bool NO"" for ""Do use natural orbitals"", use ``ORBS`` for orbitals. So; natural orbitals are ``NAT_ORBS`` and Brueckner orbitals are; ``BRUECKNER_ORBS``. * ``LEVEL`` (not ``LVL``, not ``LEV``). * ``EX`` for excitation. * ``VAL`` for valence. * ``GEOM`` (not geo, not geometry). * ``SYM`` (not symm, not symmetry). * ``FILE`` (unless truly multiple FILES). * ``WRITE``/``READ`` for info transfer across jobs. ``SAVE``/``RESTART``; for same in context of restart. * Damping should interface through option (double) ``DAMPING_PERCENTAGE``,; where a value of 0.0 indicates no damping. * Try to avoid ``COMPUTE`` or ``CALC`` in an option name. If it's a; boolean like ""opdm_compute"" for ""Do compute the one-particle density; matrix"", just use ``OPDM``. * Properties should be governed by a ``PROPERTIES`` array for the root of; interest or by a ``PROPERTIES_ALL`` array for all roots in a multi-root; calc. Since no module conforms to this right now, use ``PROPERTY``; alone and ``PROP`` in multi-part option as ``PROP_ROOT``, ``PROP_ALL``,; ``PROP_SYM`` to conform. * Use ``DF`` (not ri) for density-fitting and resolution-of-the-identity; option names. Only the basis sets are staying as -RI since that's what; EMSL uses. ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2771,Testability,test,tests,2771," ``project(PCMSolver)``,; ``project(v2rdm_casscf)``. Namespacing in the directory structure used; to detect the addon should have this name (*e.g.*,; ``share/cmake/CheMPS2``). * Restricted by the CMake project name, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:2999,Testability,test,tests,2999,"e, add-ons return CMake variables; and compile definitions of :samp:`FOUND_{AddOn_name}` and; :samp:`USING_{AddOn_name}`. For example: ``FOUND_libefp``,; ``USING_CheMPS2``, ``PCMSolver_LIBRARIES``, ``USING_v2rdm_casscf``. * The CMake target(s) formed use the full add-on name as the namespace,; :samp:`{AddOn_name}::{lib_name_without_lib}.lower()`. For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symli",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3317,Testability,test,testing,3317,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5681,Testability,test,tests,5681,"if(TARGET; AddOn::addon)`` in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5704,Testability,test,tests,5704," in CMake files or ``#ifdef USING_AddOn`` in; source files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-re",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5748,Testability,test,tests,5748,"urce files. * If a separate module is not required, follow the patter of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working T",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5819,Testability,test,tests,5819,"r of dkh; or simint with respect to libmints. Again, conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) al",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5881,Testability,test,tests,5881,"conditionalize as in; preceding bullet. * :source:`external/upstream/`. * Add a CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build s",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:5963,Testability,test,test,5963,"CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consi",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6007,Testability,test,test,6007,"CMakeLists.txt that imitates another AddOn of similar; language and dependencies. Try to keep the format, messaging,; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consi",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6036,Testability,test,tests,6036,"; and variables passed as similar as possible so that differences; mean something. If BLAS/LAPACK or other common dependencies in; :source:`external/common` are needed, be sure to add them to the; ``DEPENDS`` argument. * The usual practice to to get everything cohesive between; the CMake for the AddOn repository and |PSIfour| and then as a; last step, mint a tag in the former and add it to two places in; :samp:`external/upstream/{addon_name}/CMakeLists.txt` and one; place in :source:`psi4/CMakeLists.txt` so that only that version; and later are acceptable to |PSIfour| for detecting pre-built. * :source:`tests/`. * In :source:`tests/CMakeLists.txt`, add a block adding a tests subdirectory if Add-On enabled. * Create new subdirectory :samp:`tests/{addon_name}` with a; CMakeLists.txt. In that add a few tests. Imitate the pattern in; other subdirs of including the addon prefix to the test name in the; CMakeLists but not in the test dir name. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested p",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7138,Testability,test,tested,7138," a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANC",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7461,Testability,test,tests,7461,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7696,Testability,sandbox,sandbox,7696,"ipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vec",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10594,Testability,test,tested,10594," an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_S",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10806,Testability,test,tested,10806,"these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * If you have an option that instructs your module to do something not too; computationally intensive and then quit, append ``_EXIT`` to the option; name. * Scaling terms (like for scs) should follow the pattern ``MP2_SS_SCALE``; and ``SAPT_OS_SCALE``. * ``FRAG`` for fragment. * ``AVG`` for average. * For level-shifting, let's try to have it governed by (double); ``LEVEL_SHIFT`` only and not a boolean/double combo since the procedure; can be turned on (r",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7943,Usability,guid,guidelines,7943,"e |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; minimum and maximum number of diis vectors to use, and a ``DIIS_START``; which is the iteration at which to start saving vectors for diis. Not all; modules conform to all these at present, but they're as standardized as; they can be without changing code. * ``AMPS`` (not amplitude, not amp) for amplitudes. * ``NUM_`` (not n) for number (e.g., ``NUM_AMPS_PRINT``, ``MAX_NUM_VECS``,; `",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:10421,Usability,guid,guidelines,10421," ``WRITE``; options to indicate printing to another file. This probably isn't; entirely valid now but should be observed in future. The complement to; ``WRITE`` is ``READ``. ``PRINT``, ``READ``, and ``WRITE`` will usually; be the last words in an option name. * Use ``FOLLOW_ROOT`` for the state to be followed in geometry optimizations. * ``WFN`` (not wavefunction). * You're welcome to use ``WFN`` and ``DERTYPE`` as internal options, but; plan to have these set by the python driver and mark them as ``!expert``; options. Really avoid using ``JOBTYPE``. * You're not welcome to add ``CHARGE`` or ``MULTP`` options. Plan to get; these quantities from the molecule object. Since we frequently use subsets; of systems (with their own charge and multiplicity), this is safer. * Conform. Just grep ``'add' psi4/src/read_options.cc`` to get a list of; all the option names in |PSIfour| and try to match any conventions you; find. * If you have a quantity you'd like to call a cutoff, a threshold, a; tolerance, or a convergence, consider the following guidelines in naming; it. * If its value is typically greater than ~0.001, give it a name with ``CUTOFF``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with larger values (e.g.,; integrals, occupations, eigenvectors), give it a name with ``TOLERANCE``. * If its value is typically less than ~0.001 and quantities being tested; against the option are more valuable with smaller values (e.g., energy; changes, residual errors, gradients), give it a name with; ``CONVERGENCE``. * In deciding how to arrange words in an option name, place the context; first (e.g., ``MP2_AMPS_PRINT``, ``TRIPLES_DIIS``). This means ``PRINT``; will generally be at the end of an option name. * Use ``INTS_TOLERANCE`` (not schwarz_cutoff). * ``H`` in an option name is reserved for Hamiltonian (or hydrogen).; Hessian should be ``HESS``. * All option names should be all caps and separated by underscores. * ",MatchSource.DOCS,doc/sphinxman/source/manage_addon.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:7865,Availability,error,errors,7865,"stein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; submitted. -----------------------------------------------------------------------. Psi4 started on: Friday, 28 April 2017 07:31PM. Process ID: 95107; PSIDATADIR: /Users/johndoe/psi4/objdir8/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. >>> psi4.version_formatter(); '1.1rc2.dev17'; >>> psi4.version_formatter('all'); '1.1rc2.dev17 {condadoc} c852257 1.0.0.999 dirty 1.0 <-- 1.1rc2.dev17+c852257'; >>> psi4.version_formatter(""""""{{{branch}}} {versionlong}""""""); '{condadoc} 1.1rc2.dev17+c852257'. .. _`faq:grepascii`:. How to locate non-ascii characters in the codebase; --------------------------------------------------. Neither the Python interpreter nor Sphinx like non-ASCII characters one; bit, though the errors may be intermittant. Output files are usually ok,; so Jerome can live, for now. To aid in tracking down offenders, here's; the ``vi`` and ``grep`` search strings. In the docs, you want to use; the substitutions in :source:`doc/sphinxman/source/abbr_accents.rst`; instead of the actual characters. ::. # vim; :/[^\x00-\x7F]. # bash; grep -r --color='auto' -P -n ""[^\x00-\x7F]"" psi4/; ; .. _`faq:undefversion`:. How to fix ""Psi4 undefined"" version; -----------------------------------. When in a git repo, the versioner uses ``git describe`` and psi4/metadata.py; to compute the version. If you don't have all the latest tags, this mechanism; can't work. To solve, pull tags and remake. ::. # upstream in `git remote -v` points to github.com/psi4/psi4.git; >>> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed; ; .. _`faq:cannotimportcoretlpd`:. How to fix ""cannot import name 'core' from {top-level-psi4-dir}; -----------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:7971,Availability,down,down,7971,"d,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; submitted. -----------------------------------------------------------------------. Psi4 started on: Friday, 28 April 2017 07:31PM. Process ID: 95107; PSIDATADIR: /Users/johndoe/psi4/objdir8/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1. >>> psi4.version_formatter(); '1.1rc2.dev17'; >>> psi4.version_formatter('all'); '1.1rc2.dev17 {condadoc} c852257 1.0.0.999 dirty 1.0 <-- 1.1rc2.dev17+c852257'; >>> psi4.version_formatter(""""""{{{branch}}} {versionlong}""""""); '{condadoc} 1.1rc2.dev17+c852257'. .. _`faq:grepascii`:. How to locate non-ascii characters in the codebase; --------------------------------------------------. Neither the Python interpreter nor Sphinx like non-ASCII characters one; bit, though the errors may be intermittant. Output files are usually ok,; so Jerome can live, for now. To aid in tracking down offenders, here's; the ``vi`` and ``grep`` search strings. In the docs, you want to use; the substitutions in :source:`doc/sphinxman/source/abbr_accents.rst`; instead of the actual characters. ::. # vim; :/[^\x00-\x7F]. # bash; grep -r --color='auto' -P -n ""[^\x00-\x7F]"" psi4/; ; .. _`faq:undefversion`:. How to fix ""Psi4 undefined"" version; -----------------------------------. When in a git repo, the versioner uses ``git describe`` and psi4/metadata.py; to compute the version. If you don't have all the latest tags, this mechanism; can't work. To solve, pull tags and remake. ::. # upstream in `git remote -v` points to github.com/psi4/psi4.git; >>> git fetch upstream 'refs/tags/*:refs/tags/*'; >>> make; # version healed; ; .. _`faq:cannotimportcoretlpd`:. How to fix ""cannot import name 'core' from {top-level-psi4-dir}; ---------------------------------------------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYT",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10863,Availability,mainten,maintenance,10863,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:11027,Availability,mainten,maintenance,11027,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:1444,Deployability,release,releases,1444,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. .. _`sec:addAddOns`:. Git, Versioning; ===============. .. _`faq:versionbump`:. How to bump a version; ---------------------. 0. **ACT** to check everything in. 1. **OBSERVE** current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote. * https://github.com/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you ca",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:2049,Deployability,release,releases,2049,".rst. .. .. _`sec:addAddOns`:. Git, Versioning; ===============. .. _`faq:versionbump`:. How to bump a version; ---------------------. 0. **ACT** to check everything in. 1. **OBSERVE** current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote. * https://github.com/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe -",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5366,Deployability,release,releases,5366,"er} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and;",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5699,Deployability,release,releases,5699,"ed_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1rc2.de",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:11694,Deployability,update,updated,11694,"ith the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors. i) Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there's been discussion, squash merge all PRs. j) When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. ",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:11811,Deployability,update,update,11811,"ith the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors. i) Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there's been discussion, squash merge all PRs. j) When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. ",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5658,Integrability,interface,interface,5658,"__version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). ----------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10995,Modifiability,rewrite,rewrite,10995,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:2451,Safety,predict,predict,2451,"om/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3291,Security,hash,hash,3291,"source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development s",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3446,Security,hash,hash,3446,"/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:3548,Security,hash,hash,3548,"ex 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>>",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:4057,Security,hash,hash,4057," describe --abbrev=7 --long --dirty; v1.1a1-418-g6100822. >>> psi4/versioner.py; Undefining version for irreconcilable tags: 1.1a1 (computed) vs 1.1rc1 (recorded); undefined {master} 6100822 1.0.0.999 1.0 <-- undefined+6100822. * Note 7-char git hash for the new commit, here ""6100822"". 4. **ACT** to bump tag in git, then bump git tag in code. * Use the decided-upon tag ``v1.1rc1`` and the observed hash ""6100822"" to; mint a new *annotated* tag, minding that ""v""s are present here. * Use the observed hash to edit :source:`psi4/metadata.py` and commit immediately. ::. >>> git tag -a v1.1rc1 6100822 -m ""v1.1rc1"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 6cbc05e..fdc202e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,5 +1,5 @@; __version__ = '1.1rc1'; -__version_long = '1.1rc1+zzzzzzz'; +__version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> psi4/versioner.py; Amazing, this can't actually happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Rec",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5771,Security,hash,hash,5771,"v1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1rc2.dev17. Git: Rev {condadoc} c852257 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smit",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10946,Security,access,access,10946,"indepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reaso",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5020,Testability,log,log,5020,"ally happen that git hash stored at git commit.; >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.1rc1"". 5. **OBSERVE** current versioning state. * Nothing to make note of, this is just a snapshot. ::. >>> psi4/versioner.py; Defining development snapshot version: 1.1rc2.dev1+4e0596e (computed); 1.1rc2.dev1 {master} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; -------",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9742,Testability,test,tests,9742," fix ""cannot import name 'core' from {top-level-psi4-dir}; ---------------------------------------------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it ",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9824,Testability,test,test,9824,"--------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9845,Testability,test,test,9845,"--------------------------. First, what's happening? ``sys.path`` (where modules can be imported from in python) starts with ``''``. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9941,Testability,test,tests,9941,"`. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can acciden",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:9990,Testability,test,test,9990,"`. If you `export PYTHONPATH={objdir}/stage/{prefix}/lib/{pymod_lib_dir}:$PYTHONPATH` to make PsiAPI easy, that inserts starting in pos'n 1 (0-indexed), so ``''`` still at the head of ``sys.path``. Now, if you try to run a psiapi/python file from ``{top-level-psi4-dir}`` that contains ``import psi4``, it will find the source tree ``psi4/__init__.py`` and fail because there's no ``core.so`` around. That is, it's finding what looks to be the psi4 module dir structure ``.`` when the one it wants is what you inserted into PYTHONPATH at pos'n 1. The way around this is to move the python file you're running to any other directory. Or, within the file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can acciden",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:10559,Usability,learn,learning,10559," file, do ``sys.path.insert(0, {objdir}/stage/{prefix}/lib/{pymod_lib_dir}``. .. _`faq:findmissingoutputref`:. How to find tests without output.ref; ------------------------------------. Ideally, each new test or much-altered test should add its own; ``output.ref``. When that doesn't happen, this command helps. ::. find tests/ -mindepth 1 -maxdepth 1 -type d '!' -exec test -e ""{}/output.ref"" "";"" -print. .. _`faq:githubcodereview`:. How to do GitHub issue management and code review; -------------------------------------------------. a) Anyone, core-dev or not, is encouraged to review PRs. It's actually good practice for interacting with other open-source projects, where you don't have the advantage of knowing or working with the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time a",MatchSource.DOCS,doc/sphinxman/source/manage_git.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1545,Availability,down,download,1545,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2049,Availability,down,download,2049,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2483,Availability,down,download,2483,"ld Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sph",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2895,Availability,down,downloads,2895," final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and a",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3006,Availability,down,downloads,3006,"`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect ne",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3621,Availability,down,download-analysis,3621,"nalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and col",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3731,Availability,down,download,3731,"rg/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6614,Availability,down,downstream,6614," Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/maste",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:7325,Availability,down,downstream,7325,"on in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). It",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8445,Availability,down,downstream,8445,"ults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or s",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9177,Availability,mainten,maintenance,9177,". Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly loca",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9778,Availability,mainten,maintenance,9778,"to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9935,Availability,mainten,maintenance,9935,"xt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. -----------------------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12952,Availability,mainten,maintenance,12952,".2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13133,Availability,down,downloads,13133,"you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__vers",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:15694,Availability,mainten,maintenance,15694,"conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16379,Availability,mainten,maintenance,16379,"Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-d",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16417,Availability,mainten,maintenance,16417,"://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Pack",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23269,Availability,down,downloaded,23269,"vate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 bui",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24675,Availability,down,download,24675," the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:26320,Availability,down,download,26320,"nto a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to lab",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:26376,Availability,down,download,26376,"ob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to tri",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:27465,Availability,down,download,27465,"t numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation b",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28555,Availability,down,downloads,28555,"-------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28649,Availability,down,download,28649,"bsite/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python vers",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28678,Availability,down,downloading,28678,"bsite/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python vers",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28706,Availability,down,download,28706,"bsite/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python vers",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28840,Availability,down,download,28840,"to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33447,Availability,mainten,maintenance,33447,"on is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack a",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33816,Availability,down,download,33816,"o that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/n",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34045,Availability,down,download,34045,"troller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36377,Availability,mainten,maintenance,36377,"4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Pr",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37384,Availability,down,downsampling,37384,"d to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38860,Availability,mainten,maintenance,38860,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1389,Deployability,release,release,1389,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1446,Deployability,release,release,1446,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1587,Deployability,release,releaseprocedure,1587,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1763,Deployability,release,release,1763,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1891,Deployability,release,release,1891,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1918,Deployability,release,release,1918,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1943,Deployability,release,release,1943,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2137,Deployability,release,release,2137,"dure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. -",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2171,Deployability,release,release,2171,"ht year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2194,Deployability,release,release,2194,"ht year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2609,Deployability,release,release,2609,"`v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/dow",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2632,Deployability,release,release,2632,"`v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/dow",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3639,Deployability,install,installer,3639,"nalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and col",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3879,Deployability,update,updated,3879," check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4112,Deployability,release,release,4112,"icenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4207,Deployability,release,release,4207,"007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_ou",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6317,Deployability,release,release,6317," set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6448,Deployability,pipeline,pipelines,6448,"2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" o",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6480,Deployability,pipeline,pipelines,6480,"t"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main d",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6789,Deployability,update,updated,6789," _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstre",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:7821,Deployability,release,released,7821,"bint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (cover",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8063,Deployability,update,updated,8063,"any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease c",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9821,Deployability,release,release,9821,"xt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. -----------------------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9975,Deployability,patch,patch,9975,"ne-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11267,Deployability,continuous,continuous,11267,"to`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12442,Deployability,patch,patches,12442,"------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_bui",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12740,Deployability,release,release,12740,"`commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13195,Deployability,install,installable,13195,"you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__vers",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13265,Deployability,release,release,13265,"s (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13373,Deployability,update,updated,13373," rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | he",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13590,Deployability,release,release,13590,"sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing th",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16511,Deployability,release,release,16511,"admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16639,Deployability,release,release,16639,"ase; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidan",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:17787,Deployability,update,updated,17787,"at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18140,Deployability,release,releases,18140,"el; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Ot",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18150,Deployability,update,update,18150,"el; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Ot",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18691,Deployability,release,releases,18691,"ages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``maste",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19468,Deployability,release,release,19468,"pare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20171,Deployability,release,releases,20171,"cosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``p",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20320,Deployability,release,release,20320,".. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; ..",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21310,Deployability,install,install,21310,"lease (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unifie",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21383,Deployability,install,install,21383," be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21655,Deployability,install,installers,21655,"the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22595,Deployability,release,release,22595,"nual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" p",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22878,Deployability,release,releases,22878," build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23009,Deployability,release,releases,23009,"y're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23316,Deployability,install,installers,23316,". There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24056,Deployability,install,installers,24056,"kiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24564,Deployability,install,installer,24564,"rch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. P",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24935,Deployability,install,installers,24935,"etching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25233,Deployability,release,release,25233,"99M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger f",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25400,Deployability,install,installers,25400,"-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the install",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25481,Deployability,release,release,25481,"Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25978,Deployability,install,installer,25978," osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/enviro",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:26389,Deployability,install,installers,26389,"ob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to tri",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:27714,Deployability,install,installs,27714,". Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading registe",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:27913,Deployability,install,installs,27913,". * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; ---------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28074,Deployability,install,install-generator,28074,"rm stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28172,Deployability,install,install-generator,28172,"thub.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't po",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28240,Deployability,install,installs,28240,".yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.;",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28545,Deployability,install,installer,28545,"-------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28596,Deployability,install,installing,28596,"te; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This f",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28774,Deployability,deploy,deploy,28774," in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default p",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29038,Deployability,install,installs,29038,"ub.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29278,Deployability,install,installs,29278,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29406,Deployability,install,installer,29406,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29480,Deployability,install,installs,29480,"gation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``dat",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29647,Deployability,install,install,29647," them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for i",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29749,Deployability,update,update,29749,"ite; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructio",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29923,Deployability,release,releases,29923,"ub.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in pla",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30053,Deployability,release,release,30053,"index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30098,Deployability,install,install-generator,30098,"index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30197,Deployability,install,install-generator,30197,"g in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads"";",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30393,Deployability,install,install-generator,30393," until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ---------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30468,Deployability,install,installs,30468,"`data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 ma",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30509,Deployability,install,installs,30509,"the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30599,Deployability,install,installer,30599,"ermines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30834,Deployability,install,installs,30834,"optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs,",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30870,Deployability,install,install-generator,30870,"ust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the t",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:31015,Deployability,install,installers,31015,"asn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:31144,Deployability,install,installs,31144,"asn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:31276,Deployability,deploy,deploy,31276,"o, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy t",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:32001,Deployability,release,release,32001," shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy the zipped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:32986,Deployability,deploy,deploy,32986,"ag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy the zipped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not th",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33317,Deployability,release,release,33317,"pped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33402,Deployability,release,releases,33402,"on is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack a",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33611,Deployability,deploy,deployed,33611,"4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For re",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33718,Deployability,release,releases,33718,"o that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/n",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33912,Deployability,release,releases,33912,"troller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34304,Deployability,release,releases,34304,"e and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag,",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34602,Deployability,release,releases,34602,"n no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34710,Deployability,release,releases,34710,"an do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35249,Deployability,release,release,35249," and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in fro",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35360,Deployability,release,releases,35360,"treleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintena",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35391,Deployability,release,release,35391,"treleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintena",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35538,Deployability,release,release,35538,"`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35753,Deployability,release,release,35753,"thub.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repo",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35798,Deployability,release,release,35798,"dit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (su",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35828,Deployability,release,release,35828,"- If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; f",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35962,Deployability,release,release,35962,"at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used f",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36123,Deployability,release,releases,36123,"the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the sh",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36154,Deployability,release,release,36154,"the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the sh",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36303,Deployability,release,release,36303,"-----------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presenta",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36415,Deployability,release,release,36415,").; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the fil",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36460,Deployability,release,release,36460,"``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36490,Deployability,release,release,36490,"atter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it t",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36543,Deployability,release,release,36543," from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new bloc",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36712,Deployability,release,releases,36712,"dlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36771,Deployability,release,releases,36771,"g is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR w",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37202,Deployability,release,release,37202,": ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37570,Deployability,release,release,37570,"--------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37728,Deployability,release,release,37728,"s://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37850,Deployability,release,release,37850,"* Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38029,Deployability,release,release,38029,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38114,Deployability,release,release,38114,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38522,Deployability,release,release,38522,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:7055,Integrability,depend,dependencies,7055,"cess = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9526,Integrability,depend,dependency,9526,"ugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10329,Integrability,depend,dependency,10329,"d commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any depend",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11028,Integrability,depend,dependencies,11028," Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version in",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11324,Integrability,depend,dependencies,11324,"hat master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12519,Integrability,depend,dependency,12519,"stock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16459,Integrability,interface,interface,16459,"://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Pack",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19349,Integrability,depend,dependencies,19349,"ibint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19403,Integrability,depend,dependencies,19403,"se lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19519,Integrability,depend,dependencies,19519,"pare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19562,Integrability,depend,dependencies,19562,"pare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20900,Integrability,depend,dependencies,20900,"inux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, o",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28127,Integrability,message,messages,28127," by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in fro",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30322,Integrability,message,messages,30322,"s new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38168,Integrability,depend,dependencies,38168,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:5036,Modifiability,config,config,5036,"y contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=Tr",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8515,Modifiability,plugin,plugin,8515,"ub.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11775,Modifiability,variab,variables,11775,"he backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11879,Modifiability,variab,variable,11879,"-----------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8984,Performance,tune,tune,8984,"dividual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch n",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18428,Performance,load,load,18428,"``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23293,Performance,cache,cached,23293,"vate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 bui",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23847,Safety,safe,safe,23847,"- For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build usi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16320,Security,hash,hash,16320,"Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-d",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18804,Security,access,accessible,18804,"updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Inste",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22241,Security,access,accessed,22241,"place) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/construct",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22624,Security,hash,hash,22624,"t gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at ru",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22657,Security,hash,hash,22657," b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the re",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1858,Testability,test,tests,1858,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3331,Testability,test,tests,3331,"`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4355,Testability,test,tests,4355,".md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4393,Testability,test,test,4393,"hinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4450,Testability,test,test,4450,"------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4546,Testability,test,tests,4546,"s, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4631,Testability,test,testing,4631,"er: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4957,Testability,test,tests,4957,"o read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = e",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:5277,Testability,test,tests,5277,".json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:5509,Testability,test,tests,5509," iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosyste",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6090,Testability,assert,assert,6090,"si4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs;",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6165,Testability,test,tests,6165,"ut.dat"", False); os.chdir(tmp_path_factory.getbasetemp()); request.addfinalizer(tear_down). +++ b/tests/pytests/conftest.py; @@ -34,6 +34,7 @@ def set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda e",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8636,Testability,test,tests,8636,"si4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/in",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10205,Testability,test,tested,10205,"nch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10244,Testability,test,tests,10244,"; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10281,Testability,test,tests,10281,"; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:10453,Testability,test,test,10453," other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; -------------------",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12161,Testability,test,test,12161,"''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14344,Testability,log,log,14344,"mmits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16221,Testability,log,log,16221,"long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16839,Testability,log,log,16839," ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18393,Testability,test,tests,18393,"``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. ",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18636,Testability,log,log,18636,"ment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compati",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18745,Testability,log,logged,18745,"updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Inste",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28530,Testability,test,test,28530,"---------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the gi",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28625,Testability,test,test,28625,"te; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This f",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28822,Testability,test,testers,28822,"; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``select",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29430,Testability,test,tested,29430,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30332,Testability,log,logic,30332,"s new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:14694,Usability,pause,pause,14694,"tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing the above settings"" for admins and Save changes. >>> git push --atomic upstream master v1.3rc2. # pause here and push to upstream and let Azure complete for an; # on-tag Windows conda package and docs, not tag+1.dev1 .; # the atomic flag below pushes commit and tag together so only one CI; # which is necessary for Windows conda package to compute the right version.; # After push, can temporarily re-engage admins ""Do not allow ..."" protections.; # also, grab the docs build from GHA artifacts. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version_long = '1.3rc2+zzzzzzz'; +__version_long = '1.3rc2+bc8d7f5'. >>> git add psi4/metadata.py; >>> git commit -m ""Records tag for v1.3rc2""; [master 16dbd3e] Records tag for v1.3rc2. # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both comm",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:17648,Usability,guid,guidance,17648,"itialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20715,Usability,clear,clear,20715," psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23223,Usability,clear,clear,23223,"ookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda",MatchSource.DOCS,doc/sphinxman/source/manage_release.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:1140,Deployability,configurat,configurational,1140,"ers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons ",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2457,Deployability,update,update,2457,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:3705,Energy Efficiency,energy,energy,3705,"ve) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. .. _`table:mcscf_spaces`:. .. table:: Orbital spaces for MCSCF computations. +----------------------------+----------------------------+; | RASSCF | CASSCF |; +============================+============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| |; +----------------------------+----------------------------+; | |globals__restricted_uocc| | |globals__restricted_uocc| |; +----------------------------+----------------------------+; | |globals__ras4| | |globals__active| |; +----------------------------+ +; | |globals__ras3| | |; +----------------------------+ +; | |globals__ras2| | |; +----------------------------+ +; | |globals__ras1| | |; +----------------------------+------",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:3758,Energy Efficiency,energy,energy,3758,"ds. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. .. _`table:mcscf_spaces`:. .. table:: Orbital spaces for MCSCF computations. +----------------------------+----------------------------+; | RASSCF | CASSCF |; +============================+============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| |; +----------------------------+----------------------------+; | |globals__restricted_uocc| | |globals__restricted_uocc| |; +----------------------------+----------------------------+; | |globals__ras4| | |globals__active| |; +----------------------------+ +; | |globals__ras3| | |; +----------------------------+ +; | |globals__ras2| | |; +----------------------------+ +; | |globals__ras1| | |; +----------------------------+----------------------------+; | |globals__restricted_docc| | |globals__restricted_docc| |; +----------------------------+---------------------",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:1140,Modifiability,config,configurational,1140,"ers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons ",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:1774,Performance,optimiz,optimized,1774," Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. Thes",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2196,Performance,perform,performs,2196,"=================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation o",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2212,Performance,optimiz,optimization,2212,"=================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation o",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2320,Performance,optimiz,optimized,2320,"=================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation o",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2964,Performance,optimiz,optimized,2964,"ce self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:3885,Performance,optimiz,optimized,3885,"ds. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.; Presently, it is not possible to mix the use of restricted and frozen orbitals; in |PSIfour|. An illustrative CASSCF example is as follows::. molecule {; O; H 1 1.00; H 1 1.00 2 103.1; }; ; set {; basis 6-31G**; restricted_docc [1, 0, 0, 0]; active [3, 0, 1, 2]; }; energy('casscf'). This input will compute the CASSCF energy of water where the 1s Oxygen orbital; and several virtual orbitals are not included in the CI expansion, but are; still optimized. The following is a full list of spaces within the various MCSCF; types. .. _`table:mcscf_spaces`:. .. table:: Orbital spaces for MCSCF computations. +----------------------------+----------------------------+; | RASSCF | CASSCF |; +============================+============================+; | |globals__frozen_uocc| | |globals__frozen_uocc| |; +----------------------------+----------------------------+; | |globals__restricted_uocc| | |globals__restricted_uocc| |; +----------------------------+----------------------------+; | |globals__ras4| | |globals__active| |; +----------------------------+ +; | |globals__ras3| | |; +----------------------------+ +; | |globals__ras2| | |; +----------------------------+ +; | |globals__ras1| | |; +----------------------------+----------------------------+; | |globals__restricted_docc| | |globals__restricted_docc| |; +----------------------------+---------------------",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2382,Usability,simpl,simple,2382,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,doc/sphinxman/source/mcscf.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst:1180,Availability,avail,available,1180,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst:1360,Availability,avail,available,1360,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst:1296,Deployability,configurat,configuration,1296,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst:1296,Modifiability,config,configuration,1296,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,doc/sphinxman/source/methods.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst:1515,Availability,avail,available,1515,"buted in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; Molden; WebMO; visualization. .. _`sec:molden`:. Interface to Molden |w---w| :py:func:`~psi4.driver.molden`; ==========================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: C. David Sherrill. |PSIfour| contains an interface to the Molden program. Molden is a ; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at ; https://www3.cmbi.umcn.nl/molden/ . Molden can; plot atomic orbitals, densities, electrostatic potentials (ESPs), etc.; |PSIfour| can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the ; so-called Molden format. This file is; written by the SCF module (see Section :ref:`SCF <sec:scf>`) ; if the user sets the |scf__molden_write| keyword to true. This Molden file is ; also used to pass information between |PSIfour| and WebMO, if |PSIfour| ; computations are invoked using the WebMO GUI. The filename of the ; Molden file ends in "".molden"", and the prefix is determined by ; |globals__writer_file_label| (if set), or else by the name of the output; file plus the name of the current molecule. If |globals__molden_with_virtual|; is set to false, the unoccupied orbitals are not written to the Molden; file. .. autofunction:: psi4.molden(wfn, filename); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/scf__molden_write.rst; .. include:: autod",MatchSource.DOCS,doc/sphinxman/source/molden.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst:1337,Integrability,interface,interface,1337,"edistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; Molden; WebMO; visualization. .. _`sec:molden`:. Interface to Molden |w---w| :py:func:`~psi4.driver.molden`; ==========================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: C. David Sherrill. |PSIfour| contains an interface to the Molden program. Molden is a ; visualization program for electronic structure developed by Gijs Schaftenaar; at the University of of Nijmegen, Netherlands. It is available at ; https://www3.cmbi.umcn.nl/molden/ . Molden can; plot atomic orbitals, densities, electrostatic potentials (ESPs), etc.; |PSIfour| can create a file containing; atomic coordinates, basis set, and SCF orbital coefficients in the ; so-called Molden format. This file is; written by the SCF module (see Section :ref:`SCF <sec:scf>`) ; if the user sets the |scf__molden_write| keyword to true. This Molden file is ; also used to pass information between |PSIfour| and WebMO, if |PSIfour| ; computations are invoked using the WebMO GUI. The filename of the ; Molden file ends in "".molden"", and the prefix is determined by ; |globals__writer_file_label| (if set), or else by the name of the output; file plus the name of the current molecule. If |globals__molden_with_virtual|; is set to false, the unoccupied orbitals ",MatchSource.DOCS,doc/sphinxman/source/molden.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/molden.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:1950,Availability,error,error,1950,"lin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with v",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3598,Availability,avail,available,3598,"HF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +--",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3939,Availability,robust,robust,3939,"n with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; ",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2270,Energy Efficiency,energy,energy,2270,"*Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically gener",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2338,Energy Efficiency,energy,energy,2338,"var>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table belo",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2501,Energy Efficiency,energy,energy,2501,"ram of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC ke",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2568,Energy Efficiency,energy,energy,2568,"y (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF i",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2697,Energy Efficiency,energy,energy,2697,"y (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF i",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3025,Energy Efficiency,energy,energy,3025," theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also sup",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3098,Energy Efficiency,energy,energy,3098," the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3893,Energy Efficiency,energy,energy,3893,"tion of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+--------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:4897,Energy Efficiency,energy,energy,4897,"hen using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 4 | CC(n-1)(n)_L | (CC(n-1)[n] and CC(n-1)(n) energies are also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 5 | CC(n)-1a | |; +---------------------+--------------+-------------------------------------------------------------+; | 6 | CC(n)-1b | |; +---------------------+--------------+-------------------------------------------------------------+; | 7 | CCn | |; +---------------------+--------------+-------------------------------------------------------------+; | 8 | CC(n)-3 | |; +---------------------+--------------+-------------------------------------------------------------+. ",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:1459,Integrability,interface,interface,1459,"Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2966,Integrability,rout,route,2966,"our| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:4069,Integrability,interface,interface,4069,"`'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 4 | CC(n-1)(n)",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2630,Performance,perform,perform,2630,"y (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF i",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2794,Performance,perform,perform,2794,"e source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two va",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3127,Performance,perform,perform,3127,"This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3144,Performance,optimiz,optimization,3144,"This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:4084,Performance,optimiz,optimize,4084,"be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 4 | CC(n-1)(n)_L | (CC(n-1)[n] and CC(n-1)(n) energies are also calculated) | ; +----",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:4257,Performance,optimiz,optimize,4257,"our| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:`4` with CCSDT freezing the 1\ *s* on carbon, run::. molecule H2O {; O; H 1 r; H 1 r 2 104.5; ; r = 1.0; }; ; set {; basis cc-pVDZ; freeze_core true; }; ; optimize('ccsdt'). Interface Details; ~~~~~~~~~~~~~~~~~. .. _`table:mrcc__mrcc_method`:. .. table:: MRCC methods . +---------------------+--------------+-------------------------------------------------------------+; | |mrcc__mrcc_method| | Method | Description | ; +=====================+==============+=============================================================+ ; | 1 | CC | |; +---------------------+--------------+-------------------------------------------------------------+; | 2 | CC(n-1)[n] | |; +---------------------+--------------+-------------------------------------------------------------+; | 3 | CC(n-1)(n) | (CC(n-1)[n] energy is also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 4 | CC(n-1)(n)_L | (CC(n-1)[n] and CC(n-1)(n) energies are also calculated) | ; +---------------------+--------------+-------------------------------------------------------------+; | 5 | CC(n)-1a | |; +-----",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:1415,Testability,test,testSuitemrcc,1415,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MRCC; .. _`sec:mrcc`:. Interface to MRCC by M. K\ |a_acute|\ llay; ==========================================. .. codeauthor:: Justin M. Turney and Andrew C. Simmonett; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <apdx:mrcc>`, :ref:`PSI Variables <apdx:mrcc_psivar>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:2380,Usability,simpl,simply,2380,"var>`, :source:`MRCC <psi4/src/psi4/mrcc>`, :ref:`Samples <apdx:testSuitemrcc>`. |PSIfour| contains code to interface to the MRCC program of M. K\ |a_acute|\ llay; and J. Gauss. The license and source code of the MRCC program must be; obtained from Mih\ |a_acute|\ ly K\ |a_acute|\ llay (`https://www.mrcc.hu/ <https://www.mrcc.hu/>`_). Installation; ~~~~~~~~~~~~. Follow the instructions provided with the source to build the MRCC programs.; To be used by |PSIfour|, ensure that the program binary (``dmrcc``) can be; found in your :envvar:`PATH`. If |PSIfour| is unable to execute the binary, an; error will be reported. Running MRCC; ~~~~~~~~~~~~. MRCC can be invoked in similar fashion as other theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table belo",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3033,Usability,simpl,simply,3033," theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also sup",MatchSource.DOCS,doc/sphinxman/source/mrcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:1835,Energy Efficiency,energy,energy,1835,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:1944,Energy Efficiency,energy,energy,1944,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2180,Energy Efficiency,energy,energy,2180,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2320,Energy Efficiency,energy,energy,2320,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2353,Energy Efficiency,energy,energy,2353,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2084,Performance,optimiz,optimization,2084,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst:2491,Usability,undo,undoc-members,2491,"ut WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BSSE. .. index::; triple: setting; keywords; cp; triple: setting; keywords; vmfc; single: counterpoise correction. .. _`sec:cp()`:. Basis Set Superposition Corrections; ===================================. .. codeauthor:: Daniel G. A. Smith. .. autofunction:: psi4.driver.driver_nbody.nbody(func, method_string [, molecule, bsse_type, max_nbody, ptype, return_total_data]). The nbody function computes counterpoise-corrected (CP), non-CP (noCP), and Valiron-Mayer Function Counterpoise (VMFC) interaction energies for complexes composed of arbitrary numbers of monomers. **Examples :** ::. # Counterpoise corrected CCSD(T) energies for the Helium dimer; molecule mol {; He; --; He 1 3; }; # Calculate interaction energies only (skips monomers in monomer basis):; energy('CCSD(T)', bsse_type='cp'); # Calculate interaction and total energies, return interaction energies:; energy('CCSD(T)', bsse_type=['cp','nocp']); # Calculate and return counterpoise-corrected gradient; # Useful for e.g. CP-corrected geometry optimization; gradient('CCSD(T)', bsse_type='cp', return_total_data=True). # noCP, VMFC, and CP energy for a helium cluster, limited at 3 bodies; molecule mol {; He 0 0 0; --; He 0 0 4; --; He 0 4 0; --; He 4 0 0; }. # Returns the nocp energy as its first in the list; energy('CCSD(T)', bsse_type=['nocp', 'cp', 'vmfc'], max_nbody=3). API; ---. .. autoclass:: psi4.driver.driver_nbody.BsseEnum; :members:; :undoc-members:. .. autopydantic_model:: psi4.driver.driver_nbody.ManyBodyComputer. ",MatchSource.DOCS,doc/sphinxman/source/nbody.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/nbody.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:1925,Availability,toler,tolerance,1925,"CENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Notes on Options; ================. .. note:: The options referred to in the :ref:`sec:methods` section below; and indexed in :ref:`apdx:options_c_module` are placed in ``set`` blocks as; described in :ref:`sec:jobControl`, not as arguments to a Python function; (like ``energy()``). .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:1332,Energy Efficiency,energy,energy,1332,"ed in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Notes on Options; ================. .. note:: The options referred to in the :ref:`sec:methods` section below; and indexed in :ref:`apdx:options_c_module` are placed in ``set`` blocks as; described in :ref:`sec:jobControl`, not as arguments to a Python function; (like ``energy()``). .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_conve",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:2151,Energy Efficiency,energy,energy,2151,"in :ref:`apdx:options_c_module` are placed in ``set`` blocks as; described in :ref:`sec:jobControl`, not as arguments to a Python function; (like ``energy()``). .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:3003,Energy Efficiency,energy,energy,3003," and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited state method are all likely to scramble root numberings. ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:3119,Integrability,interface,interface,3119," and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited state method are all likely to scramble root numberings. ",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:2411,Security,access,access,2411,"to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited sta",MatchSource.DOCS,doc/sphinxman/source/notes_c.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:1260,Energy Efficiency,energy,energy,1260," # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:1290,Energy Efficiency,energy,energy,1290,".. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:1447,Energy Efficiency,energy,energy,1447," GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2``",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2262,Energy Efficiency,energy,energy,2262," Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2746,Energy Efficiency,energy,energy,2746,":psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; :py:class:`~psi4.core.Molecule` object. ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2882,Integrability,wrap,wrapped,2882,":psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; :py:class:`~psi4.core.Molecule` object. ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:3267,Integrability,wrap,wrapped,3267,":psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is a; :py:class:`~psi4.core.Molecule` object. ",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2182,Performance,optimiz,optimize,2182,"nly necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this",MatchSource.DOCS,doc/sphinxman/source/notes_py.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:2551,Availability,error,errors,2551,"brid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_ma",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:3770,Availability,error,error,3770," psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfour| data objects to NumPy arrays. .. autofunction:: psi4.driver.p4util.numpy_helper.array_to_matrix. Matrix to Array; ~~~~~~~~~~~~~~~; A general function that converts NumPy arrays to |PSIfour| data objects. .. autofunction:: psi4.driver.p4util.numpy_helper._to_array. ",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:2177,Integrability,interface,interface,2177," codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multip",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:2930,Security,access,access,2930," = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfo",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:3611,Security,access,accessor,3611," psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfour| data objects to NumPy arrays. .. autofunction:: psi4.driver.p4util.numpy_helper.array_to_matrix. Matrix to Array; ~~~~~~~~~~~~~~~; A general function that converts NumPy arrays to |PSIfour| data objects. .. autofunction:: psi4.driver.p4util.numpy_helper._to_array. ",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:3682,Security,access,accessor,3682," psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> numpy_mat_view[:] = 1; ; >>> print(np.array(mat)); [[ 1. 1. 1.]; [ 1. 1. 1.]; [ 1. 1. 1.]]. Secondly, these objects have a ``.np`` attribute for easy access to the underlying data::. >>> mat.np[:] = 1. this operation is identical to the above. |PSIfour| Data Objects with Irreps; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| data objects natively support multiple :ref:`irreducible representations; <sec:symmetry>`; which is quite useful for Quantum Chemistry. However, this is not fundamental; to NumPy and some work around are required to natively support these; operations. Take the following irreped Matrix::. >>> dim = psi4.core.Dimension.from_list([1, 2, 3]); >>> irreped_mat = psi4.core.Matrix(""New Matrix"", dim, dim). # Create a list of Psi4 arrays; >>> list_of_arrays = irreped_mat.to_array(). # Or, use the .nph irreped accessor; >>> irreped_mat.nph[0][:] = 1. Where ``.nph`` is the irreped accessor form. If ``.np`` or ``np.array`` are; called on irreped Matrices or Vectors an error will be thrown; however, the; irreped form is always valid for non-irreped matrices. Array to Matrix; ~~~~~~~~~~~~~~~; A general function that converts |PSIfour| data objects to NumPy arrays. .. autofunction:: psi4.driver.p4util.numpy_helper.array_to_matrix. Matrix to Array; ~~~~~~~~~~~~~~~; A general function that converts NumPy arrays to |PSIfour| data objects. .. autofunction:: psi4.driver.p4util.numpy_helper._to_array. ",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst:1762,Usability,simpl,simple,1762,"uld have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; NumPy. .. _`sec:numpy`:. Interface to NumPy; ==================. .. codeauthor:: Daniel G. A. Smith; .. sectionauthor:: Daniel G. A. Smith. *Module:* :source:`psi4/driver/p4util/numpy_helper.py`. Basics; ~~~~~~. Converting between the |PSIfour| Data classes and a NumPy array is easy through; various helper functions as detailed in this section. A quick overview NumPy; functionality can be found `here; <https://numpy.org/doc/stable/user/quickstart.html>`_. In addition,; numerous example of hybrid NumPy and Psi4 can be found at the `Psi4Numpy; project <https://github.com/psi4/psi4numpy>`_. Currently only the Matrix; and Vector objects support NumPy interfacing. Let us begin with a simple; conversion from these objects to a NumPy array::. >>> import psi4; >>> import numpy as np. # Build the Psi4 data objects; >>> mat = psi4.core.Matrix(3, 3) ; >>> vec = psi4.core.Vector(3). # Convert to a NumPy array; >>> numpy_mat = np.array(mat); >>> numpy_vec = np.array(vec). Here the data is copied into new NumPy arrays. NumPy arrays can be converted; back to |PSIfour| objects using the ``from_array`` interface::. >>> new_mat = psi4.core.Matrix.from_array(mat); >>> new_vec = psi4.core.Vector.from_array(vec). NumPy Views; ~~~~~~~~~~~. Copying the data between NumPy and Psi4 objects can lead to excessive data; movement and convoluted code. Here we introduce the idea of ""Views"" where the; same data can be viewed by multiple objects. However, this can lead to very; subtle errors if used incorrectly and care needs to be taken when using these; views. Views can be created in two ways::. >>> numpy_mat_view = np.asarray(mat). # Access the NumPy object and set all values to 1 through broadcasting; >>> ",MatchSource.DOCS,doc/sphinxman/source/numpy.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/numpy.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11384,Availability,avail,available,11384," and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+=",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:3229,Energy Efficiency,energy,energy,3229,"y (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; trip",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4379,Energy Efficiency,energy,energy,4379," than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automaticall",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4601,Energy Efficiency,reduce,reduce,4601,"ecome unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`O",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5272,Energy Efficiency,efficient,efficient,5272,"e corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitar",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:7160,Energy Efficiency,energy,energy,7160,"ya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q} \\; \hat{E}_{pq}^{-} &= \hat{E}_{pq} \ - \ \hat{E}_{qp} \\; {\bf K} &= Skew({\bf \kappa}) . The effect of the orbital rotations on the MO coefficients can be written as. .. math::; {\bf C({\bf \kappa})} = {\bf C^{(0)}} \ e^{{\bf K}}. where :math:`{\bf C^{(0)}}` is the initial MO coefficient matrix and :math:`{\bf C({\bf \kappa})}` is the new; MO coefficient matrix as a function of :math:`{\bf \kappa}`.; Now, let us define a variational energy functional (Lagrangian) as a function of :math:`{\bf \kappa}`. * OMP2. .. math::; \widetilde{E}({\bf \kappa}) &= \langle 0| \hat{H}^{\kappa} | 0 \rangle \\; &+ \langle 0| \big(\hat{W}_{N}^{\kappa}\hat{T}_{2}^{(1)}\big)_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2}^{(1)} \ \big(\hat{f}_{N}^{\kappa} \hat{T}_{2}^{(1)} ; \ + \ \hat{W}_{N}^{\kappa} \big)_{c}\}_{c} | 0 \rangle; ; * OMP3. .. math::; \widetilde{E}({\bf \kappa}) &= \langle 0| \hat{H}^{\kappa} | 0 \rangle \\; &+ \langle 0| \big(\hat{W}_{N}^{\kappa}\hat{T}_{2}^{(1)}\big)_{c} | 0 \rangle ; \ + \ \langle 0| \big(\hat{W}_{N}^{\kappa}\hat{T}_{2}^{(2)}\big)_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2}^{(1)} \ \big(\hat{f}_{N}^{\kappa} \hat{T}_{2}^{(1)} ; \ + \ \hat{W}_{N}^{\kappa} \big)_{c}\}_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2}^{(1)} \ \big(\hat{f}_{N}^{\kappa} \hat{T}_{2}^{(2)} ; \ + \ \hat{W}_{N}^{\kappa}\hat{T}_{2}^{(1)} \big)_{c}\}_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2}^{(2)} \ \big(\hat{f}_",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:9105,Energy Efficiency,energy,energy,9105,"\langle 0| \{\hat{\Lambda}_{2}^{(2)} \ \big(\hat{f}_{N}^{\kappa} \hat{T}_{2}^{(1)} ; \ + \ \hat{W}_{N}^{\kappa} \big)_{c}\}_{c} | 0 \rangle ; ; * OLCCD. .. math::; \widetilde{E}({\bf \kappa}) &= \langle 0| \hat{H}^{\kappa} | 0 \rangle ; \ + \ \langle 0| \big(\hat{W}_{N}^{\kappa}\hat{T}_{2}\big)_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2} \ \big(\hat{W}_{N}^{\kappa} \ + \ \hat{H}_{N}^{\kappa}\hat{T}_{2} \big)_{c}\}_{c} | 0 \rangle. where subscript c means only connected diagrams are allowed, and ; :math:`\hat{H}^{\kappa}`, :math:`\hat{f}_{N}^{\kappa}`, and :math:`\hat{W}_{N}^{\kappa}` defined as. .. math::; \hat{H}^{\kappa} &= e^{-\hat{K}} \hat{H} e^{\hat{K}} \\; \hat{f}_{N}^{\kappa} &= e^{-\hat{K}} \hat{f}_{N}^{d} e^{\hat{K}} \\; \hat{W}_{N}^{\kappa} &= e^{-\hat{K}} \hat{W}_{N} e^{\hat{K}} . where :math:`\hat{f}_{N}`, and :math:`\hat{W}_{N}` are the one- and two-electron components of normal-ordered Hamiltonian. Then, ; first and second derivatives of the energy with respect to the :math:`{\bf \kappa}` parameter at :math:`{\bf \kappa} = 0`. .. math::; w_{pq} = \frac{\partial \widetilde{E}}{\partial \kappa_{pq}} . .. math::; A_{pq,rs} = \frac{\partial^2 \widetilde{E}}{\partial \kappa_{pq} \partial \kappa_{rs}} . Then the energy can be expanded up to second-order as follows. .. math::; \widetilde{E}^{(2)}({\bf \kappa}) = \widetilde{E}^{(0)} + {\bf \kappa^{\dagger} w} + \frac{1}{2}~{\bf \kappa^{\dagger} A \kappa}. where :math:`{\bf w}` is the MO gradient vector, :math:`{\bf \kappa}` is the MO rotation vector,; and :math:`{\bf A}` is the MO Hessian matrix. Therefore, minimizing the energy with respect to :math:`{\bf \kappa}`; yields. .. math::; {\bf \kappa} = -{\bf A^{-1}w}. This final equation corresponds to the usual Newton-Raphson step. * OREMP. The REMP hybrid perturbation theory is a constrained mixture of the |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:9375,Energy Efficiency,energy,energy,9375,"{\kappa}\hat{T}_{2}\big)_{c} | 0 \rangle \\; &+ \langle 0| \{\hat{\Lambda}_{2} \ \big(\hat{W}_{N}^{\kappa} \ + \ \hat{H}_{N}^{\kappa}\hat{T}_{2} \big)_{c}\}_{c} | 0 \rangle. where subscript c means only connected diagrams are allowed, and ; :math:`\hat{H}^{\kappa}`, :math:`\hat{f}_{N}^{\kappa}`, and :math:`\hat{W}_{N}^{\kappa}` defined as. .. math::; \hat{H}^{\kappa} &= e^{-\hat{K}} \hat{H} e^{\hat{K}} \\; \hat{f}_{N}^{\kappa} &= e^{-\hat{K}} \hat{f}_{N}^{d} e^{\hat{K}} \\; \hat{W}_{N}^{\kappa} &= e^{-\hat{K}} \hat{W}_{N} e^{\hat{K}} . where :math:`\hat{f}_{N}`, and :math:`\hat{W}_{N}` are the one- and two-electron components of normal-ordered Hamiltonian. Then, ; first and second derivatives of the energy with respect to the :math:`{\bf \kappa}` parameter at :math:`{\bf \kappa} = 0`. .. math::; w_{pq} = \frac{\partial \widetilde{E}}{\partial \kappa_{pq}} . .. math::; A_{pq,rs} = \frac{\partial^2 \widetilde{E}}{\partial \kappa_{pq} \partial \kappa_{rs}} . Then the energy can be expanded up to second-order as follows. .. math::; \widetilde{E}^{(2)}({\bf \kappa}) = \widetilde{E}^{(0)} + {\bf \kappa^{\dagger} w} + \frac{1}{2}~{\bf \kappa^{\dagger} A \kappa}. where :math:`{\bf w}` is the MO gradient vector, :math:`{\bf \kappa}` is the MO rotation vector,; and :math:`{\bf A}` is the MO Hessian matrix. Therefore, minimizing the energy with respect to :math:`{\bf \kappa}`; yields. .. math::; {\bf \kappa} = -{\bf A^{-1}w}. This final equation corresponds to the usual Newton-Raphson step. * OREMP. The REMP hybrid perturbation theory is a constrained mixture of the |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ratio is determined by the parameter :math':`A`:. .. math::; \widehat{H}^{(0)}_\text{REMP} = (1-A)\widehat{H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimiz",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:9740,Energy Efficiency,energy,energy,9740,"t{H}^{\kappa} &= e^{-\hat{K}} \hat{H} e^{\hat{K}} \\; \hat{f}_{N}^{\kappa} &= e^{-\hat{K}} \hat{f}_{N}^{d} e^{\hat{K}} \\; \hat{W}_{N}^{\kappa} &= e^{-\hat{K}} \hat{W}_{N} e^{\hat{K}} . where :math:`\hat{f}_{N}`, and :math:`\hat{W}_{N}` are the one- and two-electron components of normal-ordered Hamiltonian. Then, ; first and second derivatives of the energy with respect to the :math:`{\bf \kappa}` parameter at :math:`{\bf \kappa} = 0`. .. math::; w_{pq} = \frac{\partial \widetilde{E}}{\partial \kappa_{pq}} . .. math::; A_{pq,rs} = \frac{\partial^2 \widetilde{E}}{\partial \kappa_{pq} \partial \kappa_{rs}} . Then the energy can be expanded up to second-order as follows. .. math::; \widetilde{E}^{(2)}({\bf \kappa}) = \widetilde{E}^{(0)} + {\bf \kappa^{\dagger} w} + \frac{1}{2}~{\bf \kappa^{\dagger} A \kappa}. where :math:`{\bf w}` is the MO gradient vector, :math:`{\bf \kappa}` is the MO rotation vector,; and :math:`{\bf A}` is the MO Hessian matrix. Therefore, minimizing the energy with respect to :math:`{\bf \kappa}`; yields. .. math::; {\bf \kappa} = -{\bf A^{-1}w}. This final equation corresponds to the usual Newton-Raphson step. * OREMP. The REMP hybrid perturbation theory is a constrained mixture of the |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ratio is determined by the parameter :math':`A`:. .. math::; \widehat{H}^{(0)}_\text{REMP} = (1-A)\widehat{H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozk",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:1871,Performance,optimiz,optimized,1871,"undation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: Orbital-Optimized Methods, OMP2; single: Orbital-Optimized Methods, OMP3; single: Orbital-Optimized Methods, OMP2.5; single: Orbital-Optimized Methods, OLCCD. .. index::; pair: Orbital-Optimized Methods; theory; pair: OMP2; theory; pair: OMP3; theory; pair: OLCCD; theory. .. _`sec:occ_oo`:. OCC: Orbital-Optimized Coupled-Cluster and |MollerPlesset| Perturbation Theories; ================================================================================. .. codeauthor:: Ugur Bozkaya; .. sectionauthor:: Ugur Bozkaya. *Module:* :ref:`Keywords <apdx:occ>`, :ref:`PSI Variables <apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [She",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:1928,Performance,optimiz,optimized,1928,"undation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: Orbital-Optimized Methods, OMP2; single: Orbital-Optimized Methods, OMP3; single: Orbital-Optimized Methods, OMP2.5; single: Orbital-Optimized Methods, OLCCD. .. index::; pair: Orbital-Optimized Methods; theory; pair: OMP2; theory; pair: OMP3; theory; pair: OLCCD; theory. .. _`sec:occ_oo`:. OCC: Orbital-Optimized Coupled-Cluster and |MollerPlesset| Perturbation Theories; ================================================================================. .. codeauthor:: Ugur Bozkaya; .. sectionauthor:: Ugur Bozkaya. *Module:* :ref:`Keywords <apdx:occ>`, :ref:`PSI Variables <apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [She",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:1976,Performance,optimiz,optimized,1976,".. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: Orbital-Optimized Methods, OMP2; single: Orbital-Optimized Methods, OMP3; single: Orbital-Optimized Methods, OMP2.5; single: Orbital-Optimized Methods, OLCCD. .. index::; pair: Orbital-Optimized Methods; theory; pair: OMP2; theory; pair: OMP3; theory; pair: OLCCD; theory. .. _`sec:occ_oo`:. OCC: Orbital-Optimized Coupled-Cluster and |MollerPlesset| Perturbation Theories; ================================================================================. .. codeauthor:: Ugur Bozkaya; .. sectionauthor:: Ugur Bozkaya. *Module:* :ref:`Keywords <apdx:occ>`, :ref:`PSI Variables <apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:2588,Performance,optimiz,optimized,2588,"<apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:2790,Performance,optimiz,optimized,2790,". Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:3818,Performance,optimiz,optimized,3818,":1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In m",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:3981,Performance,perform,performance,3981,"ces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures ou",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4051,Performance,optimiz,optimized,4051,"ces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures ou",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4253,Performance,optimiz,optimized,4253," than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automaticall",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4737,Performance,optimiz,optimization,4737,"sical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized ",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4783,Performance,optimiz,optimized,4783,"sical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized ",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5049,Performance,optimiz,optimization,5049,"CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbat",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5489,Performance,optimiz,optimized,5489,"hods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q}",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5608,Performance,optimiz,optimized,5608,"hods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q}",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5730,Performance,optimiz,optimized,5730,"hods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q}",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:5853,Performance,optimiz,optimized,5853,"hods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q}",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:6029,Performance,optimiz,optimized,6029,"geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automatically, according to; :ref:`Cross-module Redundancies <table:managedmethods>`. Thus, there arise a few categories of method, each with corresponding input keywords:. * Orbital-optimized MP and CC methods with conventional integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` OCC keywords); * Orbital-optimized MP and CC methods with DF and CD integrals (:ref:`OMP Methods <sec:occ_oo_mtds>` DFOCC keywords); * Non-orbital-optimized MP and CC methods with conventional integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` OCC keywords); * Non-orbital-optimized MP and CC methods with DF and CD integrals (:ref:`MP/CC Methods <sec:occ_nonoo>` DFOCC keywords). Theory; ~~~~~~. What follows is a very basic description of orbital-optimized |MollerPlesset| perturbation; theory as implemented in |Psifour|. We will follow our previous presentations ([Bozkaya:2011:omp2]_,; [Bozkaya:2011:omp3]_, and [Bozkaya:2012:odtl]_). The orbital variations may be expressed by means of an exponential unitary operator. .. math::; \widetilde{\hat{p}}^{\dagger} &= e^{\hat{K}} \hat{p}^{\dagger} e^{-\hat{K}}\\; \widetilde{\hat{p}} &= e^{\hat{K}} \ \hat{p} \ e^{-\hat{K}} \\; | \widetilde{p} \rangle &= e^{\hat{K}} \ | p \rangle. where :math:`\hat{K}` is the orbital rotation operator. .. math::; \hat{K} &= \sum_{p,q}^{} K_{pq} \ \hat{E}_{pq} = \sum_{p>q}^{} \kappa_{pq} \ \hat{E}_{pq}^{-} \\; \hat{E}_{pq} &= \hat{p}^{\dagger} \hat{q} \\; \hat{E}_{pq}^{-} &= \hat{E}_{pq} \ - \ \hat{E}_{qp} \\; {\bf K} &= Skew({\bf \kappa}) . The effect of the orbital rotations on the MO coefficients can be written as. .. math::; {\bf C({\bf \kappa})} = {\bf C^{(0)}} \ e^{{\bf K}}. where :math:`{\bf C^{(0)}}` is the initial MO coefficient matrix and :math:`{\bf C({\b",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:10390,Performance,optimiz,optimized,10390,"({\bf \kappa}) = \widetilde{E}^{(0)} + {\bf \kappa^{\dagger} w} + \frac{1}{2}~{\bf \kappa^{\dagger} A \kappa}. where :math:`{\bf w}` is the MO gradient vector, :math:`{\bf \kappa}` is the MO rotation vector,; and :math:`{\bf A}` is the MO Hessian matrix. Therefore, minimizing the energy with respect to :math:`{\bf \kappa}`; yields. .. math::; {\bf \kappa} = -{\bf A^{-1}w}. This final equation corresponds to the usual Newton-Raphson step. * OREMP. The REMP hybrid perturbation theory is a constrained mixture of the |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ratio is determined by the parameter :math':`A`:. .. math::; \widehat{H}^{(0)}_\text{REMP} = (1-A)\widehat{H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The variou",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11023,Performance,optimiz,optimized,11023,"he |MollerPlesset| perturbation theory and the; Retaining the Excitation degree perturbation theory([Fink:2006:RE]_, [Behnle:2019:REMP]_).; The mixing ratio is determined by the parameter :math':`A`:. .. math::; \widehat{H}^{(0)}_\text{REMP} = (1-A)\widehat{H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ`",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11470,Performance,optimiz,optimized,11470,"[Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+-------------------",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12154,Performance,optimiz,optimized,12154,"with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doub",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12463,Performance,optimiz,optimized,12463,"c_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP c",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12638,Performance,optimiz,optimized,12638,"set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | scs-omp3 | Spin-Component Scaled Orbital-Optimized MP3 | RHF/UHF/ROHF/RKS/UKS | --- |; +-------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12798,Performance,optimiz,optimized,12798,"set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | scs-omp3 | Spin-Component Scaled Orbital-Optimized MP3 | RHF/UHF/ROHF/RKS/UKS | --- |; +-------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12972,Performance,optimiz,optimized,12972,"set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | scs-omp3 | Spin-Component Scaled Orbital-Optimized MP3 | RHF/UHF/ROHF/RKS/UKS | --- |; +-------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:13138,Performance,optimiz,optimized,13138,"set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doubles | E/G |; +-------------------------+---------------------------------------------------------------+-------+. .. include:: autodoc_capabilities_occ_oo.rst. .. _`table:occ_scsoo_calls`:. .. table:: Spin-Component-Scaled Orbital-Optimized MP capabilities of OCC/DFOCC modules. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | scs-omp3 | Spin-Component Scaled Orbital-Optimized MP3 | RHF/UHF/ROHF/RKS/UKS | --- |; +-------------------------+--------------------------------------------------------------+---",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:18805,Performance,optimiz,optimized,18805,"nce.rst; .. include:: /autodir_options_c/dfocc__r_convergence.rst; .. include:: /autodir_options_c/dfocc__rms_mograd_convergence.rst; .. include:: /autodir_options_c/dfocc__max_mograd_convergence.rst; .. include:: /autodir_options_c/dfocc__mo_maxiter.rst; .. include:: /autodir_options_c/dfocc__orb_opt.rst. Advanced DFOCC Keywords; ~~~~~~~~~~~~~~~~~~~~~~~. .. include:: /autodir_options_c/dfocc__opt_method.rst; .. include:: /autodir_options_c/dfocc__hess_type.rst; .. include:: /autodir_options_c/dfocc__mo_diis_num_vecs.rst; .. include:: /autodir_options_c/dfocc__orth_type.rst; .. include:: /autodir_options_c/dfocc__do_diis.rst; .. include:: /autodir_options_c/dfocc__do_level_shift.rst. .. _`sec:occ_nonoo`:. Conventional (Non-OO) Coupled-Cluster and |MollerPlesset| Perturbation Theories; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The various non-orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC non-OO; Methods <table:occ_nonoo_calls>` and detailed in Table :ref:`OCC; non-OO Capabilities <table:occ_stdsuite_nonoo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. Starting in v1.4, MP2.5 and MP3 default to the density-fit algorithm. Set |globals__mp_type| to ``CONV`` to get previous behavior. Publications resulting from the use of the non-OO CC codes should cite the following publications:. * **MP2** [Bozkaya:2011:omp2]_, [Bozkaya:2013:omp2grad]_, and [Bozkaya:2014:dfomp2grad]_. * **MP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, [Bozkaya:2013:omp3grad]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfo",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:2614,Safety,avoid,avoids,2614,"<apdx:occ_psivar>`, :source:`OCC <psi4/src/psi4/occ>`. *Module:* :ref:`Keywords <apdx:dfocc>`, :ref:`PSI Variables <apdx:dfocc_psivar>`, :source:`DFOCC <psi4/src/psi4//dfocc>`. Introduction; ~~~~~~~~~~~~. Orbital-optimized methods have several advantages over their non-optimized counterparts. ; Once the orbitals are optimized, the wave function will obey the Hellmann--Feynman theorem; for orbital rotation parameters. Therefore, there is no need for orbital response terms ; in the evaluation of analytic gradients. In other words, it is unnecessary to solve the ; first order coupled-perturbed CC and many-body perturbation theory (MBPT) equations. ; Further, computation of one-electron properties is easier because there are no response contributions to the particle ; density matrices (PDMs). Moreover, active space approximations can be readily incorporated into the CC methods ; [Krylov:2000:vod]_. Additionally, orbital-optimized coupled-cluster avoids spurious second-order ; poles in its response function, and its transition dipole moments are gauge invariant [Pedersen:1999:od]_. Another advantage is that the orbital-optimized methods do not suffer from artifactual symmetry-breaking ; instabilities [Crawford:1997:instability]_, [Sherrill:1998:od]_, [Bozkaya:2011:omp2]_, and [Bozkaya:2011:omp3]_.; Furthermore, Kurlancheek and Head-Gordon [Kurlancek:2009]_ demonstrated that first order properties such as ; forces or dipole moments are discontinuous along nuclear coordinates when such a symmetry breaking occurs. ; They also observed that although the energy appears well behaved, the MP2 method can have natural occupation ; numbers greater than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:12184,Security,access,accessible,12184,"with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+; | name | calls method | OO |; +=========================+===============================================================+=======+; | omp2 | orbital-optimized second-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp2.5 | orbital-optimized average of MP2 and MP3 | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | omp3 | orbital-optimized third-order MP perturbation theory | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | oremp2 | orbital-optimized second-order REMP hybrid PT | E/G |; +-------------------------+---------------------------------------------------------------+-------+; | olccd | orbital-optimized linear coupled cluster doub",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:20346,Security,access,accessible,20346,"may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. Starting in v1.4, MP2.5 and MP3 default to the density-fit algorithm. Set |globals__mp_type| to ``CONV`` to get previous behavior. Publications resulting from the use of the non-OO CC codes should cite the following publications:. * **MP2** [Bozkaya:2011:omp2]_, [Bozkaya:2013:omp2grad]_, and [Bozkaya:2014:dfomp2grad]_. * **MP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, [Bozkaya:2013:omp3grad]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfomp3grad]_. * **MP2.5** [Bozkaya:2011:omp3]_, [Bozkaya:2016:dfomp3]_, and [Bozkaya:2018:dfomp3grad]_. * **REMP** [Behnle:2019:REMP]_, [Behnle:2022:OREMP]_. * **LCCD** [Bozkaya:2013:ocepa]_ and [Bozkaya:2016:dfolccd]_. * **CCD** [Bozkaya:2020:dfoccd]_. * **CCSD** [Bozkaya:2016:dfccsdgrad]_. * **CCSD(T)** [Bozkaya:2017:dfccsdtgrad]_. * **CCSD(AT)** [Bozkaya:2016:dfccsdat]_. .. _`table:occ_nonoo_calls`:. .. table:: Non-OO theoretical methods accessible through OCC/DFOCC. +-------------------------+---------------------------------------------------------------+-------+-------+; | name | calls method | plain | FNO |; +=========================+===============================================================+=======+=======+; | mp2 | second-order MP perturbation theory | E/G | n/a |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp2.5 | average of MP2 and MP3 | E/G | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | mp3 | third-order MP perturbation theory | E/G | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | remp2 | second-order retaining-the-excitation-degree MP hybrid PT | E | |; +-------------------------+---------------------------------------------------------------+-------+-------+; | lccd | linear coupled cluster doubles ",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:11235,Usability,simpl,simply,11235,"H}^{(0)}_\text{RE} + A\widehat{H}^{(0)}_\text{MP}. Technically, the second order of RE corresponds to LCCD for RHF and UHF references. REMP2 and its orbital-optimized variant OREMP2; are thus straightforward to implement in a (O)LCCD program by appropriate scaling of residual vector contributions and density matrices. * **OMP2** [Bozkaya:2011:omp2]_ and [Bozkaya:2013:omp2grad]_. * **OMP3** [Bozkaya:2011:omp3]_ , [Bozkaya:2013:omp3]_, and [Bozkaya:2013:omp3grad]_. * **OMP2.5** [Bozkaya:2011:omp3]_. * **OLCCD** [Bozkaya:2013:ocepa]_. * **LCCD** [Bozkaya:2013:ocepa]_. * **OREMP2** [Behnle:2021:OREMP]_, and [Behnle:2022:OREMP]_. Convergence Problems; ~~~~~~~~~~~~~~~~~~~~. For problematic open-shell systems, we recommend to use the ROHF or DFT orbitals as an initial guess for orbital-optimized methods. Both ROHF and ; DFT orbitals may provide better initial guesses than UHF orbitals, hence convergence may be significantly speeded up with ROHF or DFT orbitals. ; In order to use ROHF orbitals, simply ``set reference rohf``. For DFT orbitals, ``set reference uks`` and ``set dft_functional b3lyp``. Of; course users can use any DFT functional available in |PSIfour|. .. _`sec:occ_oo_mtds`:. Methods; ~~~~~~~. The various orbital-optimized methods supported by the OCC/DFOCC; modules in |Psifour| are summarized in Table :ref:`OCC OO; Methods <table:occ_oo_calls>` and detailed in Table :ref:`OCC; OO Capabilities <table:occ_stdsuite_oo>`. Note that while two; separate libraries OCC (conventional integrals ``CONV``) and DFOCC; (density-fitted ``DF`` and Cholesky-decomposed ``CD``) together provide; the methods described on this page, they are controlled through one; |globals__qc_module| value ``OCC``. Without ``set qc_module occ``,; these methods may default to implementations in :ref:`other modules; <table:managedmethods>` based on efficiency considerations. .. _`table:occ_oo_calls`:. .. table:: Orbital-optimized theoretical methods accessible through OCC/DFOCC. +------------------",MatchSource.DOCS,doc/sphinxman/source/occ.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:6112,Availability,avail,available,6112,"----------+-----------------------------------------------------------------------------------+. There are two ways the computation of one-electron properties can be requested. ; Firstly, the properties can be evaluated from the last; computed one-particle density, using the following syntax::. oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). Note that it is the user's responsibility to ensure that the relaxed density; matrix is computed using the method of interest, which may require setting; additional keywords (see the method's manual section for details). The named; argument, *title*, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table above. The syntax above works well for computing properties using the SCF; wavefunction, however, may be difficult (or impossible) to use for some of the; correlated levels of theory. Alternatively, one-electron properties can be; computed using the built-in properties() function, e.g.::. properties('ccsd', properties=['dipole']). The :py:func:`~psi4.driver.properties` function provides limited functionality, but is a lot easier to; use for correlated methods. For capabilities of :py:func:`~psi4.driver.properties` see the; corresponding section of the manual. Basic Keywords; ^^^^^^^^^^^^^^. Multipole moments may be computed at any origin, which is controlled by the; global |globals__properties_origin| keyword. The keyword takes an array with; the following possible values:. .. _`table:oe_origin`:. .. table:: Allowed origin specifications. +-------------------------------+-------------------------------------------------------------------------------+; | Keyword | I",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:3683,Energy Efficiency,charge,charges,3683,"|; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular orbital extents | MO_EXTENTS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mulliken atomic charges | MULLIKEN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | L\ |o_dots|\ wdin atomic charges | LOWDIN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Wiberg bond indices | WIBERG_LOWDIN_INDICES | Uses (L\ |o_dots|\ wdin) symmetrically orthogonalized orbitals |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mayer bond indices | MAYER_INDICES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Natural orbital occupations | NO_OCCUPATIONS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Stockholder Atomic Multipoles | MBIS_CHARGES | Generates atomic charges, dipoles, etc. See :ref:`sec:oeprop_mbis` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Hirshfeld volume ratios | MBIS_VOLUME_RATIOS | Generate the A",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:3890,Energy Efficiency,charge,charges,3890,"|; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular orbital extents | MO_EXTENTS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mulliken atomic charges | MULLIKEN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | L\ |o_dots|\ wdin atomic charges | LOWDIN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Wiberg bond indices | WIBERG_LOWDIN_INDICES | Uses (L\ |o_dots|\ wdin) symmetrically orthogonalized orbitals |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mayer bond indices | MAYER_INDICES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Natural orbital occupations | NO_OCCUPATIONS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Stockholder Atomic Multipoles | MBIS_CHARGES | Generates atomic charges, dipoles, etc. See :ref:`sec:oeprop_mbis` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Hirshfeld volume ratios | MBIS_VOLUME_RATIOS | Generate the A",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:4786,Energy Efficiency,charge,charges,4786,"|; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular orbital extents | MO_EXTENTS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mulliken atomic charges | MULLIKEN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | L\ |o_dots|\ wdin atomic charges | LOWDIN_CHARGES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Wiberg bond indices | WIBERG_LOWDIN_INDICES | Uses (L\ |o_dots|\ wdin) symmetrically orthogonalized orbitals |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mayer bond indices | MAYER_INDICES | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Natural orbital occupations | NO_OCCUPATIONS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Stockholder Atomic Multipoles | MBIS_CHARGES | Generates atomic charges, dipoles, etc. See :ref:`sec:oeprop_mbis` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Hirshfeld volume ratios | MBIS_VOLUME_RATIOS | Generate the A",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:7697,Energy Efficiency,charge,charge,7697,"n properties() function, e.g.::. properties('ccsd', properties=['dipole']). The :py:func:`~psi4.driver.properties` function provides limited functionality, but is a lot easier to; use for correlated methods. For capabilities of :py:func:`~psi4.driver.properties` see the; corresponding section of the manual. Basic Keywords; ^^^^^^^^^^^^^^. Multipole moments may be computed at any origin, which is controlled by the; global |globals__properties_origin| keyword. The keyword takes an array with; the following possible values:. .. _`table:oe_origin`:. .. table:: Allowed origin specifications. +-------------------------------+-------------------------------------------------------------------------------+; | Keyword | Interpretation |; +===============================+===============================================================================+; | [x, y, z] | Origin is at the coordinates, in the same units as the geometry specification |; +-------------------------------+-------------------------------------------------------------------------------+; | [""COM""] | Origin is at the center of mass |; +-------------------------------+-------------------------------------------------------------------------------+; | [""NUCLEAR_CHARGE""] | Origin is at the center of nuclear charge |; +-------------------------------+-------------------------------------------------------------------------------+. .. _`sec:oeprop_grid`:. Properties evaluated on a grid; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Certain properties may be evaluated a user-specified grid points. The grid; points are completely arbitrary and are specified by providing a file called; grid.dat containing the x,y,z values separated with spaces for each point in order::. x1 y1 z1; x2 y2 z2; ..........; xn yn zn. The grid.dat file is completely free form; any number of spaces and/or newlines; between entries is permitted. The units of the coordinates in grid.dat are the; same as those used to specify the molecule's geometry, and th",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9846,Energy Efficiency,charge,charge,9846," each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is controlled by |globals__mbis_maxiter| and |globals__mbis_d_convergence|. Note ; that the density is partitioned on a molecular quadrature grid, the details of which can be; controlled with the keywords |globals__mbis_radial_points|, |globals__mbis_spherical_points|, and ; |globals__mbis_pruning_scheme|. (Associated Paper: [Verstraelen:2016]_); ",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9884,Energy Efficiency,charge,charges,9884," each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is controlled by |globals__mbis_maxiter| and |globals__mbis_d_convergence|. Note ; that the density is partitioned on a molecular quadrature grid, the details of which can be; controlled with the keywords |globals__mbis_radial_points|, |globals__mbis_spherical_points|, and ; |globals__mbis_pruning_scheme|. (Associated Paper: [Verstraelen:2016]_); ",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:2483,Modifiability,variab,variables,2483," a number of one-electron properties; summarized in the table below. . .. _`table:oe_features`:. .. table:: Current one-electron property capabilities of |PSIfour|. +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Feature | Keyword | Notes |; +====================================+=======================+===================================================================================+; | Electric dipole moment | DIPOLE | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric quadrupole moment | QUADRUPOLE | Raw (traced) moments and traceless multipoles |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | All moments up order N | MULTIPOLE(N) | Only raw (traced) moments. Sets global variables e.g. ""DIPOLE"", ""32-POLE"" |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, at nuclei | ESP_AT_NUCLEI | Sets global variables ""ESP AT CENTER n"", n = 1 to natoms |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, on grid | GRID_ESP | Generates V at each point in grid_esp.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular ",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:2736,Modifiability,variab,variables,2736,"-----------------------------------+; | Feature | Keyword | Notes |; +====================================+=======================+===================================================================================+; | Electric dipole moment | DIPOLE | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric quadrupole moment | QUADRUPOLE | Raw (traced) moments and traceless multipoles |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | All moments up order N | MULTIPOLE(N) | Only raw (traced) moments. Sets global variables e.g. ""DIPOLE"", ""32-POLE"" |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, at nuclei | ESP_AT_NUCLEI | Sets global variables ""ESP AT CENTER n"", n = 1 to natoms |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electrostatic potential, on grid | GRID_ESP | Generates V at each point in grid_esp.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Electric field, on grid | GRID_FIELD | Generates {Ex,Ey,Ez} at each point grid_field.dat. See :ref:`sec:oeprop_grid` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Molecular orbital extents | MO_EXTENTS | |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Mulliken atomic charges | MULLIKEN_CHARGES | |; +------------------------------------+-----",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:5793,Modifiability,variab,variables,5793," Generates atomic charges, dipoles, etc. See :ref:`sec:oeprop_mbis` |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+; | Hirshfeld volume ratios | MBIS_VOLUME_RATIOS | Generate the AIM to free atom volume ratios |; +------------------------------------+-----------------------+-----------------------------------------------------------------------------------+. There are two ways the computation of one-electron properties can be requested. ; Firstly, the properties can be evaluated from the last; computed one-particle density, using the following syntax::. oeprop(""MO_EXTENTS"", ""MULTIPOLE(4)"", title = ""hello!""). Note that it is the user's responsibility to ensure that the relaxed density; matrix is computed using the method of interest, which may require setting; additional keywords (see the method's manual section for details). The named; argument, *title*, is completely optional and is prepended to any; globals variables set during the computation. The unnamed arguments are the; properties to be computed. These can appear in any order, and multiple; properties may be requested, as in the example above. Note that, due to Python; syntax restrictions, the title argument must appear after the list of; properties to compute. The available properties are shown in the table above. The syntax above works well for computing properties using the SCF; wavefunction, however, may be difficult (or impossible) to use for some of the; correlated levels of theory. Alternatively, one-electron properties can be; computed using the built-in properties() function, e.g.::. properties('ccsd', properties=['dipole']). The :py:func:`~psi4.driver.properties` function provides limited functionality, but is a lot easier to; use for correlated methods. For capabilities of :py:func:`~psi4.driver.properties` see the; corresponding section of the manual. Basic Keywords; ^^^^^^^^^^^^^^. Multipole mome",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9489,Testability,test,test,9489,"units. The requested properties will be; written out in the same order as the grid point specification in grid.dat; see; the above table for the format and file name of the output. The grid may be generated in the input file using standard Python loops. By; capturing the wavefunction used to evaluate the one-electron properties, the; values at each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is c",MatchSource.DOCS,doc/sphinxman/source/oeprop.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1908,Integrability,wrap,wrapper,1908,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1100,Performance,optimiz,optimize,1100,"i4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1127,Performance,optimiz,optimization,1127,"i4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1199,Performance,optimiz,optimize,1199,"i4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1282,Performance,optimiz,optimize,1282,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1672,Performance,optimiz,optimization,1672,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1739,Performance,optimiz,optimize,1739,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1818,Performance,perform,perform,1818,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1835,Performance,optimiz,optimizations,1835,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1893,Performance,optimiz,optimize,1893,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:2039,Performance,optimiz,optimization,2039,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:2098,Performance,optimiz,optimize,2098,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst:1799,Security,access,access,1799,"file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; optimize(); pair: geometry optimization; function call; pair: gradient; function call; see: opt(); optimize(). .. _`sec:opt()`:. Geometry Optimization |w---w| :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.gradient`; ===================================================================================================. * :ref:`Psi4 Native Gradient Methods <table:grad_gen>`; * :ref:`Psi4 Native DFT Gradient Methods (excepting double-hybrids) <table:grad_gen>`; * :ref:`CFOUR Interfaced Gradient Methods <table:grad_cfour>`. For further discussion of geometry optimization, see; Sec. :ref:`sec:optking`. :py:func:`~psi4.driver.optimize` is the only command most users will ever; need to access directly to perform geometry optimizations. Behind; the scenes, :py:func:`~psi4.driver.optimize` is a wrapper that repeatedly; calls :py:func:`~psi4.driver.gradient` that computes the gradient then adds a; call to the :ref:`geometry optimization module <sec:optking>`. .. autofunction:: psi4.optimize(name [, molecule, return_wfn, func, mode, dertype, hessian_with]); :noindex:. .. autofunction:: psi4.gradient(name [, molecule, return_wfn, func, dertype]); :noindex:. ",MatchSource.DOCS,doc/sphinxman/source/opt.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/opt.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1835,Availability,avail,available,1835,"Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:7210,Availability,avail,available,7210,"ad-only; within the modules. Py-side is another matter since the driver's role is to take terse; instructions from the user and translate those into instructions to the; C++ modules, usually through manipulation of options. .. comment * Reading options C-side; .. comment ; .. comment This usually takes place within each module during options parsing,; .. comment see section [] for details. No option is modified, so this process has; .. comment no entanglement with the definition of has_changed.; .. comment ; .. comment * Setting options C-side; .. comment ; .. comment This is very rarely done (what's going on in optking?). This; .. comment document was written as background to the only case of note: PUREAM.; .. comment This option has a clearly defined default, but it can't be set in; .. comment read_options because its default depends on other options. This is a; .. comment situation common to many options (and most all array options) and is; .. comment generally handled within the module code and so is never available to; .. comment the user. Analogously, PUREAM is handled in libmints but it is never; .. comment reset. In order to preserve effective definition [a], the strategy for each; python driver function is to query for the value of any option the; function may want to change and for the current has_changed status; (presumably reflecting whether the user has changed the value, as long as; no preceding code has corrupted that definition). The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the value). .. comment options[""AO_BASIS""].has_changed(); .. comment will return false if the default value is being used, and true if the user specified this keyword in the input. .. warning:: |globals__puream| is an exception in that its value an",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:8667,Availability,avail,available,8667,"The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the value). .. comment options[""AO_BASIS""].has_changed(); .. comment will return false if the default value is being used, and true if the user specified this keyword in the input. .. warning:: |globals__puream| is an exception in that its value and; ``has_changed()`` value only reflect what the user has explicitly set.; This keyword should not be queried to find out the current; |globals__puream| state for the active basis; use instead,; ``psi4.MintsHelper().basisset().has_puream()``. Reading Options in Module; -------------------------. Handling Options in Driver; --------------------------. This section is about the scopes of options and how best to handle them in; the python driver. There are four groups of commands available.; Options from the c-side Options object are accessible in the Python driver through four sets of commands. - get . - :py:func:`psi4.core.get_global_option()`; - :py:func:`psi4.core.get_local_option()`; - :py:func:`psi4.core.get_option()`. - set . - :py:func:`psi4.core.set_global_option()`; - :py:func:`psi4.core.set_local_option()`. - has_changed . - :py:func:`psi4.core.has_global_option_changed()`; - :py:func:`psi4.core.has_local_option_changed()`; - :py:func:`psi4.core.has_option_changed()`. - revoke_changed . - :py:func:`psi4.core.revoke_global_option_changed()`; - :py:func:`psi4.core.revoke_local_option_changed()`. There's a pattern here. Setting something, either a value (set) or a; negative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of """,MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:2003,Integrability,rout,routine,2003," .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:2205,Integrability,rout,routine,2205,"=. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||VV\right>$ terms -*/; options.add_str(""AO_BASIS"", ""NONE"", ""NONE DISK DIRECT"");; }. In the above example, the following options are declared (in order):. - An integer called ``PRIN",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:7024,Integrability,depend,depends,7024,"his is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is to take terse; instructions from the user and translate those into instructions to the; C++ modules, usually through manipulation of options. .. comment * Reading options C-side; .. comment ; .. comment This usually takes place within each module during options parsing,; .. comment see section [] for details. No option is modified, so this process has; .. comment no entanglement with the definition of has_changed.; .. comment ; .. comment * Setting options C-side; .. comment ; .. comment This is very rarely done (what's going on in optking?). This; .. comment document was written as background to the only case of note: PUREAM.; .. comment This option has a clearly defined default, but it can't be set in; .. comment read_options because its default depends on other options. This is a; .. comment situation common to many options (and most all array options) and is; .. comment generally handled within the module code and so is never available to; .. comment the user. Analogously, PUREAM is handled in libmints but it is never; .. comment reset. In order to preserve effective definition [a], the strategy for each; python driver function is to query for the value of any option the; function may want to change and for the current has_changed status; (presumably reflecting whether the user has changed the value, as long as; no preceding code has corrupted that definition). The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the value). .. comment options[""AO_BASIS""].has_changed(); .. comment will retur",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1345,Modifiability,plugin,plugin,1345,"ms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do sa",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1632,Modifiability,plugin,plugin,1632,"TNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayT",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1989,Modifiability,plugin,plugins,1989," .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:2043,Modifiability,plugin,plugin,2043," .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an approximation to the fundamental vibrational frequencies -*/; options.add_double(""FREQUENCY_SCALE_FACTOR"", 1.0);; /*- The filename to which data is dumped. !expert -*/; options.add_str_i(""DATA_FILE"", ""data.dat"");; /*- The algorithm to use for the $\left<VV||",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:10579,Performance,perform,performed,10579,"ed local scope, or in the context of ""What will the; specified module use?"". .. note:: ""Global"" in the sense of the discussion has *nothing*; to do with the globals section at the top of :source:`psi4/src/read_options.cc`. That; section is just a convenient place for options and associated values; that are used by most, if not all, modules. .. comment Those options could be distributed out to; all the modules below and the globals section dissolved with no change; to psi's operation.; :source:`src/bin/psi4/read_options.cc`. That section is just a. There are two primary purposes for interacting with options in the python driver. - **Preserving User Options** (Enforcing definition [a] of has_changed). The first, less-interesting, use of retrieving user option values has; been to preserve them so that they may be restored at the end after the; procedure itself has clobbered them. By decoupling global_option and; local_option commands, this can now be performed neatly by saving at the; beginning the global and local values and the global and local; has_changed values, then restoring them at the end. Below is an example; of this procedure; don't actually do this. ::. from psi4 import core. g_user_scftype = core.get_global_option('SCF_TYPE'); l_user_scftype_scf = core.get_local_option('SCF', 'SCF_TYPE'); bg_user_scftype = core.has_global_option_changed('SCF_TYPE'); bl_user_scftype_scf = core.has_local_option_changed('SCF', 'SCF_TYPE'). g_user_wfn = core.get_global_option('WFN'); l_user_wfn = core.get_local_option('MP2', 'WFN'); bg_user_wfn = core.has_global_option_changed('WFN'); bl_user_wfn = core.has_local_option_changed('MP2', 'WFN'). # body of function; # scf_type and wfn are freely changed, LOCALLY; # core.scf() and core.mp2() are run. core.set_global_option('SCF_TYPE', g_user_scftype); if not bg_user_scftype:; core.revoke_global_option_changed('SCF_TYPE'); core.set_local_option('SCF', 'SCF_TYPE', l_user_scftype_scf); if not bl_user_scftype_scf:; core.revoke_local_opt",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1746,Security,access,accessible,1746,".. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name == ""MYMODULE""|| options.read_globals()) {; /*- The amount of information printed; to the output file -*/; options.add_int(""PRINT"", 1);; /*- Do save information to |mymodule__data_file| at the end of the computation? -*/; options.add_bool(""SAVE_INFO"", true);; /*- An array containing the number of doubly occupied orbitals per irrep ; (in :ref:`Cotton order <table:irrepOrdering>`) -*/; options.add(""DOCC"", new ArrayType());; /*- The factor by which the harmonic vibrational frequencies are multiplied to; obtain an a",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:8722,Security,access,accessible,8722,"e modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the value). .. comment options[""AO_BASIS""].has_changed(); .. comment will return false if the default value is being used, and true if the user specified this keyword in the input. .. warning:: |globals__puream| is an exception in that its value and; ``has_changed()`` value only reflect what the user has explicitly set.; This keyword should not be queried to find out the current; |globals__puream| state for the active basis; use instead,; ``psi4.MintsHelper().basisset().has_puream()``. Reading Options in Module; -------------------------. Handling Options in Driver; --------------------------. This section is about the scopes of options and how best to handle them in; the python driver. There are four groups of commands available.; Options from the c-side Options object are accessible in the Python driver through four sets of commands. - get . - :py:func:`psi4.core.get_global_option()`; - :py:func:`psi4.core.get_local_option()`; - :py:func:`psi4.core.get_option()`. - set . - :py:func:`psi4.core.set_global_option()`; - :py:func:`psi4.core.set_local_option()`. - has_changed . - :py:func:`psi4.core.has_global_option_changed()`; - :py:func:`psi4.core.has_local_option_changed()`; - :py:func:`psi4.core.has_option_changed()`. - revoke_changed . - :py:func:`psi4.core.revoke_global_option_changed()`; - :py:func:`psi4.core.revoke_local_option_changed()`. There's a pattern here. Setting something, either a value (set) or a; negative changed status (revoke_changed), can only be done for a specific; scope, either global or local to the specified module. Querying, either a; value (get) or a changed status (has_changed), can be done in the global; scope, in a specified local scope, or in the context of ""What will the; specified module use?"". .. note:: ""Global"" in the sense of th",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:1205,Usability,simpl,simplify,1205,"nding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:handlingOptions_py`:. LibOptions: globals, locals, has_changed and all that; =====================================================. To simplify parsing of options and handling of defaults, the Options class; was created. It functions in the following way:. - Each module (or plugin) declares which options it will look for in the; input: their name, type (string, int, double, array, etc.), and any; default value they take. - The input is parsed for these options, and defaults are assigned for; those keywords not specified by the user. - The c-side module or plugin can then query the Options object for the; values associated with each keyword. - The options will also be accessible py-side to the procedures that drive; the modules. Array-type options are not available in python. Declaring Options; -----------------. Each module needs to make itself known to the Options object, via a; read_options section. For plugins, this routine is provided by the user; in the plugin code. For native |PSIfour| modules, the entries need to; be appended to the read_options code in :source:`psi4/src/read_options.cc`.; An example of such a routine is. .. code-block:: cpp. if (name",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:4480,Usability,clear,clear,4480,"DATA_FILE``, with a default of ""data.dat"" and any possible value.; - A string called ``AO_BASIS`` with a default of ""NONE"", and possible values of ""NONE"", ""DISK"", or ""DIRECT"". The purpose of the ""if"" statement in the above read_options function is; the following. Suppose in an input file the user sets an option through; the construct ``set mymodule print 1`` or through a ``set mymodule {...}``; block. The first thing to happen is a call to read_options with name set; to ""MYMODULE"". (Note that all user input is converted to upper case unless a; ``add_str_i`` which should be used sparingly for files.) This; call to read_options should tell the Options object only about those; options expected by the module called ""mymodule""; this prevents overlap of; options between different modules. Notice also that there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being us",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:5269,Usability,guid,guidelines,5269,"hat there's a special comment immediately before the; declaration of each keyword. You must provide these comments for any; options you add as they will be automatically inserted into the user; manual Providing a clear description will also help you to remember what; the keywords do and how they're used. The comments must live between the; special comment delimiters. For options that most users shouldn't need,; add an expert flag to the comment. This will place these options in a; separate section of the user manual. .. code-block:: cpp. /*- comment -*/; options.add_ ...; /*- comment !expert -*/; options.add_ ... As is apparent from the examples above, comments can span multiple lines; (see ``PRINT``), can refer to other options (through hyperlinks; see; ``SAVE_INFO``), can refer to sections of the manual (through hyperlinks;; see ``DOCC``), and can contain LaTeX notation (see ``AO_BASIS``). (To get; the LaTeX subscript command, use ""@@"" instead of ""_"".). See :ref:`faq:readoptions`; for guidelines on naming options. What is *has_changed* ?; -----------------------. There are times when we need to know whether an option was provided by the; user or if the defaults are being used. For this reason, the Options; object stores a boolean *has_changed* value, in addition to the option; value itself. A clarification of definition:. - [a] has_changed DOESN'T answer ""Has option been changed by the user?""; - [b] has_changed DOESN'T answer ""Is option now different from the default?""; - [c] has_changed DOES answer ""Has option value been touched at all, by user or code?"". The above items notwithstanding, psi4 code should be written so that; *has_changed* DOES effectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is t",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst:6931,Usability,clear,clearly,6931,"ffectively mean, ""Has option been changed by the; user?"". The way to do this is to isolate and nullify any changes to; options made by the code, the difference between [a] and [c]. C-side,; there is no concern since options are essentially read-only; within the modules. Py-side is another matter since the driver's role is to take terse; instructions from the user and translate those into instructions to the; C++ modules, usually through manipulation of options. .. comment * Reading options C-side; .. comment ; .. comment This usually takes place within each module during options parsing,; .. comment see section [] for details. No option is modified, so this process has; .. comment no entanglement with the definition of has_changed.; .. comment ; .. comment * Setting options C-side; .. comment ; .. comment This is very rarely done (what's going on in optking?). This; .. comment document was written as background to the only case of note: PUREAM.; .. comment This option has a clearly defined default, but it can't be set in; .. comment read_options because its default depends on other options. This is a; .. comment situation common to many options (and most all array options) and is; .. comment generally handled within the module code and so is never available to; .. comment the user. Analogously, PUREAM is handled in libmints but it is never; .. comment reset. In order to preserve effective definition [a], the strategy for each; python driver function is to query for the value of any option the; function may want to change and for the current has_changed status; (presumably reflecting whether the user has changed the value, as long as; no preceding code has corrupted that definition). The python function; then makes its changes to the option and runs any c-side modules with; those changes. Finally, just before the function returns, the options are; reset to the user's value and has_changed status (which should now again; reflect only whether the user has changed the va",MatchSource.DOCS,doc/sphinxman/source/optionshandling.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optionshandling.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1701,Availability,redundant,redundant,1701,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1865,Availability,redundant,redundant,1865," # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole syst",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2166,Availability,redundant,redundant,2166,"Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4828,Availability,avail,available,4828," ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5002,Availability,avail,available,5002," Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second d",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5260,Availability,avail,available,5260,"energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7635,Availability,error,errors,7635,"yword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large incre",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7750,Availability,error,error,7750,"yword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large incre",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17939,Availability,robust,robustness,17939," C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking_",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18710,Availability,robust,robust,18710,"""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |o",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19025,Availability,redundant,redundant,19025,", the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19384,Availability,error,error,19384,"ry. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19990,Availability,error,error,19990,"coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementi",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:21255,Availability,avail,available,21255," somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of geometry optimization criteria available in |PSIfour|. +-----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+; | |optking__g_convergence| | Max Energy | Max Force | RMS Force | Max Disp | RMS Disp |; +=============================+============================+============================+============================+============================+============================+; | NWCHEM_LOOSE [#fd]_ | | :math:`4.5 \times 10^{-3}` | :math:`3.0 \times 10^{-3}` | :math:`5.4 \times 10^{-3}` | :math:`3.6 \times 10^{-3}` |; +-----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+; | GAU_LOOSE [#ff]_ | | :math:`2.5 \times 10^{-3}` | :math:`1.7 \times 10^{-3}` | :math:`1.0 \times 10^{-2}` | :math:`6.7 \times 10^{-3}` |; +-----------------------------+---------------------",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1793,Deployability,update,update,1793,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5241,Deployability,update,update,5241,"energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9083,Deployability,continuous,continuous,9083,"035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17912,Deployability,continuous,continuously,17912," C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking_",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4301,Energy Efficiency,energy,energy,4301,"specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Sch",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7830,Energy Efficiency,energy,energy,7830,"artesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:8454,Energy Efficiency,energy,energy,8454,"ints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a fu",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:8578,Energy Efficiency,energy,energy,8578,"lecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9062,Energy Efficiency,energy,energy,9062,"035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9460,Energy Efficiency,energy,energy,9460,"i\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for the brief description). ; For each pair of molecular fragments, a set of up to 3 reference points; are chosen on each fragment. Each reference point will be either an atom or a linear combination; of positions of atoms within that fragment. Stretches, bends, and dihedral angles between the two ; fragments will be created using these reference points. See ; :ref:`Dimer coordinate table <table:DimerFrag>` for how reference points are created.; For a set of three di",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:11108,Energy Efficiency,power,power,11108,"ts; are chosen on each fragment. Each reference point will be either an atom or a linear combination; of positions of atoms within that fragment. Stretches, bends, and dihedral angles between the two ; fragments will be created using these reference points. See ; :ref:`Dimer coordinate table <table:DimerFrag>` for how reference points are created.; For a set of three dimers A, B, and C, sets of coordinates are created between each pair:; AB, AC, and BC. Each `DimerFrag` may use different reference points. ; Creation of the intermolecular coordinates can be controlled through |optking__frag_ref_atoms| ; and |optking__interfrag_coords|. |optking__frag_ref_atoms| specifies which atoms ; (or linear combination of atoms) to use for the reference points and |optking__interfrag_coords|,; which encompasses |optking__frag_ref_atoms|, allows for constraints and labels to be added to the; intermolecular coordinates. .. note:: Manual specification of the interfragment coordinates is supported for power users,; and provides complete control of fragments' relative orientations.; Setting |optking__interfrag_mode| to `multi` should suffice in almost all cases.; :ref:`Dimer coordinate table <table:DimerFrag>`. provides the name and ordering; convention for the coordinates. * Basic multi-fragment optimization. Use automatically generated reference points. .. code-block:: none. memory 4GB ; molecule mol {; 0 1 ; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; -- ; 0 1 ; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.1143863257 0.5409035710; C -0.6240195463 -4.8153482424 2.1904642137; C -0.1646305764 -3.3031992532 3.8141619690; C 3.3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18294,Energy Efficiency,efficient,efficiently,18294," -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordina",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18524,Energy Efficiency,efficient,efficient,18524,"A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an init",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18760,Energy Efficiency,reduce,reduce,18760,"tic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:20386,Energy Efficiency,monitor,monitors,20386,"h cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of geometry optimization criteria available in |PSIfour|. +-----------------------------+----------------------------+----------------------------+----------------------------+------------------------",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:20512,Energy Efficiency,energy,energy,20512,"esian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mean-square of displacement (|optking__rms_disp_g_convergence|), ; all in internal coordinates and atomic units. Usually, these options will not ; be set directly. Primary control for geometry convergence lies with the keyword ; |optking__g_convergence| which sets the aforementioned in accordance ; with Table :ref:`Geometry Convergence <table:optkingconv>`. |; |. .. _`table:optkingconv`:. .. table:: Summary of sets of geometry optimization criteria available in |PSIfour|. +-----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+----------------------------+; | |optking__g_convergence| | Max Energy | Max Force | RMS Force | Max Disp | RMS Disp |; +=============================+============================+============================+============================+==========================",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:25776,Energy Efficiency,monitor,monitored,25776,"------------+----------------------------+. .. rubric:: Footnotes. .. [#fa] Default; .. [#fb] Baker convergence criteria are the same.; .. [#fc] Counterpart NWCHEM convergence criteria are the same.; .. [#fd] Convergence achieved when all active criteria are fulfilled.; .. [#fe] Convergence achieved when **Max Force** and one of **Max Energy** or **Max Disp** are fulfilled.; .. [#ff] Normal convergence achieved when all four criteria (**Max Force**, **RMS Force**,; **Max Disp**, and **RMS Disp**) are fulfilled. To help with flat ; potential surfaces, alternate convergence achieved when 100\ :math:`\times`\ *rms force* is less ; than **RMS Force** criterion.; .. [#fg] Compensates for difficulties in converging geometry optmizations of supermolecular complexes ; tightly, where large *rms disp* and *max disp* may result from flat potential surfaces even when; *max force* and/or *rms force* are small. For ultimate control, specifying a value for any of the five monitored options activates that; criterium and overwrites/appends it to the criteria set by |optking__g_convergence|.; Note that this revokes the special convergence arrangements detailed in notes [#fe]_ and [#ff]_ ; and instead requires all active criteria to be fulfilled to ; achieve convergence. To avoid this revokation, turn on keyword |optking__flexible_g_convergence|. .. index::; pair: geometry optimization; output. Interface to GeomeTRIC; ^^^^^^^^^^^^^^^^^^^^^^. The GeomeTRIC optimizer developed by Wang and Song [Wang:2016:214108]_ may be used in place of; Psi4's native Optking optimizer. GeomeTRIC uses a translation-rotation-internal coordinate (TRIC); system that works well for optimizing geometries of systems containing noncovalent interactions. Use of the GeomeTRIC optimizer is specified with the ``engine`` argument to; :py:func:`~psi4.driver.optimize`. The optimization will respect the keywords |optking__g_convergence|; and |optking__geom_maxiter|. Any other GeomeTRIC-specific options (including cons",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:28754,Energy Efficiency,monitor,monitored,28754,"e' : 2.0 },; {'type' : 'angle',; 'indices' : [1, 0, 2], ; 'value' : 104.5 }]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). * Optimize the benzene/water dimer using GeomeTRIC, with the 6 carbon atoms of benzene frozen in ; place::. molecule h2o {; C 0.833 1.221 -0.504; H 1.482 2.086 -0.518; C 1.379 -0.055 -0.486; H 2.453 -0.184 -0.483; C 0.546 -1.167 -0.474; H 0.971 -2.162 -0.466; C -0.833 -1.001 -0.475; H -1.482 -1.867 -0.468; C -1.379 0.275 -0.490; H -2.453 0.404 -0.491; C -0.546 1.386 -0.506; H -0.971 2.381 -0.524; --; O 0.000 0.147 3.265; H 0.000 -0.505 2.581; H 0.000 0.965 2.790; no_com; no_reorient; }. set {; maxiter 100; g_convergence gau; }. geometric_keywords = { ; 'coordsys' : 'tric',; 'constraints' : { ; 'freeze' : [{'type' : 'xyz',; 'indices' : [0, 2, 4, 6, 8, 10]}]; } ; } . optimize('hf/cc-pvdz', engine='geometric', optimizer_keywords=geometric_keywords). Output; ^^^^^^. The progress of a geometry optimization can be monitored by grepping the output file for the; tilde character (``~``). This produces a table like the one below that shows; for each iteration the value for each of the five quantities and whether the criterion; is active and fulfilled (``*``), active and unfulfilled ( ), or inactive (``o``). ::. --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -38.91591820 -3.89e+01 6.91e-02 5.72e-02 o 1.42e-01 1.19e-01 o ~; 2 -38.92529543 -9.38e-03 6.21e-03 3.91e-03 o 2.00e-02 1.18e-02 o ~; 3 -38.92540669 -1.11e-04 4.04e-03 2.46e-03 o 3.63e-02 2.12e-02 o ~; 4 -38.92548668 -8.00e-05 2.30e-04 * 1.92e-04 o 1.99e-03 1.17e-03 o ~; 5 -38.92548698 -2.98",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:14520,Integrability,depend,depend,14520,"23155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI. # The line below specifies the reference points that will be used to construct the; # interfragment coordinates between the two fragments (called A and B).; # The format is the following:; # [[A-1], [A-2], [A-3]], [[B-1], [B-2], [B-3]]; #; # In terms of atoms within each fragment, the line below chooses, for water:; # H3 of water for the first reference point, O1 of water for the second reference point, and; # H2 of water for the third reference point.; # For benzene: the mean of the positions of all the C atoms, C2, one of the Carbon atoms,; # and C6, another one of the carbon atoms. frag_ref_atoms [; [[3], [1], [2]], [[4, 5, 6, 7, 8, 9], [5], [9]]; ] ; }; ; optimize(""mp2""). For even greater control, a dictionary can be passed to |optking__interfrag_coords|. The coordinates that are created between two dimers depend upon the number of atoms present; The fragments `A` and `B` have up to 3 reference atoms each as shown in; :ref:`Dimer coordinate table <table:DimerFrag>`.; The interfragment coordinates are named and can be frozen according to their names as show in ; example below. For specifying reference points, use 1 based indexing. . .. _`table:DimerFrag`:. .. table:: Dimer coordinates. +---------+----------+-------------+---------------------------------+; | name | type | atom-labels | present, if |; +=========+==========+=============+=================================+; | RAB | distance | A0-B0 | always | ; +---------+----------+-------------+---------------------------------+; | theta_A | angle | A1-A0-B0 | A has > 1 atom |; +---------+----------+-------------+---------------------------------+; | theta_B | angle | A0-B0-B1 | B has > 1 atom |; +---------+----------+-------------+---------------------------------+; | tau | dihedral | A1-A0-B0-B1 | A and B have > 1 atom |; +---------+----------+-------------+---------------------------------+",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1090,Performance,optimiz,optimization,1090,"age; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. H",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1104,Performance,optimiz,optimization,1104,"age; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. H",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1438,Performance,optimiz,optimizations,1438,"d by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the u",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:2673,Performance,optimiz,optimizer,2673,"inimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian representation of the system. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_conv",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:3737,Performance,optimiz,optimization,3737,"stem. .. _DimerIntro:. Presently, by default, separate fragments are bonded by the; nearest atoms, and the whole system is treated as if it were part of one; molecule. However, with the option |optking__frag_mode|, fragments; may instead be related by a minimal set of interfragment coordinates defined by; reference points within each fragment. The reference points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4090,Performance,optimiz,optimize,4090,"e points can be atomic; positions (current default) or linear combinations of atomic positions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:19",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4187,Performance,optimiz,optimize,4187,"itions; (automatic use of principal axes is under development).; These `dimer coordinates` can be directly specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |op",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4276,Performance,optimiz,optimize,4276,"specified through |optking__interfrag_coords|); See `here <DimerSection_>` for two examples of their use. Basic Keywords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Sch",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4402,Performance,optimiz,optimize,4402,"ords; ^^^^^^^^^^^^^^. .. include:: autodir_options_c/optking__opt_type.rst; .. include:: autodir_options_c/optking__step_type.rst; .. include:: autodir_options_c/optking__geom_maxiter.rst; .. include:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using t",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4596,Performance,optimiz,optimize,4596,"lude:: autodir_options_c/optking__g_convergence.rst; .. include:: autodir_options_c/optking__full_hess_every.rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition State",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:4715,Performance,optimiz,optimize,4715,".rst. .. index:: geometry optimization; minima; .. _`sec:optkingExamples`:. Optimizing Minima; ^^^^^^^^^^^^^^^^^. First, define the molecule and basis in the input. ::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 105.0; }; ; set basis dz. Then the following are examples of various types of calculations that can be completed. * Optimize a geometry using default methods (RFO step)::. optimize('scf'). * Optimize using Newton-Raphson steps instead of RFO steps::. set step_type nr; optimize('scf'). * Optimize using finite differences of energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5389,Performance,optimiz,optimization,5389,"1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a froze",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5478,Performance,optimiz,optimization,5478,"ep_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5525,Performance,optimiz,optimization,5525,"ep_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5561,Performance,optimiz,optimization,5561,"ep_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5699,Performance,optimiz,optimize,5699,"rt optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesi",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5958,Performance,optimiz,optimize,5958,"wise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_li",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:6290,Performance,optimiz,optimize,6290,"e; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the froz",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:6560,Performance,optimiz,optimize,6560,"C; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Fr",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7039,Performance,optimiz,optimize,7039,"then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type irc; geom_maxiter 50; }. frequencies('scf'); optimize('scf'). Constrained Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^; * Optimize a geometry (HOOH) at a frozen dihedral angle of 90 degrees. ::. molecule {; H; O 1 0.90; O 2 1.40 1 100.0; H 3 0.90 2 100.0 1 90.0; }. set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; optimize('scf'). * To instead freeze the two O-H bond distances ::. set optking {; frozen_distance = (""; 1 2; 3 4; ""); }. For bends, the corresponding keyword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7848,Performance,optimiz,optimizing,7848,"artesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:8390,Performance,optimiz,optimize,8390,"dent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 1",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9398,Performance,optimiz,optimize,9398,"cf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for the brief description). ; For each pair of molecular fragments, a set of up to 3 reference points; are chosen on each fragment. Each reference point will be either an atom or a linear combination; of positions of atoms within that fragment. Stretches, bends, and dihedral angles between the two ; fragments will be created using these reference points. See ; :ref:`Dimer coordinate table <",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:11408,Performance,optimiz,optimization,11408,"table:DimerFrag>` for how reference points are created.; For a set of three dimers A, B, and C, sets of coordinates are created between each pair:; AB, AC, and BC. Each `DimerFrag` may use different reference points. ; Creation of the intermolecular coordinates can be controlled through |optking__frag_ref_atoms| ; and |optking__interfrag_coords|. |optking__frag_ref_atoms| specifies which atoms ; (or linear combination of atoms) to use for the reference points and |optking__interfrag_coords|,; which encompasses |optking__frag_ref_atoms|, allows for constraints and labels to be added to the; intermolecular coordinates. .. note:: Manual specification of the interfragment coordinates is supported for power users,; and provides complete control of fragments' relative orientations.; Setting |optking__interfrag_mode| to `multi` should suffice in almost all cases.; :ref:`Dimer coordinate table <table:DimerFrag>`. provides the name and ordering; convention for the coordinates. * Basic multi-fragment optimization. Use automatically generated reference points. .. code-block:: none. memory 4GB ; molecule mol {; 0 1 ; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; -- ; 0 1 ; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.1143863257 0.5409035710; C -0.6240195463 -4.8153482424 2.1904642137; C -0.1646305764 -3.3031992532 3.8141619690; C 3.3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4.9209603634 -1.7288723155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI; }; ; optimize(""mp2""). .. Warning:: The molecule input for psi4 has no effect upon optking, expect to provide Cartesian; coordinates. Specifying indepe",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:12258,Performance,optimiz,optimize,12258,"`multi` should suffice in almost all cases.; :ref:`Dimer coordinate table <table:DimerFrag>`. provides the name and ordering; convention for the coordinates. * Basic multi-fragment optimization. Use automatically generated reference points. .. code-block:: none. memory 4GB ; molecule mol {; 0 1 ; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; -- ; 0 1 ; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.1143863257 0.5409035710; C -0.6240195463 -4.8153482424 2.1904642137; C -0.1646305764 -3.3031992532 3.8141619690; C 3.3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4.9209603634 -1.7288723155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI; }; ; optimize(""mp2""). .. Warning:: The molecule input for psi4 has no effect upon optking, expect to provide Cartesian; coordinates. Specifying independent fragments with the `--` seperator, will not trigger ; optking to add specific interfragment coordinates. Use |optking__frag_mode| `multi`. * Specify the reference points to use for coordinates via |optking__frag_ref_atoms|.; Each list corresponds to a fragment. A list of indices denotes a linear combination; of the atoms. In this case, the first reference point for the second fragment is the center; of the benzene ring. Indexing starts at 1, so the second fragment in this example starts at index 4. .. code-block:: none. memory 4GB ; molecule mol {; 0 1 ; O -0.5026452583 -0.9681078610 -0.4772692868; H -2.3292990446 -1.1611084524 -0.4772692868; H -0.8887241813 0.8340933116 -0.4772692868; -- ; 0 1 ; C 0.8853463281 -5.2235996493 0.5504918473; C 1.8139169342 -2.1992967152 3.8040686146; C 2.8624456357 -4.11438632",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:14366,Performance,optimiz,optimize,14366,".3271056135 -2.6064153737 2.1669340785; H 0.5244823836 -6.4459192939 -0.7478283184; H 4.0823309159 -4.4449979205 -0.7680411190; H -2.2074914566 -5.7109913627 2.2110247636; H -1.3768100495 -2.9846751653 5.1327625515; H 4.9209603634 -1.7288723155 2.1638694922; H 2.1923374156 -0.9964630692 5.1155773223; nocom; units au; }; ; set {; basis 6-31+G ; frag_mode MULTI. # The line below specifies the reference points that will be used to construct the; # interfragment coordinates between the two fragments (called A and B).; # The format is the following:; # [[A-1], [A-2], [A-3]], [[B-1], [B-2], [B-3]]; #; # In terms of atoms within each fragment, the line below chooses, for water:; # H3 of water for the first reference point, O1 of water for the second reference point, and; # H2 of water for the third reference point.; # For benzene: the mean of the positions of all the C atoms, C2, one of the Carbon atoms,; # and C6, another one of the carbon atoms. frag_ref_atoms [; [[3], [1], [2]], [[4, 5, 6, 7, 8, 9], [5], [9]]; ] ; }; ; optimize(""mp2""). For even greater control, a dictionary can be passed to |optking__interfrag_coords|. The coordinates that are created between two dimers depend upon the number of atoms present; The fragments `A` and `B` have up to 3 reference atoms each as shown in; :ref:`Dimer coordinate table <table:DimerFrag>`.; The interfragment coordinates are named and can be frozen according to their names as show in ; example below. For specifying reference points, use 1 based indexing. . .. _`table:DimerFrag`:. .. table:: Dimer coordinates. +---------+----------+-------------+---------------------------------+; | name | type | atom-labels | present, if |; +=========+==========+=============+=================================+; | RAB | distance | A0-B0 | always | ; +---------+----------+-------------+---------------------------------+; | theta_A | angle | A1-A0-B0 | A has > 1 atom |; +---------+----------+-------------+---------------------------------+; | theta_B ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:15875,Performance,optimiz,optimization,15875,"----------------------+; | name | type | atom-labels | present, if |; +=========+==========+=============+=================================+; | RAB | distance | A0-B0 | always | ; +---------+----------+-------------+---------------------------------+; | theta_A | angle | A1-A0-B0 | A has > 1 atom |; +---------+----------+-------------+---------------------------------+; | theta_B | angle | A0-B0-B1 | B has > 1 atom |; +---------+----------+-------------+---------------------------------+; | tau | dihedral | A1-A0-B0-B1 | A and B have > 1 atom |; +---------+----------+-------------+---------------------------------+; | phi_A | dihedral | A2-A1-A0-B0 | A has > 2 atoms. Is not linear |; +---------+----------+-------------+---------------------------------+; | phi_B | dihedral | A0-B0-B1-B2 | B has > 2 atoms. Is not linear |; +---------+----------+-------------+---------------------------------+. * A constrained optimization is performed where the orientation of the two fragments is fixed but; the distance between the fragments and all intrafragment coordinates are allowed to relax. In this; example, the centers of the benzene and thiophene rings are selected for the first reference points.; The methyl groups carbon and one hydrogen are selected for the other two reference points on the; first fragments. For fragment two, two carbons of the benzene ring are chosen for the other reference points. .. code-block:: none. memory 4GB ; molecule mol {; C -1.258686 0.546935 0.436840; H -0.683650 1.200389 1.102833; C -0.699036 -0.349093 -0.396608; C -2.693370 0.550414 0.355311; H -3.336987 1.206824 0.952052; C -3.159324 -0.343127 -0.536418; H -4.199699 -0.558111 -0.805894; S -1.883829 -1.212288 -1.301525; C 0.786082 -0.656530 -0.606057; H 1.387673 -0.016033 0.048976; H 1.054892 -0.465272 -1.651226; H 0.978834 -1.708370 -0.365860; --; C -6.955593 -0.119764 -1.395442; C -6.977905 -0.135060 1.376787; C -7.111625 1.067403 -0.697024; C -6.810717 -1.314577 -0.707746; C -6.821873 -1.32",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:15891,Performance,perform,performed,15891,"----------------------+; | name | type | atom-labels | present, if |; +=========+==========+=============+=================================+; | RAB | distance | A0-B0 | always | ; +---------+----------+-------------+---------------------------------+; | theta_A | angle | A1-A0-B0 | A has > 1 atom |; +---------+----------+-------------+---------------------------------+; | theta_B | angle | A0-B0-B1 | B has > 1 atom |; +---------+----------+-------------+---------------------------------+; | tau | dihedral | A1-A0-B0-B1 | A and B have > 1 atom |; +---------+----------+-------------+---------------------------------+; | phi_A | dihedral | A2-A1-A0-B0 | A has > 2 atoms. Is not linear |; +---------+----------+-------------+---------------------------------+; | phi_B | dihedral | A0-B0-B1-B2 | B has > 2 atoms. Is not linear |; +---------+----------+-------------+---------------------------------+. * A constrained optimization is performed where the orientation of the two fragments is fixed but; the distance between the fragments and all intrafragment coordinates are allowed to relax. In this; example, the centers of the benzene and thiophene rings are selected for the first reference points.; The methyl groups carbon and one hydrogen are selected for the other two reference points on the; first fragments. For fragment two, two carbons of the benzene ring are chosen for the other reference points. .. code-block:: none. memory 4GB ; molecule mol {; C -1.258686 0.546935 0.436840; H -0.683650 1.200389 1.102833; C -0.699036 -0.349093 -0.396608; C -2.693370 0.550414 0.355311; H -3.336987 1.206824 0.952052; C -3.159324 -0.343127 -0.536418; H -4.199699 -0.558111 -0.805894; S -1.883829 -1.212288 -1.301525; C 0.786082 -0.656530 -0.606057; H 1.387673 -0.016033 0.048976; H 1.054892 -0.465272 -1.651226; H 0.978834 -1.708370 -0.365860; --; C -6.955593 -0.119764 -1.395442; C -6.977905 -0.135060 1.376787; C -7.111625 1.067403 -0.697024; C -6.810717 -1.314577 -0.707746; C -6.821873 -1.32",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17795,Performance,optimiz,optimize,17795,"--; C -6.955593 -0.119764 -1.395442; C -6.977905 -0.135060 1.376787; C -7.111625 1.067403 -0.697024; C -6.810717 -1.314577 -0.707746; C -6.821873 -1.322226 0.678369; C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward ste",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17837,Performance,optimiz,optimizations,17837,"-0.135060 1.376787; C -7.111625 1.067403 -0.697024; C -6.810717 -1.314577 -0.707746; C -6.821873 -1.322226 0.678369; C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coor",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17975,Performance,optimiz,optimizations,17975," C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking_",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18116,Performance,optimiz,optimizer,18116,"8224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule ",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18286,Performance,perform,perform,18286," -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordina",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18469,Performance,optimiz,optimization,18469,"A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an init",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19556,Performance,optimiz,optimization,19556,"s that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) t",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:19803,Performance,perform,performed,19803,"s (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordinates such ; as torsions become poorly defined when they contain near-linear bends. ; An internal error `AlgError` may be raised in such cases. Optking will avoid such; coordinates when choosing an initial coordinate system; however, they may arise in the course; of an optimization. In such cases, try restarting from the most recent geometry.; Alternatively, setting |optking__opt_coordinates| to cartesian will avoid any internal; coordinate difficulties altogether. These coordinate changes can be automatically; performed by turning |optking__dynamic_level| to 1. .. warning:: In some cases, such as the coordinate issues described above, optking will reset to maintain; a consistent history. If an error occurs in Psi4 due to |optking__geom_maxiter| being exceeded but; the final step report indicates that optking has not taken |optking__geom_maxiter| steps, such a ; reset has occured. Inspection will show that the step counter was reset to 1 somewhere in the; optimization. .. index:: ; pair: geometry optimization; convergence criteria. Convergence Criteria; ^^^^^^^^^^^^^^^^^^^^. Optking monitors five quantities to evaluate the progress of a geometry ; optimization. These are (with their keywords) the change in energy ; (|optking__max_energy_g_convergence|), the maximum element of ; the gradient (|optking__max_force_g_convergence|), the root-mean-square ; of the gradient (|optking__rms_force_g_convergence|), the maximum element; of displacement (|optking__max_disp_g_convergence|), and the ; root-mea",MatchSource.DOCS,doc/sphinxman/source/optking.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst
