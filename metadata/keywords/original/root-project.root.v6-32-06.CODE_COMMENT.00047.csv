id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:10,Performance,cache,cache,10,"// Create cache storage element",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:8,Performance,cache,cache,8,"//! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:27,Performance,cache,cache,27,"// Interpolation order for cache histograms",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:30,Deployability,integrat,integration,30,"///<! Registry for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:30,Integrability,integrat,integration,30,"///<! Registry for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:25,Deployability,integrat,integration,25,"///<! Map for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:25,Integrability,integrat,integration,25,"///<! Map for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h:27,Performance,cache,cached,27,"// Abstract base class for cached p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:58,Performance,cache,cache,58,"// Set interpolation order in RooHistFuncs that represent cache histograms",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:52,Deployability,integrat,integration,52,"// Force all observables to be offered for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:52,Integrability,integrat,integration,52,"// Force all observables to be offered for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:3,Performance,Cache,Cache,3,"// Cache management functions",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:42,Performance,cache,cache,42,"// Returns name of binning to be used for cache histogram creation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:10,Performance,cache,cache,10,"///<! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:29,Performance,cache,cache,29,"///< Interpolation order for cache histograms",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:25,Deployability,integrat,integration,25,"///<! Map for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:25,Integrability,integrat,integration,25,"///<! Map for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h:27,Performance,cache,cached,27,"// Abstract base class for cached p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h:4,Integrability,Interface,Interface,4,"/// Interface for changes of operation mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCacheElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h:18,Performance,cache,cache,18,"// Base class for cache elements",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCacheElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCacheElement.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:42,Deployability,integrat,integration,42,"// Is this l-value object safe for use as integration observable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:42,Integrability,integrat,integration,42,"// Is this l-value object safe for use as integration observable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:26,Safety,safe,safe,26,"// Is this l-value object safe for use as integration observable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:4,Security,Access,Access,4,"/// Access the map of state names to index numbers. Triggers a recomputation; /// if the shape is dirty.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:18,Integrability,depend,depends,18,"/// If a category depends on the shape of others, i.e.\ its state numbers or names depend; /// on the states of other categories, this function has to be implemented to recompute; /// _stateNames and _insertionOrder.; /// If one of these two changes, setShapeDirty() has to be called to propagate this information; /// to possible users of this category.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:83,Integrability,depend,depend,83,"/// If a category depends on the shape of others, i.e.\ its state numbers or names depend; /// on the states of other categories, this function has to be implemented to recompute; /// _stateNames and _insertionOrder.; /// If one of these two changes, setShapeDirty() has to be called to propagate this information; /// to possible users of this category.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:65,Deployability,update,updated,65,"///< Map state names to index numbers. Make sure state names are updated in recomputeShape().",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:84,Deployability,update,updated,84,"///< Keeps track in which order state numbers have been inserted. Make sure this is updated in recomputeShape().",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:68,Integrability,interface,interface,68,"///<! Map holding pointers to RooCatType instances. Only for legacy interface. Don't use if possible.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h:21,Modifiability,variab,variable,21,"// Abstract discrete variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:325,Availability,error,error,325,"// Value modifiers; ////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying the index code of the desired state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:208,Integrability,message,message,208,"// Value modifiers; ////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying the index code of the desired state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:360,Availability,error,error,360,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to state specified by another category state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \note The state name of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:183,Integrability,message,message,183,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to state specified by another category state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \note The state name of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:287,Availability,error,error,287,"////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying a state name.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:165,Integrability,message,message,165,"////////////////////////////////////////////////////////////////////////////////; /// Change category state by specifying a state name.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:359,Availability,error,error,359,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to the state name of another category.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \note The state index of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:176,Integrability,message,message,176,"////////////////////////////////////////////////////////////////////////////////; /// Change category state to the state name of another category.; /// If printError is set, a message will be printed if; /// the specified state name does not represent a valid state.; /// \note The state index of the other category is ignored.; /// \return bool to signal an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:14,Integrability,interface,interface,14,"// Binned fit interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h:29,Modifiability,variab,variable,29,"// Abstract modifiable index variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCategoryLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCategoryLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h:165,Availability,avail,available,165,"// The range casts are not used in this file, but if you want to work with; // RooFit collections you also want to have static_range_cast and; // dynamic_range_cast available without including RangeCast.h every time.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h:33,Availability,avail,available,33,"// To make ROOT::RangeStaticCast available under the name static_range_cast.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h:30,Availability,avail,available,30,"// To make ROOT::RangeDynCast available under the dynamic_range_cast.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsCollection.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:3,Performance,Load,Load,3,"// Load a given row of data",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:25,Availability,error,error,25,"/// Return the symmetric error on the current weight.; /// See also weightError(double&,double&,ErrorType) const for asymmetric errors.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:96,Availability,Error,ErrorType,96,"/// Return the symmetric error on the current weight.; /// See also weightError(double&,double&,ErrorType) const for asymmetric errors.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:128,Availability,error,errors,128,"/// Return the symmetric error on the current weight.; /// See also weightError(double&,double&,ErrorType) const for asymmetric errors.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:165,Availability,error,error,165,"/// Return the symmetric error on the current weight.; /// See also weightError(double&,double&,ErrorType) const for asymmetric errors.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:113,Availability,error,error,113,"// Dummy implementation returning zero, because not all deriving classes; // need to implement a non-zero weight error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:26,Availability,error,errors,26,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:82,Availability,Error,ErrorType,82,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:113,Availability,error,error,113,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:144,Availability,error,error,144,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:176,Availability,error,error,176,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:212,Availability,error,error,212,"/// Return the asymmetric errors on the current weight.; /// See also weightError(ErrorType) const for symmetric error.; /// \param[out] lo Low error.; /// \param[out] hi High error.; // \param[in] etype Type of error to compute. May throw if not supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:113,Availability,error,error,113,"// Dummy implementation returning zero, because not all deriving classes; // need to implement a non-zero weight error.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:38,Safety,avoid,avoid,38,"// WVE --- This needs to be public to avoid CINT problems",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:162,Safety,safe,safer,162,"/// Returns a unique ID that is different for every instantiated RooAbsData object.; /// This ID can be used whether two RooAbsData are the same object, which is safer; /// than memory address comparisons that might result in false positives when; /// memory is reused.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:27,Integrability,interface,interface,27,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:17,Performance,optimiz,optimizer,17,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:7,Security,access,access,7,"// for access into copied dataset:",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:15,Modifiability,variab,variables,15,"///<! External variables cached with this data set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h:25,Performance,cache,cached,25,"///<! External variables cached with this data set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:15,Integrability,interface,interface,15,"/// RDataFrame interface method.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:15,Integrability,interface,interface,15,"/// RDataFrame interface method. No tasks.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:15,Integrability,interface,interface,15,"/// RDataFrame interface method.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:13,Modifiability,variab,variables,13,"// Number of variables in dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:13,Modifiability,variab,variables,13,"// Number of variables in dataframe",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:710,Modifiability,variab,variables,710,"// namespace ROOT; /// This is a helper for an RDataFrame action, which fills RooFit data classes.; ///; /// \tparam DataSet_t Either RooDataSet or RooDataHist.; ///; /// To construct RooDataSet / RooDataHist within RDataFrame; /// - Construct one of the two action helpers RooDataSetHelper or RooDataHistHelper. Pass constructor arguments; /// to RooAbsDataHelper::RooAbsDataHelper() as for the original classes.; /// The arguments are forwarded to the actual data classes without any changes.; /// - Book the helper as an RDataFrame action. Here, the RDataFrame column types have to be passed as template; /// parameters.; /// - Pass the column names to the Book action. These are matched by position to the variables of the dataset.; /// If there is one more column name than variables in the dataset, the last columns values will be used as weights.; ///; /// All arguments passed to are forwarded to RooDataSet::RooDataSet() / RooDataHist::RooDataHist().; ///; /// #### Usage example:; /// ```; /// RooRealVar x(""x"", ""x"", -5., 5.);; /// RooRealVar y(""y"", ""y"", -50., 50.);; /// auto myDataSet = rdataframe.Book<double, double>(; /// RooDataSetHelper{""dataset"", // Name (directly forwarded to RooDataSet::RooDataSet()); /// ""Title of dataset"", // Title ( ~ "" ~ ); /// RooArgSet(x, y) }, // Variables to create in dataset; /// {""x"", ""y"", ""weight""} // Column names from RDataFrame; /// // (this example uses an additional column for the weight); /// );; ///; /// ```; /// \warning Variables in the dataset and columns in RDataFrame are **matched by position, not by name**.; /// This enables the easy exchanging of columns that should be filled into the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:779,Modifiability,variab,variables,779,"// namespace ROOT; /// This is a helper for an RDataFrame action, which fills RooFit data classes.; ///; /// \tparam DataSet_t Either RooDataSet or RooDataHist.; ///; /// To construct RooDataSet / RooDataHist within RDataFrame; /// - Construct one of the two action helpers RooDataSetHelper or RooDataHistHelper. Pass constructor arguments; /// to RooAbsDataHelper::RooAbsDataHelper() as for the original classes.; /// The arguments are forwarded to the actual data classes without any changes.; /// - Book the helper as an RDataFrame action. Here, the RDataFrame column types have to be passed as template; /// parameters.; /// - Pass the column names to the Book action. These are matched by position to the variables of the dataset.; /// If there is one more column name than variables in the dataset, the last columns values will be used as weights.; ///; /// All arguments passed to are forwarded to RooDataSet::RooDataSet() / RooDataHist::RooDataHist().; ///; /// #### Usage example:; /// ```; /// RooRealVar x(""x"", ""x"", -5., 5.);; /// RooRealVar y(""y"", ""y"", -50., 50.);; /// auto myDataSet = rdataframe.Book<double, double>(; /// RooDataSetHelper{""dataset"", // Name (directly forwarded to RooDataSet::RooDataSet()); /// ""Title of dataset"", // Title ( ~ "" ~ ); /// RooArgSet(x, y) }, // Variables to create in dataset; /// {""x"", ""y"", ""weight""} // Column names from RDataFrame; /// // (this example uses an additional column for the weight); /// );; ///; /// ```; /// \warning Variables in the dataset and columns in RDataFrame are **matched by position, not by name**.; /// This enables the easy exchanging of columns that should be filled into the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:1293,Modifiability,Variab,Variables,1293,"// namespace ROOT; /// This is a helper for an RDataFrame action, which fills RooFit data classes.; ///; /// \tparam DataSet_t Either RooDataSet or RooDataHist.; ///; /// To construct RooDataSet / RooDataHist within RDataFrame; /// - Construct one of the two action helpers RooDataSetHelper or RooDataHistHelper. Pass constructor arguments; /// to RooAbsDataHelper::RooAbsDataHelper() as for the original classes.; /// The arguments are forwarded to the actual data classes without any changes.; /// - Book the helper as an RDataFrame action. Here, the RDataFrame column types have to be passed as template; /// parameters.; /// - Pass the column names to the Book action. These are matched by position to the variables of the dataset.; /// If there is one more column name than variables in the dataset, the last columns values will be used as weights.; ///; /// All arguments passed to are forwarded to RooDataSet::RooDataSet() / RooDataHist::RooDataHist().; ///; /// #### Usage example:; /// ```; /// RooRealVar x(""x"", ""x"", -5., 5.);; /// RooRealVar y(""y"", ""y"", -50., 50.);; /// auto myDataSet = rdataframe.Book<double, double>(; /// RooDataSetHelper{""dataset"", // Name (directly forwarded to RooDataSet::RooDataSet()); /// ""Title of dataset"", // Title ( ~ "" ~ ); /// RooArgSet(x, y) }, // Variables to create in dataset; /// {""x"", ""y"", ""weight""} // Column names from RDataFrame; /// // (this example uses an additional column for the weight); /// );; ///; /// ```; /// \warning Variables in the dataset and columns in RDataFrame are **matched by position, not by name**.; /// This enables the easy exchanging of columns that should be filled into the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h:1482,Modifiability,Variab,Variables,1482,"// namespace ROOT; /// This is a helper for an RDataFrame action, which fills RooFit data classes.; ///; /// \tparam DataSet_t Either RooDataSet or RooDataHist.; ///; /// To construct RooDataSet / RooDataHist within RDataFrame; /// - Construct one of the two action helpers RooDataSetHelper or RooDataHistHelper. Pass constructor arguments; /// to RooAbsDataHelper::RooAbsDataHelper() as for the original classes.; /// The arguments are forwarded to the actual data classes without any changes.; /// - Book the helper as an RDataFrame action. Here, the RDataFrame column types have to be passed as template; /// parameters.; /// - Pass the column names to the Book action. These are matched by position to the variables of the dataset.; /// If there is one more column name than variables in the dataset, the last columns values will be used as weights.; ///; /// All arguments passed to are forwarded to RooDataSet::RooDataSet() / RooDataHist::RooDataHist().; ///; /// #### Usage example:; /// ```; /// RooRealVar x(""x"", ""x"", -5., 5.);; /// RooRealVar y(""y"", ""y"", -50., 50.);; /// auto myDataSet = rdataframe.Book<double, double>(; /// RooDataSetHelper{""dataset"", // Name (directly forwarded to RooDataSet::RooDataSet()); /// ""Title of dataset"", // Title ( ~ "" ~ ); /// RooArgSet(x, y) }, // Variables to create in dataset; /// {""x"", ""y"", ""weight""} // Column names from RDataFrame; /// // (this example uses an additional column for the weight); /// );; ///; /// ```; /// \warning Variables in the dataset and columns in RDataFrame are **matched by position, not by name**.; /// This enables the easy exchanging of columns that should be filled into the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataHelper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h:22,Integrability,rout,routines,22,"// Buffer redirection routines used in inside RooAbsOptTestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h:27,Integrability,interface,interface,27,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h:17,Performance,optimiz,optimizer,17,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h:57,Performance,load,loading,57,"///< Switch do (de)activate dirty state propagation when loading a data point",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h:3,Integrability,Interface,Interface,3,"// Interface to save current values of observables (if supported by binding implementation)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h:3,Integrability,Interface,Interface,3,"// Interface to restore observables to saved values (if supported; // by binding implementation)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h:4,Integrability,Interface,Interface,4,"/// Interface for returning an optional hint for initial sampling points when constructing a curve; /// projected on observable.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h:35,Integrability,interface,interface,35,"///< Abstract real-valued function interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h:7,Usability,clear,clear,7,"// Set/clear verbose messaging",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h:36,Modifiability,extend,extended,36,"///< Number of expected events from extended p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h:29,Performance,load,load,29,"///< Next prototype event to load according to LUT",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h:5,Modifiability,Extend,Extended,5,"///< Extended mode capabilities of p.d.f.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsHiddenReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsHiddenReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h:10,Security,access,accessor,10,"// Bypass accessor to function value that also works in hidden mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsHiddenReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h:31,Modifiability,variab,variable,31,"// Abstract hidden real-valued variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsHiddenReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsHiddenReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:7,Deployability,integrat,integrator,7,"/// Is integrator in valid state",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:7,Integrability,integrat,integrator,7,"/// Is integrator in valid state",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:8,Deployability,integrat,integrator,8,"///< Is integrator in valid state?",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:8,Integrability,integrat,integrator,8,"///< Is integrator in valid state?",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:62,Deployability,integrat,integration,62,"///< If true print number of function evaluation required for integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h:62,Integrability,integrat,integration,62,"///< If true print number of function evaluation required for integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsLValue.h:12,Modifiability,variab,variable,12,"// Abstract variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:148,Performance,perform,performed,148,"/// Method called at the end of each RooMCStudy run. If a RooDataSet is returned, it must have a length equal to; /// the number of toy experiments performed and will merged with the fitpar dataset of RooMCStudy.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:134,Performance,perform,performed,134,"/// Method called after generation of toy data sample and resetting of fit parameters to initial values and before; /// actual fit is performed. Any modifications to fit parameters will apply to next fit operation. Note that setConstant; /// flag of fit parameters are not explicitly reset by RooMCStudy, so any changes made to these flags here will persist",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:37,Performance,perform,performed,37,"/// Method called after fit has been performed.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Integrability,Interface,Interface,3,"// Interface methods to RooMCStudy objects,; // which are only functional after module has been attached to a RooMCStudy object; /// Refit model using original or specified data sample",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:86,Integrability,depend,dependents,86,"// Accessor for generator context, generator parameters, prototype data and projected dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Security,Access,Accessor,3,"// Accessor for generator context, generator parameters, prototype data and projected dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Security,Access,Accessors,3,"// Accessors for fit observables, fit model, current and initial fit parameters and NLL value; /// Return fit model observables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:52,Testability,log,log,52,"/// Return pointer to RooRealVar holding minimized -log(L) value",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:52,Deployability,configurat,configuration,52,"// Accessors for fit options, generator and MCstudy configuration flags; /// Return list of fit options provided by user",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:52,Modifiability,config,configuration,52,"// Accessors for fit options, generator and MCstudy configuration flags; /// Return list of fit options provided by user",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:3,Security,Access,Accessors,3,"// Accessors for fit options, generator and MCstudy configuration flags; /// Return list of fit options provided by user",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:12,Modifiability,extend,extended,12,"/// If true extended mode generation is requested",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h:20,Integrability,message,message,20,"/// If true verbose message in the generation step is requested",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsMCStudyModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsMCStudyModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:19,Deployability,configurat,configuration,19,"///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:44,Energy Efficiency,efficient,efficient,44,"///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:19,Modifiability,config,configuration,19,"///Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:41,Availability,error,errors,41,"/// Add a box with parameter values (and errors) to the specified frame",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:3,Deployability,Configurat,Configuration,3,"// Configuration of MC generators used for this pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:3,Modifiability,Config,Configuration,3,"// Configuration of MC generators used for this pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:3,Integrability,Interface,Interface,3,"// Interface to retrieve constraint terms on this pdf. Default implementation returns null",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:15,Modifiability,extend,extended,15,"// Support for extended maximum likelihood, switched off by default",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:38,Modifiability,extend,extended,38,"/// Returns ability of PDF to provide extended likelihood terms. Possible; /// answers are in the enumerator RooAbsPdf::ExtendMode.; /// This default implementation always returns CanNotBeExtended.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:120,Modifiability,Extend,ExtendMode,120,"/// Returns ability of PDF to provide extended likelihood terms. Possible; /// answers are in the enumerator RooAbsPdf::ExtendMode.; /// This default implementation always returns CanNotBeExtended.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:29,Modifiability,extend,extended,29,"/// If true, PDF can provide extended likelihood term.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:29,Modifiability,extend,extended,29,"/// If true PDF must provide extended likelihood term.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:66,Modifiability,extend,extended,66,"/// Return expected number of events to be used in calculation of extended; /// likelihood.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:66,Modifiability,extend,extended,66,"/// Return expected number of events to be used in calculation of extended; /// likelihood. This function should not be overridden, as it just redirects; /// to the actual virtual function but takes a RooArgSet reference instead of; /// pointer. \see expectedEvents(const RooArgSet*) const",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:75,Safety,detect,detect,75,"// Also store the unique ID of the _normSet. This makes it possible to; // detect if the pointer was invalidated.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:8,Performance,cache,cache,8,"//! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:15,Availability,error,errors,15,"///< Number of errors remaining to print",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:19,Deployability,configurat,configuration,19,"///<! MC generator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h:19,Modifiability,config,configuration,19,"///<! MC generator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h:88,Integrability,message,message,88,"// Turn off 'warning C4355: 'this' : used in base member initializer list'; //; // This message will pop up for any class that initializes member proxy objects; // Including the pragma here will automatically disable that warning message; // for all such cases",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h:230,Integrability,message,message,230,"// Turn off 'warning C4355: 'this' : used in base member initializer list'; //; // This message will pop up for any class that initializes member proxy objects; // Including the pragma here will automatically disable that warning message; // for all such cases",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h:18,Integrability,interface,interface,18,"// Abstract proxy interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:260,Integrability,interface,interfaces,260,"/// A RooAbsReal::Ref can be constructed from a `RooAbsReal&` or a `double`; /// that will be implicitly converted to a RooConstVar&. The RooAbsReal::Ref; /// can be used as a replacement for `RooAbsReal&`. With this type; /// definition, you can write RooFit interfaces that accept both RooAbsReal,; /// or simply a number that will be implicitly converted to a RooConstVar&.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:308,Usability,simpl,simply,308,"/// A RooAbsReal::Ref can be constructed from a `RooAbsReal&` or a `double`; /// that will be implicitly converted to a RooConstVar&. The RooAbsReal::Ref; /// can be used as a replacement for `RooAbsReal&`. With this type; /// definition, you can write RooFit interfaces that accept both RooAbsReal,; /// or simply a number that will be implicitly converted to a RooConstVar&.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:826,Deployability,integrat,integrated,826,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:362,Integrability,depend,depending,362,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:826,Integrability,integrat,integrated,826,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:657,Modifiability,variab,variables,657,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:782,Modifiability,variab,variables,782,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:120,Performance,cache,cached,120,"//////////////////////////////////////////////////////////////////////////////////; /// Evaluate object. Returns either cached value or triggers a recalculation.; /// The recalculation happens by calling getValV(), which in the end calls the; /// virtual evaluate() functions of the respective PDFs.; /// \param[in] normalisationSet getValV() reacts differently depending on the value of the normalisation set.; /// If the set is `nullptr`, an unnormalised value is returned.; /// \note The normalisation is arbitrary, because it is up to the implementation; /// of the PDF to e.g. leave out normalisation constants for speed reasons. The range; /// of the variables is also ignored.; ///; /// To normalise the result properly, a RooArgSet has to be passed, which contains; /// the variables to normalise over.; /// These are integrated over their current ranges to compute the normalisation constant,; /// and the unnormalised result is divided by this value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:234,Availability,down,downstream,234,"// Sometimes, the calling code uses an empty RooArgSet to request evaluation; // without normalization set instead of following the `nullptr` convention.; // To remove this ambiguity which might not always be correctly handled in; // downstream code, we set `normalisationSet` to nullptr if it is pointing; // to an empty set.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:234,Availability,down,downstream,234,"// Sometimes, the calling code uses an empty RooArgSet to request evaluation; // without normalization set instead of following the `nullptr` convention.; // To remove this ambiguity which might not always be correctly handled in; // downstream code, we set `normalisationSet` to nullptr if it is an empty set.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:25,Energy Efficiency,adapt,adaptors,25,"// Lightweight interface adaptors (caller takes ownership)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:15,Integrability,interface,interface,15,"// Lightweight interface adaptors (caller takes ownership)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:25,Modifiability,adapt,adaptors,25,"// Lightweight interface adaptors (caller takes ownership)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:14,Deployability,integrat,integration,14,"// Analytical integration support",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:14,Integrability,integrat,integration,14,"// Analytical integration support",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:77,Deployability,integrat,integration,77,"// Interface to force RooRealIntegral to offer given observable for internal integration; // even if this is deemed unsafe. This default implementation returns always false",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:3,Integrability,Interface,Interface,3,"// Interface to force RooRealIntegral to offer given observable for internal integration; // even if this is deemed unsafe. This default implementation returns always false",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:77,Integrability,integrat,integration,77,"// Interface to force RooRealIntegral to offer given observable for internal integration; // even if this is deemed unsafe. This default implementation returns always false",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:116,Safety,unsafe,unsafe,116,"// Interface to force RooRealIntegral to offer given observable for internal integration; // even if this is deemed unsafe. This default implementation returns always false",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:148,Deployability,configurat,configuration,148,"/// Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while; /// using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:178,Deployability,integrat,integration,178,"/// Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while; /// using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:178,Integrability,integrat,integration,178,"/// Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while; /// using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:148,Modifiability,config,configuration,148,"/// Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while; /// using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:86,Deployability,configurat,configuration,86,"/// Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:116,Deployability,integrat,integration,116,"/// Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:116,Integrability,integrat,integration,116,"/// Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:86,Modifiability,config,configuration,86,"/// Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:3,Performance,Optimiz,Optimized,3,"// Optimized accept/reject generator support",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:35,Availability,error,error,35,"// Return default level for MINUIT error analysis",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:14,Availability,error,error,14,"// Evaluation error logging",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:20,Testability,log,logging,20,"// Evaluation error logging",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:38,Availability,error,error,38,"/// Context to temporarily change the error logging mode as long as the context is alive.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:83,Availability,alive,alive,83,"/// Context to temporarily change the error logging mode as long as the context is alive.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:44,Testability,log,logging,44,"/// Context to temporarily change the error logging mode as long as the context is alive.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:4,Testability,Test,Tests,4,"/// Tests if the distribution is binned. Unless overridden by derived classes, this always returns false.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:39,Integrability,depend,dependent,39,"// Hook for objects with normalization-dependent parameters interpretation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:64,Deployability,integrat,integration,64,"// Support interface for subclasses to advertise their analytic integration; // and generator capabilities in their analyticalIntegral() and generateEvent(); // implementations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:11,Integrability,interface,interface,11,"// Support interface for subclasses to advertise their analytic integration; // and generator capabilities in their analyticalIntegral() and generateEvent(); // implementations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:64,Integrability,integrat,integration,64,"// Support interface for subclasses to advertise their analytic integration; // and generator capabilities in their analyticalIntegral() and generateEvent(); // implementations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:4,Integrability,Interface,Interface,4,"/// Interface function to check if given value is a valid value for this object. Returns true unless overridden.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:27,Availability,error,error,27,"// Function evaluation and error tracing",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:24,Integrability,interface,interface,24,"// Hooks for RooDataSet interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:54,Availability,error,error,54,"/// Debug version of getVal(), which is slow and does error checking.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:5,Performance,Cache,Cache,5,"///< Cache for current value of object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:21,Deployability,integrat,integration,21,"///< Force numerical integration if flag set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:21,Integrability,integrat,integration,21,"///< Force numerical integration if flag set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:11,Deployability,integrat,integrator,11,"// Numeric integrator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:22,Deployability,configurat,configuration,22,"// Numeric integrator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:11,Integrability,integrat,integrator,11,"// Numeric integrator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:22,Modifiability,config,configuration,22,"// Numeric integrator configuration specific for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:24,Modifiability,variab,variable,24,"// Abstract real-valued variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h:130,Performance,cache,cache,130,"////////////////////////////////////////////////////////////////////////////////; /// Overwrite the value stored in this object's cache.; /// This can be used to fake a computation that resulted in `value`.; /// \param[in] value Value to write.; /// \param[in] notifyClients If true, notify users of this object that its value changed.; /// This is the default.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:23,Availability,error,error,23,"// Parameter value and error accessors; /// Set the current value of the object. Needs to be overridden by implementations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:29,Security,access,accessors,29,"// Parameter value and error accessors; /// Set the current value of the object. Needs to be overridden by implementations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:46,Deployability,configurat,configuration,46,"// Get fit range limits; /// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:46,Modifiability,config,configuration,46,"// Get fit range limits; /// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:21,Deployability,configurat,configuration,21,"/// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:21,Modifiability,config,configuration,21,"/// Retrieve binning configuration with given name or default binning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:34,Modifiability,variab,variable,34,"/// Get low and high bound of the variable.; /// \param name Optional range name. If not given, the default range will be used.; /// \return A pair with [lowerBound, upperBound]",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,Modifiability,variab,variable,13,"/// Check if variable has a lower bound.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,Modifiability,variab,variable,13,"/// Check if variable has an upper bound.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:13,Modifiability,variab,variable,13,"/// Check if variable has a binning with given name.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:3,Testability,Test,Test,3,"// Test a value against our fit range",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsRealLValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsRealLValue.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:414,Integrability,interface,interface,414,"/**; \file RooAbsSelfCachedReal.h; \class RooAbsSelfCached; \ingroup Roofitcore. Abstract base class for functions whose; output is cached in terms of a histogram in all observables between; getVal() and evaluate(). For certain p.d.f.s that are very; expensive to calculate it may be beneficial to implement them as a; RooAbsSelfCached rather than a RooAbsReal/Pdf. Class; RooAbsSelfCached is designed to have its interface identical to; that of RooAbsReal/Pdf, so any p.d.f can make use of its caching; functionality by merely switching its base class. Existing; RooAbsReal/Pdf objects can also be cached a posteriori with the; RooCachedReal/Pdf wrapper function that takes any RooAbsReal/Pdf object as; input.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:647,Integrability,wrap,wrapper,647,"/**; \file RooAbsSelfCachedReal.h; \class RooAbsSelfCached; \ingroup Roofitcore. Abstract base class for functions whose; output is cached in terms of a histogram in all observables between; getVal() and evaluate(). For certain p.d.f.s that are very; expensive to calculate it may be beneficial to implement them as a; RooAbsSelfCached rather than a RooAbsReal/Pdf. Class; RooAbsSelfCached is designed to have its interface identical to; that of RooAbsReal/Pdf, so any p.d.f can make use of its caching; functionality by merely switching its base class. Existing; RooAbsReal/Pdf objects can also be cached a posteriori with the; RooCachedReal/Pdf wrapper function that takes any RooAbsReal/Pdf object as; input.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:132,Performance,cache,cached,132,"/**; \file RooAbsSelfCachedReal.h; \class RooAbsSelfCached; \ingroup Roofitcore. Abstract base class for functions whose; output is cached in terms of a histogram in all observables between; getVal() and evaluate(). For certain p.d.f.s that are very; expensive to calculate it may be beneficial to implement them as a; RooAbsSelfCached rather than a RooAbsReal/Pdf. Class; RooAbsSelfCached is designed to have its interface identical to; that of RooAbsReal/Pdf, so any p.d.f can make use of its caching; functionality by merely switching its base class. Existing; RooAbsReal/Pdf objects can also be cached a posteriori with the; RooCachedReal/Pdf wrapper function that takes any RooAbsReal/Pdf object as; input.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:599,Performance,cache,cached,599,"/**; \file RooAbsSelfCachedReal.h; \class RooAbsSelfCached; \ingroup Roofitcore. Abstract base class for functions whose; output is cached in terms of a histogram in all observables between; getVal() and evaluate(). For certain p.d.f.s that are very; expensive to calculate it may be beneficial to implement them as a; RooAbsSelfCached rather than a RooAbsReal/Pdf. Class; RooAbsSelfCached is designed to have its interface identical to; that of RooAbsReal/Pdf, so any p.d.f can make use of its caching; functionality by merely switching its base class. Existing; RooAbsReal/Pdf objects can also be cached a posteriori with the; RooCachedReal/Pdf wrapper function that takes any RooAbsReal/Pdf object as; input.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:33,Performance,cache,caches,33,"// Use own name as base name for caches",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:91,Performance,cache,cache,91,"////////////////////////////////////////////////////////////////////////////////; /// Fill cache with sampling of function as defined by the evaluate() implementation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:112,Performance,cache,cached,112,"////////////////////////////////////////////////////////////////////////////////; /// Defines observables to be cached, given a set of user defined observables; /// Returns the subset of nset that are observables this p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:129,Integrability,depend,depends,129,"////////////////////////////////////////////////////////////////////////////////; /// Defines parameters on which cache contents depends. Returns; /// subset of variables of self that is not contained in the; /// supplied nset",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:161,Modifiability,variab,variables,161,"////////////////////////////////////////////////////////////////////////////////; /// Defines parameters on which cache contents depends. Returns; /// subset of variables of self that is not contained in the; /// supplied nset",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h:114,Performance,cache,cache,114,"////////////////////////////////////////////////////////////////////////////////; /// Defines parameters on which cache contents depends. Returns; /// subset of variables of self that is not contained in the; /// supplied nset",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAbsSelfCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAbsSelfCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddGenContext.h:16,Performance,cache,cache,16,"///<! RooAddPdf cache element",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h:63,Deployability,integrat,integration,63,"// Force RooRealIntegral to offer all observables for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddition.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h:63,Integrability,integrat,integration,63,"// Force RooRealIntegral to offer all observables for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddition.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h:10,Performance,cache,cache,10,"///<! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddition.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddition.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:63,Deployability,integrat,integration,63,"// Force RooRealIntegral to offer all observables for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:63,Integrability,integrat,integration,63,"// Force RooRealIntegral to offer all observables for internal integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:11,Modifiability,extend,extended,11,"/// Return extended mode capabilities",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:41,Modifiability,extend,extended,41,"/// Return expected number of events for extended likelihood calculation, which; /// is the sum of all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:16,Performance,cache,cache,16,"///<! Transient cache with transformed values of coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:17,Performance,cache,cache,17,"///<! Manager of cache with coefficient projections and transformations",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:17,Performance,cache,cache,17,"///<! Manager of cache with integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:39,Deployability,integrat,integration,39,"///<! Registry of component analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:39,Integrability,integrat,integration,39,"///<! Registry of component analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:47,Modifiability,extend,extendable,47,"///< Flag indicating if all PDF components are extendable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h:18,Availability,error,error,18,"///<! Coefficient error counter",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:64,Deployability,integrat,integration,64,"/// Force RooRealIntegral to offer all observables for internal integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:64,Integrability,integrat,integration,64,"/// Force RooRealIntegral to offer all observables for internal integration.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:10,Modifiability,extend,extended,10,"// Return extended mode capabilities",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:41,Modifiability,extend,extended,41,"/// Return expected number of events for extended likelihood calculation, which; /// is the sum of all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:16,Performance,cache,cache,16,"///<! Transient cache with transformed values of coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:15,Performance,cache,cache,15,"//! Manager of cache with coefficient projections and transformations",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:39,Deployability,integrat,integration,39,"///<! Registry of component analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:39,Integrability,integrat,integration,39,"///<! Registry of component analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:47,Modifiability,extend,extendable,47,"///< Flag indicating if all PDF components are extendable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h:18,Availability,error,error,18,"///<! Coefficient error counter",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAddPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAddPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAICRegistry.h:27,Deployability,integrat,integration,27,"// Registry for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAICRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAICRegistry.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAICRegistry.h:27,Integrability,integrat,integration,27,"// Registry for analytical integration codes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooAICRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooAICRegistry.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:57,Availability,error,errors,57,/*NB: Making this a delegating constructor led to linker errors with MSVC*/,MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:42,Modifiability,variab,variables,42,"// Create a copy of an existing list. New variables cannot be added; // to a copied list. The variables in the copied list are independent; // of the original variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:94,Modifiability,variab,variables,94,"// Create a copy of an existing list. New variables cannot be added; // to a copied list. The variables in the copied list are independent; // of the original variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:159,Modifiability,variab,variables,159,"// Create a copy of an existing list. New variables cannot be added; // to a copied list. The variables in the copied list are independent; // of the original variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h:4,Security,Access,Access,4,"/// Access element by index.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgSet.h:57,Availability,error,errors,57,/*NB: Making this a delegating constructor led to linker errors with MSVC*/,MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgSet.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooArgSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooArgSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h:13,Integrability,interface,interface,13,"/// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinningCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h:11,Modifiability,variab,variable,11,"///< Input variable that is mapped",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinningCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h:53,Performance,perform,perform,53,"///< Name of the binning specification to be used to perform the mapping",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinningCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinningCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:14,Deployability,Integrat,Integration,14,"// Analytical Integration handling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:14,Integrability,Integrat,Integration,14,"// Analytical Integration handling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:13,Performance,optimiz,optimized,13,"// Hints for optimized brute-force sampling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:34,Deployability,integrat,integrator,34,"// Call operator for our internal integrator.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:34,Integrability,integrat,integrator,34,"// Call operator for our internal integrator.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:13,Deployability,integrat,integrator,13,"///< Default integrator precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:13,Integrability,integrat,integrator,13,"///< Default integrator precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:6,Deployability,Integrat,Integrator,6,"///<! Integrator used to sample bins.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h:6,Integrability,Integrat,Integrator,6,"///<! Integrator used to sample bins.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinSamplingPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinSamplingPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinWidthFunction.h:35,Testability,Test,Test,35,"// Plotting and binning hints; /// Test if internal RooHistFunc is binned.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBinWidthFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBinWidthFunction.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBrentRootFinder.h:20,Availability,toler,tolerance,20,"/// Set convergence tolerance parameter",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooBrentRootFinder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooBrentRootFinder.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:29,Performance,cache,cache,29,"/// Return the base name for cache objects, in this case the name of the cached p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:73,Performance,cache,cached,73,"/// Return the base name for cache objects, in this case the name of the cached p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:26,Performance,cache,cached,26,"///< Proxy to p.d.f being cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:22,Performance,cache,cached,22,"///< Observable to be cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:20,Integrability,wrap,wraps,20,"// P.d.f class that wraps another p.d.f and caches its output",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h:44,Performance,cache,caches,44,"// P.d.f class that wraps another p.d.f and caches its output",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:55,Performance,cache,cache,55,"/// If flag is true the RooHistFunc that represent the cache histogram; /// will use special boundary conditions for use with cumulative distribution; /// functions: at the lower bound the function is forced to converge at zero and the upper; /// bound is the function is forced to converge at 1.0",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:25,Performance,cache,caches,25,"/// Return base name for caches, i.e. the name of the cached function",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:54,Performance,cache,cached,54,"/// Return base name for caches, i.e. the name of the cached function",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:29,Performance,cache,cached,29,"///< Proxy to function being cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:5,Modifiability,Variab,Variables,5,"///< Variables to be cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:21,Performance,cache,cached,21,"///< Variables to be cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:49,Performance,cache,cache,49,"///< Keep an attached clone of the source in the cache for fast operation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:20,Integrability,wrap,wraps,20,"// P.d.f class that wraps another p.d.f and caches its output",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h:44,Performance,cache,caches,44,"// P.d.f class that wraps another p.d.f and caches its output",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCachedReal.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCachedReal.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,Deployability,integrat,integration,28,"/// Getter function without integration set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,Integrability,integrat,integration,28,"/// Getter function without integration set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,Deployability,integrat,integration,28,"/// Setter function without integration set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:28,Integrability,integrat,integration,28,"/// Setter function without integration set",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:19,Performance,cache,cache,19,"/// Return size of cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Integrability,Interface,Interface,4,"/// Interface function to intercept server redirects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Integrability,Interface,Interface,4,"/// Interface function to intercept cache operation mode changes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:36,Performance,cache,cache,36,"/// Interface function to intercept cache operation mode changes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Integrability,Interface,Interface,4,"/// Interface function to cache add contents to output in tree printing mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:26,Performance,cache,cache,26,"/// Interface function to cache add contents to output in tree printing mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Integrability,Interface,Interface,4,"/// Interface function to perform post-insert operations on cached object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:26,Performance,perform,perform,26,"/// Interface function to perform post-insert operations on cached object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:60,Performance,cache,cached,60,"/// Interface function to perform post-insert operations on cached object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:16,Security,access,accessed,16,"///<! Last slot accessed",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,Deployability,Integrat,Integration,20,"///<! Normalization/Integration set manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,Integrability,Integrat,Integration,20,"///<! Normalization/Integration set manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:3,Performance,Cache,Cache,3,"// Cache Manager class generic objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:27,Performance,cache,caches,27,"/// Constructor for simple caches without RooAbsArg payload. A cache; /// made with this constructor is not registered with its owner; /// and will not receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:63,Performance,cache,cache,63,"/// Constructor for simple caches without RooAbsArg payload. A cache; /// made with this constructor is not registered with its owner; /// and will not receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:201,Performance,cache,cache,201,"/// Constructor for simple caches without RooAbsArg payload. A cache; /// made with this constructor is not registered with its owner; /// and will not receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,Usability,simpl,simple,20,"/// Constructor for simple caches without RooAbsArg payload. A cache; /// made with this constructor is not registered with its owner; /// and will not receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:27,Performance,cache,caches,27,"/// Constructor for simple caches with RooAbsArg derived payload. A cache; /// made with this constructor is registered with its owner; /// and will receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:68,Performance,cache,cache,68,"/// Constructor for simple caches with RooAbsArg derived payload. A cache; /// made with this constructor is registered with its owner; /// and will receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:198,Performance,cache,cache,198,"/// Constructor for simple caches with RooAbsArg derived payload. A cache; /// made with this constructor is registered with its owner; /// and will receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:20,Usability,simpl,simple,20,"/// Constructor for simple caches with RooAbsArg derived payload. A cache; /// made with this constructor is registered with its owner; /// and will receive information on server redirects and; /// cache operation mode changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:14,Performance,cache,cache,14,"/// Clear the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Usability,Clear,Clear,4,"/// Clear the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:84,Deployability,integrat,integration,84,"/// Clear the cache payload but retain slot mapping w.r.t to; /// normalization and integration sets.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:84,Integrability,integrat,integration,84,"/// Clear the cache payload but retain slot mapping w.r.t to; /// normalization and integration sets.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:14,Performance,cache,cache,14,"/// Clear the cache payload but retain slot mapping w.r.t to; /// normalization and integration sets.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:4,Usability,Clear,Clear,4,"/// Clear the cache payload but retain slot mapping w.r.t to; /// normalization and integration sets.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:35,Performance,cache,cache,35,"/// Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:61,Performance,cache,cache,61,"//cout << ""RooCacheManager<T>::setObj()/SI increasing object cache size from "" << _maxSize << "" to "" << sterileIdx+4 << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:56,Performance,cache,cache,56,"// Allow optional post-processing of object inserted in cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:58,Performance,cache,cache,58,"//cout << ""RooCacheManager<T>::setObj() increasing object cache size from "" << _maxSize << "" to "" << _maxSize*2 << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:56,Performance,cache,cache,56,"// Allow optional post-processing of object inserted in cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:10,Performance,cache,cache,10,"// Unwire cache in case it was wired",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:65,Performance,cache,cached,65,"/// Create RooArgSet containing the objects that are both in the cached set 1; /// with a given index and an input argSet.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h:65,Performance,cache,cached,65,"/// Create RooArgSet containing the objects that are both in the cached set 2; /// with a given index and an input argSet.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:18,Usability,Clear,Clear,18,"/// \endcond; /// Clear all defined category states.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:17,Integrability,interface,interface,17,"/// \name RooFit interface; /// @{; /// Tell whether we can be stored in a dataset. Always true for RooCategory.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:28,Integrability,depend,depend,28,"/// Does our value or shape depend on any other arg? Always false for RooCategory.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:35,Integrability,depend,depend,35,"/// This category's shape does not depend on others, and does not need recomputing.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h:19,Modifiability,variab,variable,19,"// Discrete valued variable type",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h:88,Availability,error,error,88,"/// If flag is true the processing of unrecognized RooCmdArgs; /// is not considered an error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCmdConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h:5,Integrability,Depend,Dependency,5,"///< Dependency cmd list",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCmdConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h:3,Modifiability,Config,Configurable,3,"// Configurable parse of RooCmdArg objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCmdConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCmdConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:1194,Deployability,update,update,1194,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id: RooSetProxy.h,v 1.21 2007/07/13 21:24:36 wouter Exp $; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \class RooCollectionProxy; \ingroup Roofitcore; Concrete proxy for RooArgSet or RooArgList objects.; A RooCollectionProxy is the general mechanism to store a RooArgSet or RooArgList; with RooAbsArgs in a RooAbsArg.; Creating a RooCollectionProxy adds all members of the proxied RooArgSet to the proxy owners; server list (thus receiving value/shape dirty flags from it) and; registers itself with the owning class. The latter allows the; owning class to update the pointers of RooArgSet or RooArgList contents to reflect; the serverRedirect changes.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:110,Integrability,interface,interface,110,"/// Initializes this RooCollection proxy from another proxy. Should not be; /// considered part of the public interface, only to be used by IO.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:238,Integrability,synchroniz,synchronization,238,"// Assignment is deleted because it is not clear how it should behave.; // Should default assignment be used? But then, it will use the assignment; // operators of the RooFit collections, which actually don't do assignment,; // but value synchronization! Should it be re-implemented to be actual; // assignment? That would be inconsistent with the base class! So it's; // better to not support it at all.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:43,Usability,clear,clear,43,"// Assignment is deleted because it is not clear how it should behave.; // Should default assignment be used? But then, it will use the assignment; // operators of the RooFit collections, which actually don't do assignment,; // but value synchronization! Should it be re-implemented to be actual; // assignment? That would be inconsistent with the base class! So it's; // better to not support it at all.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:122,Availability,avail,available,122,"// The following function is not memory safe, because it takes ownership of var; // without moving it. It is not publicly available in the memory safe; // interfaces mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:155,Integrability,interface,interfaces,155,"// The following function is not memory safe, because it takes ownership of var; // without moving it. It is not publicly available in the memory safe; // interfaces mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:40,Safety,safe,safe,40,"// The following function is not memory safe, because it takes ownership of var; // without moving it. It is not publicly available in the memory safe; // interfaces mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h:146,Safety,safe,safe,146,"// The following function is not memory safe, because it takes ownership of var; // without moving it. It is not publicly available in the memory safe; // interfaces mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCollectionProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCollectionProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h:22,Integrability,rout,routines,22,"// Buffer redirection routines used in inside RooAbsOptTestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCompositeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h:27,Integrability,interface,interface,27,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCompositeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h:17,Performance,optimiz,optimizer,17,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCompositeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCompositeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstraintSum.h:11,Testability,log,log,11,"// sum of -log of set of RooAbsPdf representing parameter constraints",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConstraintSum.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstraintSum.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:56,Integrability,depend,depend,56,"/// Returns false, as the value of the constant doesn't depend on other objects.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConstVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:135,Availability,avail,available,135,"/// Change the value of this constant.; /// On purpose, this is not `setVal`, as this could be confused with the `setVal`; /// that is available for variables. Constants, however, should remain mostly constant.; /// This function is e.g. useful when reading the constant from a file.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConstVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h:149,Modifiability,variab,variables,149,"/// Change the value of this constant.; /// On purpose, this is not `setVal`, as this could be confused with the `setVal`; /// that is available for variables. Constants, however, should remain mostly constant.; /// This function is e.g. useful when reading the constant from a file.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConstVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConstVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h:25,Modifiability,variab,variable,25,"///< Name of convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConvGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h:17,Modifiability,variab,variable,17,"///< Convolution variable in resModel event",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConvGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h:17,Modifiability,variab,variable,17,"///< Convolution variable in PDFxTruth event",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConvGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h:17,Modifiability,variab,variable,17,"///< Convolution variable in output event",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooConvGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooConvGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCurve.h:12,Integrability,interface,interface,12,"// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCurve.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCurve.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCustomizer.h:12,Integrability,interface,interface,12,"// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCustomizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCustomizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCustomizer.h:4,Deployability,Release,Releases,4,"/// Releases ownership of list of cloned branch nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooCustomizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooCustomizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:20,Availability,error,error,20,"// Return symmetric error on current bin calculated either from Poisson statistics or from SumOfWeights",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:94,Safety,safe,safer,94,"/// Return squared weight of last bin that was requested with get().; /// \deprecated Use the safer weightSquared(std::size_t) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:169,Modifiability,variab,variable,169,"///@}; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// Structure to cache information on the histogram variable that is; /// frequently used for histogram weights retrieval.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:134,Performance,cache,cache,134,"///@}; ////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// Structure to cache information on the histogram variable that is; /// frequently used for histogram weights retrieval.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:24,Availability,error,error,24,"///<[_arrSize] Low-side error on weight array",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:25,Availability,error,error,25,"///<[_arrSize] High-side error on weight array",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:6,Performance,Cache,Cache,6,"///<! Cache for arrays of partial bin volumes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:9,Performance,cache,cache,9,"///<! Is cache sum valid? Needs to be Int_t instead of CacheSumState_t for subclasses.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h:6,Performance,Cache,Cache,6,"///<! Cache for sum of entries ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataProjBinding.h:53,Modifiability,variab,variables,53,"///< Supercategory constructed from _data's category variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataProjBinding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataProjBinding.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:36,Modifiability,variab,variable,36,"/// Returns a pointer to the weight variable (if set).",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:3,Performance,Cache,Cache,3,"// Cache copy feature is not publicly accessible",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:38,Security,access,accessible,38,"// Cache copy feature is not publicly accessible",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:25,Modifiability,variab,variable,25,"///< Vars without weight variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:23,Modifiability,variab,variable,23,"///< Pointer to weight variable (if set)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:25,Availability,error,error,25,"///<! Counter to silence error messages when filling dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h:31,Integrability,message,messages,31,"///<! Counter to silence error messages when filling dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDataSet.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDataSet.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h:15,Modifiability,variab,variable,15,"///< Container variable for NLL result on null hypothesis",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h:15,Modifiability,variab,variable,15,"///< Container variable for delta NLL",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h:15,Modifiability,variab,variable,15,"///< Container variable for NLL result with signal",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h:38,Testability,log,logL,38,"// MCStudy module to calculate Delta(-logL) significance w.r.t given null hypothesis",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDLLSignificanceMCSModule.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDouble.h:11,Integrability,interface,interface,11,"// Sorting interface ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooDouble.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooDouble.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEfficiency.h:56,Modifiability,variab,variables,56,"// Generic PDF defined by string expression and list of variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooEfficiency.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEfficiency.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEffProd.h:61,Performance,optimiz,optimized,61,"// Product operator p.d.f of (PDF x efficiency) implementing optimized generator context",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooEffProd.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEffProd.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h:13,Integrability,interface,interface,13,"/// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooEllipse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h:99,Deployability,update,updateFitRangeNorm,99,"// These methods return zero to indicate that they do not support; // this interface. See RooPlot::updateFitRangeNorm() for details.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooEllipse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h:75,Integrability,interface,interface,75,"// These methods return zero to indicate that they do not support; // this interface. See RooPlot::updateFitRangeNorm() for details.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooEllipse.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooEllipse.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h:9,Testability,assert,assert,9,"/// Soft assert function that interrupts macro execution but doesn't kill ROOT",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h:9,Safety,abort,abort,9,"/// Soft abort function that interrupts macro execution but doesn't kill ROOT",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorHandler.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:10,Availability,error,error,10,"// return error of input RooRealVar",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:7,Availability,error,error,7,"// Set error of input RooRealVar to value",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:31,Availability,error,error,31,"///< RealVar with the original error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h:41,Availability,error,error,41,"// RooAbsRealLValue representation of an error of a RooRealVar",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooErrorVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooErrorVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExpensiveObjectCache.h:52,Performance,cache,cache,52,"///< Name of RooAbsArg object that is associated to cache contents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExpensiveObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExpensiveObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExpensiveObjectCache.h:3,Performance,Cache,Cache,3,"// Cache element containing expensive object and parameter values for which object is valid",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExpensiveObjectCache.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExpensiveObjectCache.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendedTerm.h:55,Modifiability,extend,extended,55,"// Meta-p.d.f flat in all observables introducing only extended ML term",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExtendedTerm.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendedTerm.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:40,Deployability,integrat,integration,40,"/// Forward determination of analytical integration capabilities to input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExtendPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:40,Integrability,integrat,integration,40,"/// Forward determination of analytical integration capabilities to input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExtendPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper p.d.f adding an extended likelihood term to an existing p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExtendPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h:27,Modifiability,extend,extended,27,"// Wrapper p.d.f adding an extended likelihood term to an existing p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooExtendPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooExtendPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:25,Integrability,interface,interface,25,"// --- low level factory interface ---; // Create variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:50,Modifiability,variab,variables,50,"// --- low level factory interface ---; // Create variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:26,Integrability,interface,interface,26,"// --- High level factory interface ---; // Composite object construction language parser",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:94,Integrability,interface,interface,94,"// --- Internal stuff that must be public so that CINT can access it ---; // CINT constructor interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:59,Security,access,access,59,"// --- Internal stuff that must be public so that CINT can access it ---; // CINT constructor interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:20,Integrability,interface,interface,20,"// CINT constructor interface back end",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h:3,Availability,Error,Error,3,"// Error counter for a given expression processing",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFactoryWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFactoryWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:120,Energy Efficiency,reduce,reduce,120,"/// Return value of buffer fraction applied in FFT calculation array beyond either; /// end of the observable domain to reduce cyclical effects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFFTConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:65,Modifiability,Extend,Extend,65,"/// Return the strategy currently used to fill the buffer:; /// 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; /// 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; /// 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFFTConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:38,Performance,Cache,CacheAuxInfo,38,"// mutable std::map<const RooHistPdf*,CacheAuxInfo*> _cacheAuxInfo ; //! Auxiliary Cache information (do not persist)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFFTConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:83,Performance,Cache,Cache,83,"// mutable std::map<const RooHistPdf*,CacheAuxInfo*> _cacheAuxInfo ; //! Auxiliary Cache information (do not persist)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFFTConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h:47,Performance,cache,cached,47,"///< Non-convolution observables that are also cached",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFFTConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFFTConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:12,Integrability,interface,interface,12,"// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:3,Security,Access,Accessors,3,"// Accessors; /// Return MINUIT status code",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:22,Testability,log,log,22,"/// Return minimized -log(L) value.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:22,Security,access,accessors,22,"// Global correlation accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h:40,Availability,error,error,40,"/// Add objects to a 2D plot.; /// Plot error ellipse in par1 and par2 on frame.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitResult.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitResult.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFormulaVar.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFormulaVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFormulaVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFormulaVar.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFormulaVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFormulaVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h:13,Integrability,wrap,wrapper,13,"/// @brief A wrapper class to store a C++ function of type 'double (*)(double*, double*)'.; /// The parameters can be accessed as params[<relative position of param in paramSet>] in the function body.; /// The observables can be accessed as obs[i + j], where i represents the observable position and j; /// represents the data entry.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFuncWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h:118,Security,access,accessed,118,"/// @brief A wrapper class to store a C++ function of type 'double (*)(double*, double*)'.; /// The parameters can be accessed as params[<relative position of param in paramSet>] in the function body.; /// The observables can be accessed as obs[i + j], where i represents the observable position and j; /// represents the data entry.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFuncWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h:229,Security,access,accessed,229,"/// @brief A wrapper class to store a C++ function of type 'double (*)(double*, double*)'.; /// The parameters can be accessed as params[<relative position of param in paramSet>] in the function body.; /// The observables can be accessed as obs[i + j], where i represents the observable position and j; /// represents the data entry.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFuncWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h:21,Performance,optimiz,optimization,21,"/// No constant term optimization is possible in code-generation mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFuncWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFuncWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenContext.h:5,Modifiability,Variab,Variable,5,"///< Variable holding maximum value of p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGenericPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGenericPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h:56,Modifiability,variab,variables,56,"// Generic PDF defined by string expression and list of variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGenericPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGenericPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:302,Usability,guid,guides,302,"/*! \namespace RooFit; The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs; (or other types of arguments). These switches are documented with the relevant functions, e.g. RooAbsPdf::fitTo().; For an introduction to RooFit (not the namespace), check the [user's guides](https://root.cern/root-user-guides-and-manuals),; [courses](https://root.cern/learn/courses) or [the RooFit chapter of the Manual](https://root.cern/manual/roofit/).; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:338,Usability,guid,guides-and-manuals,338,"/*! \namespace RooFit; The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs; (or other types of arguments). These switches are documented with the relevant functions, e.g. RooAbsPdf::fitTo().; For an introduction to RooFit (not the namespace), check the [user's guides](https://root.cern/root-user-guides-and-manuals),; [courses](https://root.cern/learn/courses) or [the RooFit chapter of the Manual](https://root.cern/manual/roofit/).; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:388,Usability,learn,learn,388,"/*! \namespace RooFit; The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs; (or other types of arguments). These switches are documented with the relevant functions, e.g. RooAbsPdf::fitTo().; For an introduction to RooFit (not the namespace), check the [user's guides](https://root.cern/root-user-guides-and-manuals),; [courses](https://root.cern/learn/courses) or [the RooFit chapter of the Manual](https://root.cern/manual/roofit/).; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:4,Deployability,Configurat,Configuration,4,"/// Configuration options for parallel minimization with multiprocessing library",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:4,Modifiability,Config,Configuration,4,"/// Configuration options for parallel minimization with multiprocessing library",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:15,Energy Efficiency,reduce,reduce,15,"// RooAbsData::reduce arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h:153,Safety,avoid,avoid,153,"// RooFit-internal helper struct to build a map object that only uses; // std::vector, which can be implicitly converted to std::map in C++. Used to; // avoid std::map in pythonizations.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooGlobalFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooGlobalFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:76,Availability,alive,alive,76,"/// Switches the message service to a different level while the instance is alive.; /// Can also temporarily activate / deactivate message topics.; /// Use as; /// ~~~{.cpp}; /// RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);; /// [ statements that normally generate a lot of output ]; /// ~~~",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:17,Integrability,message,message,17,"/// Switches the message service to a different level while the instance is alive.; /// Can also temporarily activate / deactivate message topics.; /// Use as; /// ~~~{.cpp}; /// RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);; /// [ statements that normally generate a lot of output ]; /// ~~~",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:131,Integrability,message,message,131,"/// Switches the message service to a different level while the instance is alive.; /// Can also temporarily activate / deactivate message topics.; /// Use as; /// ~~~{.cpp}; /// RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);; /// [ statements that normally generate a lot of output ]; /// ~~~",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:59,Availability,alive,alive,59,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:11,Integrability,message,message,11,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:131,Integrability,message,message,131,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:340,Integrability,Message,Message,340,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:430,Integrability,message,message,430,"/// Change message level (and topics) while this object is alive, reset when it goes out of scope.; /// \param[in] lvl The desired message level. Defaults to verbose.; /// \param[in] extraTopics Extra topics to be switched on. These will only switched on in the last stream to prevent; /// all streams are printing. \param[in] removeTopics Message topics to be switched off \param[in]; /// overrideExternalLevel Override the user message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:4,Integrability,Wrap,Wrap,4,"/// Wrap an object into a TObject. Sometimes needed to avoid reinterpret_cast or enable RTTI.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:55,Safety,avoid,avoid,55,"/// Wrap an object into a TObject. Sometimes needed to avoid reinterpret_cast or enable RTTI.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:87,Availability,alive,alive,87,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:16,Integrability,message,messages,16,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:146,Integrability,message,messages,146,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:213,Testability,test,tests,213,"/// Hijacks all messages with given level and topic (and optionally object name) while alive.; /// Use this like an ostringstream afterwards. The messages can e.g. be retrieved using `str()`.; /// Useful for unit tests / debugging.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h:64,Modifiability,extend,extends,64,"/// Check if the parameters have a range, and warn if the range extends below / above the set limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:61,Availability,error,error,61,"// add a datapoint for a bin with n entries, using a Poisson error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:59,Availability,error,error,59,"// add a datapoint for a bin with n entries, using a given error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:67,Availability,error,error,67,"// add a datapoint for a bin with n entries, using a given x and y error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:71,Availability,error,error,71,"// add a datapoint for the asymmetry (n1-n2)/(n1+n2), using a binomial error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:75,Availability,error,error,75,"// add a datapoint for the asymmetry (n1-n2)/(n1+n2), using sum-of-weights error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:69,Availability,error,error,69,"// add a datapoint for the efficiency (n1)/(n1+n2), using a binomial error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:75,Availability,error,error,75,"// add a datapoint for the efficiency (n1)/(n1+n2), using a sum-of-weights error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:12,Integrability,interface,interface,12,"// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:24,Availability,error,error,24,"///< Number of 'sigmas' error bars represent",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h:32,Availability,error,error,32,"// 1-dimensional histogram with error bars",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHist.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHist.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h:53,Deployability,integrat,integration,53,"///<! Auxiliary class keeping tracking of analytical integration code",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h:53,Integrability,integrat,integration,53,"///<! Auxiliary class keeping tracking of analytical integration code",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h:57,Performance,cache,cache,57,"///<! Assume contents is unit normalized (for use as pdf cache)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h:53,Deployability,integrat,integration,53,"///<! Auxiliary class keeping tracking of analytical integration code",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h:53,Integrability,integrat,integration,53,"///<! Auxiliary class keeping tracking of analytical integration code",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h:56,Performance,cache,cache,56,"///< Assume contents is unit normalized (for use as pdf cache)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooHistPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooHistPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h:23,Availability,error,error,23,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinearVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h:29,Security,access,accessors,29,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinearVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinearVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinearVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinearVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:18,Security,hash,hash,18,"// Return size of hash table",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:24,Security,hash,hashing,24,"///< Size threshold for hashing",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:6,Security,Hash,Hash,6,"///<! Hash table by name",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h:6,Security,Hash,Hash,6,"///<! Hash table by link pointer",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:4,Integrability,Interface,Interface,4,"/// Interface for RooFIter-compatible iterators",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:182,Integrability,wrap,wrapper,182,"////////////////////////////////////////////////////////////////////////////////////////////; /// A one-time forward iterator working on RooLinkedList or RooAbsCollection.; /// This wrapper separates the interface visible to the outside from the actual; /// implementation of the iterator.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:204,Integrability,interface,interface,204,"////////////////////////////////////////////////////////////////////////////////////////////; /// A one-time forward iterator working on RooLinkedList or RooAbsCollection.; /// This wrapper separates the interface visible to the outside from the actual; /// implementation of the iterator.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:136,Integrability,interface,interface,136,"////////////////////////////////////////////////////////////////////////////////////////////; /// Implementation of the GenericRooFIter interface for the RooLinkedList",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:285,Security,access,access,285,"////////////////////////////////////////////////////////////////////////////////////////////; /// TIterator and GenericRooFIter front end with STL back end.; ///; /// By default, this iterators counts, at which position the current element should be.; /// On request, it does an index access to the underlying collection, and returns the element.; /// This happens because the RooLinkedList, which used to be the default collection in RooFit,; /// will not invalidate iterators when inserting elements. Since the default is now an STL collection,; /// reallocations might invalidate the iterator.; ///; /// With an iterator that counts, only inserting before or at the iterator position will create problems.; /// deal with reallocations while iterating. Therefore, this iterator will also check that the last element; /// it was pointing to is the current element when it is invoked again. This ensures that; /// inserting or removing before this iterator does not happen, which was possible with; /// the linked list iterators of RooFit.; /// When NDEBUG is defined, these checks will disappear.; /// \note This is a legacy iterator that only exists to not break old code. Use begin(), end() and; /// range-based for loops with RooArgList and RooArgSet.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:100,Integrability,wrap,wrapper,100,"////////////////////////////////////////////////////////////////////////////////////////////; /// A wrapper around TIterator derivatives.; ///; /// It is called RooLinkedListIter because all classes assume that the RooAbsCollections use; /// a RooLinkedList, which is not true, any more.; /// The purpose of this wrapper is to act on the outside like a RooLinkedListIter, even though; /// the underlying implementation may work an a different container, like e.g.; /// an STL container. This is needed to not break user code that is using a RooLinkedList or; /// a RooAbsCollection.; ///; /// \note All code using this iterator as an iterator over a RooAbsCollection should move; /// to begin() and end() or range-based for loops. These are faster.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:313,Integrability,wrap,wrapper,313,"////////////////////////////////////////////////////////////////////////////////////////////; /// A wrapper around TIterator derivatives.; ///; /// It is called RooLinkedListIter because all classes assume that the RooAbsCollections use; /// a RooLinkedList, which is not true, any more.; /// The purpose of this wrapper is to act on the outside like a RooLinkedListIter, even though; /// the underlying implementation may work an a different container, like e.g.; /// an STL container. This is needed to not break user code that is using a RooLinkedList or; /// a RooAbsCollection.; ///; /// \note All code using this iterator as an iterator over a RooAbsCollection should move; /// to begin() and end() or range-based for loops. These are faster.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h:114,Availability,error,errors,114,"// Setting the move constructor and assignment operator to = default might; // seem to work, but it causes linker errors when using it because; // TIterator::operator= is not implemented.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooLinkedListIter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooLinkedListIter.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMappedCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMappedCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:24,Performance,cache,cache,24,"///<! transient member: cache the mapping",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMappedCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:48,Performance,cache,cached,48,"/// When the input category changes states, the cached state mappings are invalidated",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMappedCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h:9,Modifiability,variab,variable,9,"// Index variable, derived from another index using pattern-matching based mapping",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMappedCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMappedCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:356,Availability,error,error,356,"/** @brief evaluate Faddeeva function for complex argument; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * The method described in; *; * S.M. Abrarov, B.M. Quine: ""Efficient algorithmic implementation of; * Voigt/complex error function based on exponential series approximation""; * published in Applied Mathematics and Computation 218 (2011) 1894-1902; * doi:10.1016/j.amc.2011.06.072; *; * is used. At the heart of the method (equation (14) of the paper) is the; * following Fourier series based approximation:; *; * @f[ w(z) \approx \frac{i}{2\sqrt{\pi}}\left(; * \sum^N_{n=nullptr} a_n \tau_m\left(; * \frac{1-e^{i(n\pi+\tau_m z)}}{n\pi + \tau_m z} -; * \frac{1-e^{i(-n\pi+\tau_m z)}}{n\pi - \tau_m z}; * \right) - a_0 \frac{1-e^{i \tau_m z}}{z}; * \right) @f]; *; * The coefficients @f$a_b@f$ are given by:; *; * @f[ a_n=\frac{2\sqrt{\pi}}{\tau_m}; * \exp\left(-\frac{n^2\pi^2}{\tau_m^2}\right) @f]; *; * To achieve machine accuracy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:2310,Availability,error,error,2310,"cy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\frac{4/2}{-z^2+\frac{5/2}{1+\frac{6/2}{-z^2+\frac{7/2; * }{1+\frac{8/2}{-z^2+\frac{9/2}{1+\ldots}}}}}}}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 12@f$, @f$Im(z)>0@f$ it will give full double precision at a smaller; * computational cost than the method described above. (For @f$|z|>12@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:299,Energy Efficiency,Efficient,Efficient,299,"/** @brief evaluate Faddeeva function for complex argument; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * The method described in; *; * S.M. Abrarov, B.M. Quine: ""Efficient algorithmic implementation of; * Voigt/complex error function based on exponential series approximation""; * published in Applied Mathematics and Computation 218 (2011) 1894-1902; * doi:10.1016/j.amc.2011.06.072; *; * is used. At the heart of the method (equation (14) of the paper) is the; * following Fourier series based approximation:; *; * @f[ w(z) \approx \frac{i}{2\sqrt{\pi}}\left(; * \sum^N_{n=nullptr} a_n \tau_m\left(; * \frac{1-e^{i(n\pi+\tau_m z)}}{n\pi + \tau_m z} -; * \frac{1-e^{i(-n\pi+\tau_m z)}}{n\pi - \tau_m z}; * \right) - a_0 \frac{1-e^{i \tau_m z}}{z}; * \right) @f]; *; * The coefficients @f$a_b@f$ are given by:; *; * @f[ a_n=\frac{2\sqrt{\pi}}{\tau_m}; * \exp\left(-\frac{n^2\pi^2}{\tau_m^2}\right) @f]; *; * To achieve machine accuracy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:2010,Integrability,rout,routine,2010," accuracy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\frac{4/2}{-z^2+\frac{5/2}{1+\frac{6/2}{-z^2+\frac{7/2; * }{1+\frac{8/2}{-z^2+\frac{9/2}{1+\ldots}}}}}}}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 12@f$, @f$Im(z)>0@f$ it will give full double precision at a smaller; * computational cost than the method described above. (For @f$|z|>12@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is us",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:2235,Integrability,rout,routine,2235,"cy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\frac{4/2}{-z^2+\frac{5/2}{1+\frac{6/2}{-z^2+\frac{7/2; * }{1+\frac{8/2}{-z^2+\frac{9/2}{1+\ldots}}}}}}}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 12@f$, @f$Im(z)>0@f$ it will give full double precision at a smaller; * computational cost than the method described above. (For @f$|z|>12@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:2373,Integrability,rout,routine,2373,"cy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\frac{4/2}{-z^2+\frac{5/2}{1+\frac{6/2}{-z^2+\frac{7/2; * }{1+\frac{8/2}{-z^2+\frac{9/2}{1+\ldots}}}}}}}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 12@f$, @f$Im(z)>0@f$ it will give full double precision at a smaller; * computational cost than the method described above. (For @f$|z|>12@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:1560,Safety,avoid,avoid,1560,"r series based approximation:; *; * @f[ w(z) \approx \frac{i}{2\sqrt{\pi}}\left(; * \sum^N_{n=nullptr} a_n \tau_m\left(; * \frac{1-e^{i(n\pi+\tau_m z)}}{n\pi + \tau_m z} -; * \frac{1-e^{i(-n\pi+\tau_m z)}}{n\pi - \tau_m z}; * \right) - a_0 \frac{1-e^{i \tau_m z}}{z}; * \right) @f]; *; * The coefficients @f$a_b@f$ are given by:; *; * @f[ a_n=\frac{2\sqrt{\pi}}{\tau_m}; * \exp\left(-\frac{n^2\pi^2}{\tau_m^2}\right) @f]; *; * To achieve machine accuracy in double precision floating point arithmetic; * for most of the upper half of the complex plane, chose @f$t_m=12@f$ and; * @f$N=23@f$ as is done in the paper.; *; * There are two complications: For Im(z) negative, the exponent in the; * equation above becomes so large that the roundoff in the rest of the; * calculation is amplified enough that the result cannot be trusted.; * Therefore, for Im(z) < 0, the symmetry of the erfc function under the; * transformation z --> -z is used to avoid accuracy issues for Im(z) < 0 by; * formulating the problem such that the calculation can be done for Im(z) > 0; * where the accuracy of the method is fine, and some postprocessing then; * yields the desired final result.; *; * Second, the denominators in the equation above become singular at; * @f$z = n * pi / 12@f$ (for 0 <= n < 24). In a tiny disc around these; * points, Taylor expansions are used to overcome that difficulty.; *; * This routine precomputes everything it can, and tries to write out complex; * operations to minimise subroutine calls, e.g. for the multiplication of; * complex numbers.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-13 relative, the average relative error is better than; * 7e-16. On a modern x86_64 machine, the routine is roughly three times as; * fast than the old CERNLIB implementation and offers better accuracy.; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:674,Availability,error,error,674,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:978,Availability,error,error,978,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:300,Integrability,rout,routine,300,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:404,Integrability,rout,routine,404,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:600,Integrability,rout,routine,600,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:736,Integrability,rout,routine,736,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:1059,Integrability,rout,routine,1059,"/** @brief evaluate Faddeeva function for complex argument (fast version); *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-02-21; *; * Calculate the value of the Faddeeva function @f$w(z) = \exp(-z^2); * \mathrm{erfc}(-i z)@f$.; *; * This is the ""fast"" version of the faddeeva routine above. Fast means that; * is takes roughly half the amount of CPU of the slow version of the; * routine, but is a little less accurate.; *; * To be fast, chose @f$t_m=8@f$ and @f$N=11@f$ which should give accuracies; * around 1e-7.; *; * In the square -8 <= Re(z) <= 8, -8 <= Im(z) <= 8, the routine is accurate; * to better than 4e-7 relative, the average relative error is better than; * 5e-9. On a modern x86_64 machine, the routine is roughly five times as; * fast than the old CERNLIB implementation, or about 30% faster than the; * interpolation/lookup table based fast method used previously in RooFit,; * and offers better accuracy than the latter (the relative error is roughly; * a factor 280 smaller than the old interpolation/table lookup routine).; *; * For large @f$|z|@f$, the familiar continued fraction approximation; *; * @f[ w(z)=\frac{-iz/\sqrt{\pi}}{-z^2+\frac{1/2}{1+\frac{2/2}{-z^2 +; * \frac{3/2}{1+\ldots}}}} @f]; *; * is used, truncated at the ellipsis (""..."") in the formula; for @f$|z| >; * 8@f$, @f$Im(z)>0@f$ it will give full float precision at a smaller; * computational cost than the method described above. (For @f$|z|>8@f$,; * @f$Im(z)<0@f$, the symmetry property @f$w(x-iy)=2e^{-(x+iy)^2-w(x+iy)}@f$; * is used.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h:42,Integrability,rout,routines,42,"// 1-D nth order polynomial interpolation routines",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMath.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMath.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:10,Security,access,accessors,10,"// Result accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:23,Integrability,depend,dependents,23,"///< List of projected dependents in fit",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:13,Integrability,depend,dependents,13,"///< List of dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:34,Integrability,depend,dependents,34,"///< List of generate + prototype dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:44,Modifiability,extend,extended,44,"// Number of expected events to generate in extended mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h:37,Security,access,access,37,"// Randomize order of prototype data access",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMCStudy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMCStudy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:5,Availability,error,errors,5,"///< errors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:32,Availability,error,errors,32,"///< map contains the two Minos errors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:4,Modifiability,Config,Config,4,"/// Config argument to RooMinimizer constructor.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,Modifiability,config,config,22,"// RooAbsMinimizerFcn config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,Modifiability,config,config,22,"// RooAbsMinimizerFcn config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,Modifiability,config,config,22,"// RooAbsMinimizerFcn config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,Modifiability,config,config,22,"// RooAbsMinimizerFcn config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:258,Availability,avail,available,258,"// RooAbsMinimizerFcn config; // RooAbsMinimizerFcn config that can only be set in constructor, 0 means no parallelization (default),; // -1 is parallelization with the number of workers controlled by RooFit::MultiProcess which; // defaults to the number of available processors, n means parallelization with n CPU's",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:22,Modifiability,config,config,22,"// RooAbsMinimizerFcn config; // RooAbsMinimizerFcn config that can only be set in constructor, 0 means no parallelization (default),; // -1 is parallelization with the number of workers controlled by RooFit::MultiProcess which; // defaults to the number of available processors, n means parallelization with n CPU's",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:52,Modifiability,config,config,52,"// RooAbsMinimizerFcn config; // RooAbsMinimizerFcn config that can only be set in constructor, 0 means no parallelization (default),; // -1 is parallelization with the number of workers controlled by RooFit::MultiProcess which; // defaults to the number of available processors, n means parallelization with n CPU's",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:36,Modifiability,config,config,36,"// Experimental: RooAbsMinimizerFcn config that can only be set in constructor; // argument is ignored when parallelize is 0",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:36,Modifiability,config,config,36,"// Experimental: RooAbsMinimizerFcn config that can only be set in constructor; // argument is ignored when parallelize is 0",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,Modifiability,config,config,9,"// local config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,Modifiability,config,config,9,"// local config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,Modifiability,config,config,9,"// local config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,Modifiability,config,config,9,"// local config",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:4,Usability,Clear,Clears,4,"/// Clears the Minuit status history.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:12,Deployability,configurat,configuration,12,"///< fitter configuration (options and parameter settings)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:12,Modifiability,config,configuration,12,"///< fitter configuration (options and parameter settings)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:9,Modifiability,config,config,9,"// local config object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h:10,Integrability,interface,interface,10,"// RooFit interface to ROOT::Math::Minimizer",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMinimizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMinimizer.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:12,Integrability,message,message,12,"// Skip the message prefix",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:3,Integrability,Message,Message,3,"// Message from given object instead of ""this""",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:3,Integrability,Message,Message,3,"// Message from given object instead of ""this"" and skip message prefix",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:56,Integrability,message,message,56,"// Message from given object instead of ""this"" and skip message prefix",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:3,Security,Access,Access,3,"// Access to instance",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:8,Integrability,interface,interface,8,"// User interface -- Add or delete reporting streams ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:59,Deployability,configurat,configuration,59,"// Back end -- Send message or check if particular logging configuration is active",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:20,Integrability,message,message,20,"// Back end -- Send message or check if particular logging configuration is active",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:59,Modifiability,config,configuration,59,"// Back end -- Send message or check if particular logging configuration is active",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:51,Testability,log,logging,51,"// Back end -- Send message or check if particular logging configuration is active",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:13,Testability,log,logging,13,"/// Check if logging is active for given object/topic/RooFit::%MsgLevel combination.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:42,Integrability,message,messages,42,"// Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:64,Integrability,rout,routed,64,"// Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:40,Integrability,message,message,40,"/// Find appropriate logging stream for message from given object with given topic and message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:87,Integrability,message,message,87,"/// Find appropriate logging stream for message from given object with given topic and message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:21,Testability,log,logging,21,"/// Find appropriate logging stream for message from given object with given topic and message level.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h:10,Integrability,Message,Message,10,"// RooFit Message Service Singleton class",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMsgService.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMsgService.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMultiCategory.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooMultiCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooMultiCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:3,Security,Access,Access,3,"// Access components",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:5,Deployability,Configurat,Configuration,5,"///< Configuration of numeric convolution integral ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:5,Modifiability,Config,Configuration,5,"///< Configuration of numeric convolution integral ;",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:14,Deployability,integrat,integrator,14,"///<! Numeric integrator of convolution integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:14,Integrability,integrat,integrator,14,"///<! Numeric integrator of convolution integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:26,Modifiability,variab,variable,26,"///< Original convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:35,Modifiability,variab,variable,35,"///< Pointer to cloned convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:37,Deployability,integrat,integration,37,"///< Holder for optional convolution integration window scaling parameter",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h:37,Integrability,integrat,integration,37,"///< Holder for optional convolution integration window scaling parameter",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvolution.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvolution.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvPdf.h:3,Security,Access,Access,3,"// Access components",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvPdf.h:26,Modifiability,variab,variable,26,"///< Original convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumConvPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumConvPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:19,Deployability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:19,Integrability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 1D p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 1D p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 1D p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 1D p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 1D conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 1D conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 1D conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 1D conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 2D p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 2D p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 2D p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 2D p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 2D conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 2D conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 2D conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 2D conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for ND p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for ND p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for ND p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for ND p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for ND conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for ND conditional p.d.f.s",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for ND conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for ND conditional p.d.f.s with categories",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Deployability,configurat,configuration,13,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:47,Deployability,integrat,integration,47,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:47,Integrability,integrat,integration,47,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:13,Modifiability,config,configuration,13,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:32,Deployability,configurat,configuration,32,"// Numeric (MC) Event generator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h:32,Modifiability,config,configuration,32,"// Numeric (MC) Event generator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumGenConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumGenConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:19,Deployability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:19,Integrability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:19,Deployability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional open-ended integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:19,Integrability,integrat,integration,19,"// Return selected integration techniques for 1,2,N dimensional open-ended integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:106,Deployability,integrat,integration,106,"// Set/get switch that activates printing of number of required; // function evaluations for each numeric integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:106,Integrability,integrat,integration,106,"// Set/get switch that activates printing of number of required; // function evaluations for each numeric integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 1D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 1D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for 2D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for 2D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for ND integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for ND integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for open ended 1D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for open ended 1D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for open ended 2D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for open ended 2D integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,integrat,integration,13,"///< Selects integration method for open ended ND integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Integrability,integrat,integration,13,"///< Selects integration method for open ended ND integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Deployability,configurat,configuration,13,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:47,Deployability,integrat,integration,47,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:47,Integrability,integrat,integration,47,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:13,Modifiability,config,configuration,13,"///< List of configuration sets for individual integration methods",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:11,Deployability,Integrat,Integrator,11,"// Numeric Integrator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:22,Deployability,configurat,configuration,22,"// Numeric Integrator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:11,Integrability,Integrat,Integrator,11,"// Numeric Integrator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h:22,Modifiability,config,configuration,22,"// Numeric Integrator configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h:70,Safety,detect,detection,70,"// NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see https://sft.its.cern.ch/jira/browse/ROOT-10300",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h:11,Deployability,Integrat,Integrator,11,"// Numeric Integrator factory",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h:11,Integrability,Integrat,Integrator,11,"// Numeric Integrator factory",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumIntFactory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumIntFactory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h:5,Deployability,Integrat,Integrated,5,"///< Integrated observable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumRunningInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h:5,Integrability,Integrat,Integrated,5,"///< Integrated observable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumRunningInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h:36,Performance,cache,cache,36,"///< Name of binning to be used for cache histogram",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooNumRunningInt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooNumRunningInt.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h:2,Performance,cache,cacheList,2,/*cacheList*/,MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooObjCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h:5,Usability,Clear,Clear,5,"///< Clear obslist on sterilize?",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooObjCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h:5,Performance,Cache,Cache,5,"///< Cache manager for generic caches that contain RooAbsArg objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooObjCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h:31,Performance,cache,caches,31,"///< Cache manager for generic caches that contain RooAbsArg objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooObjCacheManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooObjCacheManager.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:3,Modifiability,parameteriz,parameterized,3,"// parameterized binning cannot be shared across instances",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooParamBinning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:65,Deployability,integrat,integration,65,"// binning is parameterized, range will need special handling in integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooParamBinning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:65,Integrability,integrat,integration,65,"// binning is parameterized, range will need special handling in integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooParamBinning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:14,Modifiability,parameteriz,parameterized,14,"// binning is parameterized, range will need special handling in integration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooParamBinning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h:37,Modifiability,parameteriz,parameterized,37,"// Binning specification with ranges parameterized by external RooAbsReal functions",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooParamBinning.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooParamBinning.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:21,Integrability,interface,interface,21,"// implement the TH1 interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:30,Integrability,interface,interface,30,"// forwarding of relevant TH1 interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:19,Safety,safe,safe,19,"// Convenient type-safe accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:24,Security,access,accessors,24,"// Convenient type-safe accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:4,Modifiability,Config,Configure,4,"/// Configure whether new instances of RooPlot will add themselves to `gDirectory`.; /// Like TH1::AddDirectory().",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:9,Modifiability,variab,variable,9,"///< The variable we are plotting.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h:5,Modifiability,Variab,Variables,5,"///< Variables that PDF plots should be normalized over",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlot.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlot.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlotable.h:12,Integrability,interface,interface,12,"// Abstract interface for plotable objects in a RooPlot",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPlotable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPlotable.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPrintable.h:3,Integrability,Interface,Interface,3,"// Interface for printable objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooPrintable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooPrintable.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h:21,Integrability,depend,dependents,21,"///< Common category dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h:38,Integrability,depend,dependents,38,"///< SuperCategory of Common category dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h:15,Energy Efficiency,efficient,efficient,15,"// Context for efficient generation of a dataset from a RooProdPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h:7,Performance,cache,cache,7,"// The cache object",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h:3,Performance,Cache,Cache,3,"// Cache management functions",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h:8,Performance,cache,cache,8,"//! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h:14,Modifiability,extend,extended,14,"///< Index of extended PDF (if any)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProdPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProdPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProduct.h:8,Performance,cache,cache,8,"//! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProduct.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProduct.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h:12,Testability,log,log,12,"///< Input -log(L) function",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProfileLL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h:26,Testability,log,log,26,"///< absolute minimum of -log(L)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProfileLL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProfileLL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:14,Deployability,integrat,integration,14,"// Analytical integration support",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:14,Integrability,integrat,integration,14,"// Analytical integration support",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:32,Modifiability,Extend,Extended,32,"// Handle case of projecting an Extended pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:19,Deployability,integrat,integrated,19,"///< p.d.f that is integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:19,Integrability,integrat,integrated,19,"///< p.d.f that is integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:31,Deployability,integrat,integrated,31,"///< observables that p.d.f is integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:31,Integrability,integrat,integrated,31,"///< observables that p.d.f is integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:5,Integrability,depend,dependents,5,"///< dependents of this p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:3,Performance,Cache,Cache,3,"// Cache management functions",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h:10,Performance,cache,cache,10,"///<! The cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooProjectedPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooProjectedPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRandom.h:27,Integrability,interface,interface,27,"// Random number generator interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRandom.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRandom.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealBinding.h:27,Modifiability,variab,variables,27,"///< Non-owned pointers to variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealBinding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealBinding.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:38,Performance,cache,cached,38,"// If true, value of this integral is cached if it is (partially numeric)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:38,Performance,cache,cached,38,"// If true, value of this integral is cached if it is (partially numeric)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:18,Security,validat,validation,18,"// Evaluation and validation implementation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:58,Deployability,integrat,integrated,58,"// Internal function to get the normalization set for the integrated; // function. By default, we will take the normalization set from the function; // proxy, but _funcNormSet will be used if it is set.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:58,Integrability,integrat,integrated,58,"// Internal function to get the normalization set for the integrated; // function. By default, we will take the normalization set from the function; // proxy, but _funcNormSet will be used if it is set.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:12,Deployability,continuous,continuous,12,"///< Set of continuous observables over which is integrated numerically",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:49,Deployability,integrat,integrated,49,"///< Set of continuous observables over which is integrated numerically",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:49,Integrability,integrat,integrated,49,"///< Set of continuous observables over which is integrated numerically",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:38,Deployability,integrat,integrated,38,"///< Set of observables over which is integrated/summed analytically",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:38,Integrability,integrat,integrated,38,"///< Set of observables over which is integrated/summed analytically",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:58,Deployability,integrat,integration,58,"///< Set of lvalue observables over which is analytically integration that have a non-unit Jacobian",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:58,Integrability,integrat,integration,58,"///< Set of lvalue observables over which is analytically integration that have a non-unit Jacobian",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:70,Deployability,integrat,integrated,70,"///< Set of observables on which function does not depends, which are integrated nevertheless",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:51,Integrability,depend,depends,51,"///< Set of observables on which function does not depends, which are integrated nevertheless",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:70,Integrability,integrat,integrated,70,"///< Set of observables on which function does not depends, which are integrated nevertheless",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:20,Deployability,integrat,integrated,20,"///< Function being integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:20,Integrability,integrat,integrated,20,"///< Function being integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:5,Deployability,integrat,integration,5,"///< integration operation mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:5,Integrability,integrat,integration,5,"///< integration operation mode",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:6,Performance,cache,cache,6,"///<! cache for set of parameters",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:5,Performance,Cache,Cache,5,"///< Cache integral if numeric",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h:6,Performance,Cache,Cache,6,"///<! Cache all integrals with given numeric dimension",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealIntegral.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealIntegral.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h:8,Deployability,integrat,integration,8,"//! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h:8,Integrability,integrat,integration,8,"//! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h:20,Performance,cache,cache,20,"//! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumFunc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumFunc.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h:41,Modifiability,extend,extended,41,"/// Return expected number of events for extended likelihood calculation, which; /// is the sum of all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h:10,Deployability,integrat,integration,10,"///<! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h:10,Integrability,integrat,integration,10,"///<! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h:22,Performance,cache,cache,22,"///<! The integration cache manager",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h:18,Modifiability,extend,extended,18,"///< Allow use as extended p.d.f.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealSumPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealSumPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:23,Availability,error,error,23,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:29,Security,access,accessors,29,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:35,Integrability,depend,depend,35,"// Does value or shape of this arg depend on any other arg?",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:15,Availability,error,error,15,"///< Symmetric error associated with current value",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:28,Availability,error,error,28,"///< Low side of asymmetric error associated with current value",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:29,Availability,error,error,29,"///< High side of asymmetric error associated with current value",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:5,Modifiability,variab,variables,5,"///< variables don't need caches",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:26,Performance,cache,caches,26,"///< variables don't need caches",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:49,Modifiability,variab,variable,49,"///< List of properties shared among clones of a variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:39,Modifiability,variab,variable,39,"///<! How many times the value of this variable was reset",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h:15,Modifiability,variab,variable,15,"// Real-valued variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooRealVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooRealVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h:27,Modifiability,variab,variable,27,"/// Return the convolution variable of the resolution model.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooResolutionModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h:5,Integrability,Depend,Dependent,5,"///< Dependent/convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooResolutionModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h:27,Modifiability,variab,variable,27,"///< Dependent/convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooResolutionModel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooResolutionModel.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSharedProperties.h:3,Integrability,Wrap,Wrapper,3,"// Wrapper class to make the TUUID comparable for use as key type in std::map.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSharedProperties.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSharedProperties.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSharedProperties.h:12,Integrability,interface,interface,12,"// Abstract interface for shared property implementations",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSharedProperties.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSharedProperties.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimGenContext.h:13,Modifiability,variab,variables,13,"///< All pdf variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimGenContext.h:15,Energy Efficiency,efficient,efficiently,15,"// Context for efficiently generating a dataset from a RooSimultaneous PDF",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimSplitGenContext.h:13,Modifiability,variab,variables,13,"///< All pdf variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimSplitGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimSplitGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimSplitGenContext.h:15,Energy Efficiency,efficient,efficiently,15,"// Context for efficiently generating a dataset from a RooSimultaneous PDF",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimSplitGenContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimSplitGenContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimultaneous.h:21,Integrability,wrap,wrapped,21,"///<! Index category wrapped in a RooArgSet if needed internally",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimultaneous.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimultaneous.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:9,Deployability,configurat,configuration,9,"// Build configuration object for RooSimWSTool",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:9,Modifiability,config,configuration,9,"// Build configuration object for RooSimWSTool",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:9,Deployability,configurat,configuration,9,"// Build configuration object for RooSimWSTool with multiple prototype p.d.f.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:9,Modifiability,config,configuration,9,"// Build configuration object for RooSimWSTool with multiple prototype p.d.f.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:3,Security,Validat,Validated,3,"// Validated RooSimWSTool split rule",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:32,Deployability,configurat,configuration,32,"// Validated RooSimWSTool build configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:32,Modifiability,config,configuration,32,"// Validated RooSimWSTool build configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h:3,Security,Validat,Validated,3,"// Validated RooSimWSTool build configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSimWSTool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSimWSTool.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h:64,Usability,simpl,simple,64,"/**; * \class RooSTLRefCountList; * The RooSTLRefCountList is a simple collection of **pointers** to the template objects with; * reference counters.; * The pointees are not owned, hence not deleted when removed from the collection.; * Objects can be searched for either by pointer or by name (confusion possible when; * objects with same name are present). This replicates the behaviour of the RooRefCountList.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSTLRefCountList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h:28,Performance,bottleneck,bottleneck,28,"//If this turns out to be a bottleneck,; //one could use the RooNameReg to obtain the pointer to the arg's name and compare these",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSTLRefCountList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h:29,Security,access,access,29,"///<!; // It is expensive to access the RooNameReg instance to get the counter for; // the renaming operations. That's why we have out own static pointer to; // the counter.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSTLRefCountList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSTLRefCountList.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:23,Availability,error,error,23,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:29,Security,access,accessors,29,"// Parameter value and error accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:17,Integrability,interface,interface,17,"// I/O streaming interface (machine readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:25,Security,access,accessors,25,"// Return value and unit accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h:17,Modifiability,variab,variable,17,"// String-valued variable",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringVar.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringVar.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h:27,Integrability,wrap,wrapper,27,"/// The RooStringView is a wrapper around a C-style string that can also be; /// constructed from a `std::string` or a TString. As such, it serves as a; /// drop-in replacement for `const char*` in public RooFit interfaces, keeping; /// the possibility to pass a C-style string without copying but also accepting; /// a `std::string`.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h:212,Integrability,interface,interfaces,212,"/// The RooStringView is a wrapper around a C-style string that can also be; /// constructed from a `std::string` or a TString. As such, it serves as a; /// drop-in replacement for `const char*` in public RooFit interfaces, keeping; /// the possibility to pass a C-style string without copying but also accepting; /// a `std::string`.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooStringView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooStringView.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSuperCategory.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooSuperCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooSuperCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTable.h:52,Integrability,interface,interface,52,/**; \class RooTable; \ingroup Roofitcore. Abstract interface for table objects.; Table objects are the category equivalent of RooPlot objects; (which are used for real-valued objects); **/,MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTable.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTable.h:12,Integrability,interface,interface,12,"// Abstract interface for tables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTable.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:3573,Availability,error,errors,3573,"ile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.cpp}; #pragma link C++ class RooTemplateProxy<RooMultiCategory>+;; #pragma read sourceClass=""RooCategoryProxy"" targetClass=""RooTemplateProxy<RooMultiCategory>""; ~~~; Replace `RooMultiCategory` by the proper type. If the proxy was holding a real-valued object, use `sourceClass=""RooRealProxy""`. The first line adds the proxy class to the dictionary, the second line enables reading a legacy; `RooCategoryProxy` from a file, and converting it to the new type-safe proxy. If no old proxies; have to be read from files, this line can be omitted. If the template instantiation that triggered the missing symbols seems to be a very common instantiation,; request for it to be added to RooFit by creating a pull request for ROOT. If it is rather uncommon,; it is sufficient to add it to the LinkDef.h of the local project only. **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:561,Modifiability,variab,variables,561,"/**; \class RooTemplateProxy; \ingroup Roofitcore. ## Introduction; A RooTemplateProxy is used to hold references to other RooFit objects in an expression tree.; A `RooGaussian(..., x, mean, sigma)` can e.g. store references to `x, mean, sigma` as; ```; RooTemplateProxy<RooAbsReal> _x;; RooTemplateProxy<RooAbsReal> _mean;; RooTemplateProxy<RooAbsReal> _sigma;; ```; Now, the values of these three can be accessed, and the template argument ensures that only objects that evaluate; to real numbers (RooAbsReal) can be stored in such a proxy. These can e.g. be variables, PDFs and functions.; To store an object that's a `RooCategory`, one would, for example, use; ```; RooTemplateProxy<RooCategory> _category;; ```. Since %ROOT 6.22, the proxy can be used like a pointer to an instance of the template argument.; For this, it provides `operator*` and `operator->`, e.g.; ```; double oldValue = _x->getVal(normalisationSet);; *_x = 17.;; ```. RooTemplateProxy's base class RooArgProxy registers the proxied objects as ""servers"" of the object; that holds the proxy. When the value of the proxied object is changed, the owner is; notified, and can recalculate its own value. Renaming or exchanging objects that; serve values to the owner of the proxy is handled automatically. ## Modernisation of proxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:3146,Modifiability,variab,variable,3146,"e, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.cpp}; #pragma link C++ class RooTemplateProxy<RooMultiCategory>+;; #pragma read sourceClass=""RooCategoryProxy"" targetClass=""RooTemplateProxy<RooMultiCategory>""; ~~~; Replace `RooMultiCategory` by the proper type. If the proxy was holding a real-valued object, use `sourceClass=""RooRealProxy""`. The first line adds the proxy class to the ",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:4273,Safety,safe,safe,4273,"ile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.cpp}; #pragma link C++ class RooTemplateProxy<RooMultiCategory>+;; #pragma read sourceClass=""RooCategoryProxy"" targetClass=""RooTemplateProxy<RooMultiCategory>""; ~~~; Replace `RooMultiCategory` by the proper type. If the proxy was holding a real-valued object, use `sourceClass=""RooRealProxy""`. The first line adds the proxy class to the dictionary, the second line enables reading a legacy; `RooCategoryProxy` from a file, and converting it to the new type-safe proxy. If no old proxies; have to be read from files, this line can be omitted. If the template instantiation that triggered the missing symbols seems to be a very common instantiation,; request for it to be added to RooFit by creating a pull request for ROOT. If it is rather uncommon,; it is sufficient to add it to the LinkDef.h of the local project only. **/",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:406,Security,access,accessed,406,"/**; \class RooTemplateProxy; \ingroup Roofitcore. ## Introduction; A RooTemplateProxy is used to hold references to other RooFit objects in an expression tree.; A `RooGaussian(..., x, mean, sigma)` can e.g. store references to `x, mean, sigma` as; ```; RooTemplateProxy<RooAbsReal> _x;; RooTemplateProxy<RooAbsReal> _mean;; RooTemplateProxy<RooAbsReal> _sigma;; ```; Now, the values of these three can be accessed, and the template argument ensures that only objects that evaluate; to real numbers (RooAbsReal) can be stored in such a proxy. These can e.g. be variables, PDFs and functions.; To store an object that's a `RooCategory`, one would, for example, use; ```; RooTemplateProxy<RooCategory> _category;; ```. Since %ROOT 6.22, the proxy can be used like a pointer to an instance of the template argument.; For this, it provides `operator*` and `operator->`, e.g.; ```; double oldValue = _x->getVal(normalisationSet);; *_x = 17.;; ```. RooTemplateProxy's base class RooArgProxy registers the proxied objects as ""servers"" of the object; that holds the proxy. When the value of the proxied object is changed, the owner is; notified, and can recalculate its own value. Renaming or exchanging objects that; serve values to the owner of the proxy is handled automatically. ## Modernisation of proxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:2275,Security,Access,Accessing,2275,"oxies in ROOT 6.22; In ROOT 6.22, the classes RooRealProxy and RooCategoryProxy were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:2809,Security,Access,Accessing,2809," <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning class.; 3. Make sure that the right type is passed in the constructor of the proxy.; 4. Always use `proxy->` and `*proxy` to work with the stored object. No need to cast.; 5. **Only if necessary** If errors about missing symbols connected to RooTemplateProxy appear at link time,; a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries.; These two lines should be added to the LinkDef.h of the project:; ~~~{.c",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:2388,Testability,assert,assert,2388,"y were replaced by RooTemplateProxy<class T>. Two typedefs have been defined for backward compatibility:; - `RooRealProxy = RooTemplateProxy<RooAbsReal>`. Any generic object that converts to a real value.; - `RooCategoryProxy = RooTemplateProxy<RooAbsCategory>`. Any category object. To modernise a class, one can change the template argument of the proxy to the most appropriate type,; and increment the class version of the owner. <table>; <tr><th> %RooFit before %ROOT 6.22 <th> %RooFit starting with %ROOT 6.22; <tr><td>; ~~~{.cpp}; // In .h: Declare member; RooRealProxy pdfProxy;. ClassDefOverride(MyPdf, 1); };. // In .cxx: Initialise proxy in constructor; // The proxy will accept any RooAbsArg, so the type of; // ""thePdf"" has to be checked manually.; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {; [ Extra checking here ... ]; }. // In .cxx: Accessing the proxy; RooAbsArg* absArg = pdfProxy.absArg();; RooAbsPdf* pdf = dynamic_cast<RooAbsPdf*>(absArg);; assert(pdf); // Manual type checking ...; pdf->fitTo(...);; ~~~; <td>; ~~~{.cpp}; // In .h: Declare member; RooTemplateProxy<RooAbsPdf> pdfProxy;. ClassDefOverride(MyPdf, 2); };. // In .cxx: Initialise proxy in constructor; // The program will not compile if ""thePdf"" is not a; // type deriving from RooAbsPdf; MyPdf::MyPdf(name, title, ...) :; pdfProxy(""pdfProxy"", ""Proxy holding a PDF"", this, thePdf) {. }. // In .cxx: Accessing the proxy. pdfProxy->fitTo(...);; ~~~; </table>. ### How to modernise old code. 1. Choose the proper template argument for the proxy.; - If a PDF is stored: `RooTemplateProxy<RooAbsPdf>`.; - If a real-valued object is stored: `RooTemplateProxy<RooAbsReal>`.; - If a category is stored: `RooTemplateProxy<RooCategory>`.; - If a variable is stored (i.e. one wants to be able to assign values to it): `RooTemplateProxy<RooRealVar>`; Other template arguments are possible, as long as they derive from RooAbsArg.; 2. Increment the class version of the owning cla",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:359,Integrability,depend,dependencies,359,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object.; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ref Reference to the object that the proxy should hold.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:406,Integrability,depend,depending,406,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object.; ///; /// \deprecated Kept for backwards compatibility and will be removed in ROOT 6.36.; /// Please use RooTemplateProxy(const char*, const char*, RooAbsArg*, std::unique_ptr<T>, bool, bool); /// or RooTemplateProxy(const char*, const char*, RooAbsArg*, T&, bool, bool),; /// depending if you want to transfer ownership or not.; ///; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ref Reference to the object that the proxy should hold.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.; /// \param[in] proxyOwnsArg Proxy will delete the payload if owning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:693,Integrability,depend,dependencies,693,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object.; ///; /// \deprecated Kept for backwards compatibility and will be removed in ROOT 6.36.; /// Please use RooTemplateProxy(const char*, const char*, RooAbsArg*, std::unique_ptr<T>, bool, bool); /// or RooTemplateProxy(const char*, const char*, RooAbsArg*, T&, bool, bool),; /// depending if you want to transfer ownership or not.; ///; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ref Reference to the object that the proxy should hold.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.; /// \param[in] proxyOwnsArg Proxy will delete the payload if owning.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:404,Integrability,depend,dependencies,404,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied object, taking ownership of the proxied object.; ///; /// \param[in] theName Name of this proxy (for printing).; /// \param[in] desc Description what this proxy should act as.; /// \param[in] owner The object that owns the proxy. This is important for tracking; /// of client-server dependencies.; /// \param[in] ptr Owning smart pointer to the object that the proxy should hold. Ownership will be transferred to the proxy.; /// \param[in] valueServer Notify the owner if value changes.; /// \param[in] shapeServer Notify the owner if shape (e.g. binning) changes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:512,Availability,error,error,512,"////////////////////////////////////////////////////////////////////////////////; /// Copy from an existing proxy.; /// It will accept any RooTemplateProxy instance, and attempt a dynamic_cast on its payload.; /// \param[in] theName Name of this proxy.; /// \param[in] owner Pointer to the owner this proxy should be registered to.; /// \param[in] other Instance of a different proxy whose payload should be copied.; /// \param[in] allowWrongTypes Instead of throwing a std::invalid_argument, only issue an; /// error message when payload with wrong type is found. This is unsafe, but may be necessary; /// when reading back legacy types. Defaults to false.; /// \throw std::invalid_argument if the types of the payloads are incompatible.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:518,Integrability,message,message,518,"////////////////////////////////////////////////////////////////////////////////; /// Copy from an existing proxy.; /// It will accept any RooTemplateProxy instance, and attempt a dynamic_cast on its payload.; /// \param[in] theName Name of this proxy.; /// \param[in] owner Pointer to the owner this proxy should be registered to.; /// \param[in] other Instance of a different proxy whose payload should be copied.; /// \param[in] allowWrongTypes Instead of throwing a std::invalid_argument, only issue an; /// error message when payload with wrong type is found. This is unsafe, but may be necessary; /// when reading back legacy types. Defaults to false.; /// \throw std::invalid_argument if the types of the payloads are incompatible.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:573,Safety,unsafe,unsafe,573,"////////////////////////////////////////////////////////////////////////////////; /// Copy from an existing proxy.; /// It will accept any RooTemplateProxy instance, and attempt a dynamic_cast on its payload.; /// \param[in] theName Name of this proxy.; /// \param[in] owner Pointer to the owner this proxy should be registered to.; /// \param[in] other Instance of a different proxy whose payload should be copied.; /// \param[in] allowWrongTypes Instead of throwing a std::invalid_argument, only issue an; /// error message when payload with wrong type is found. This is unsafe, but may be necessary; /// when reading back legacy types. Defaults to false.; /// \throw std::invalid_argument if the types of the payloads are incompatible.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:11,Security,access,access,11,"/// Member access operator to proxied object.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:17,Integrability,interface,interface,17,"/// \name Legacy interface; /// In ROOT versions before 6.22, RooFit didn't have this typed proxy. Therefore, a number of functions; /// for forwarding calls to the proxied objects were necessary. The functions in this group can all be; /// replaced by directly accessing the proxied objects using e.g. the member access operator like; /// `proxy->function()` or by dereferencing like `*proxy = value`.; /// For this to work, choose the template argument appropriately. That is, if the; /// proxy stores a PDF, use `RooTemplateProxy<RooAbsPdf>`, *etc.*.; /// @{; /// Get the label of the current category state. This function only makes sense for category proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:262,Security,access,accessing,262,"/// \name Legacy interface; /// In ROOT versions before 6.22, RooFit didn't have this typed proxy. Therefore, a number of functions; /// for forwarding calls to the proxied objects were necessary. The functions in this group can all be; /// replaced by directly accessing the proxied objects using e.g. the member access operator like; /// `proxy->function()` or by dereferencing like `*proxy = value`.; /// For this to work, choose the template argument appropriately. That is, if the; /// proxy stores a PDF, use `RooTemplateProxy<RooAbsPdf>`, *etc.*.; /// @{; /// Get the label of the current category state. This function only makes sense for category proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:314,Security,access,access,314,"/// \name Legacy interface; /// In ROOT versions before 6.22, RooFit didn't have this typed proxy. Therefore, a number of functions; /// for forwarding calls to the proxied objects were necessary. The functions in this group can all be; /// replaced by directly accessing the proxied objects using e.g. the member access operator like; /// `proxy->function()` or by dereferencing like `*proxy = value`.; /// For this to work, choose the template argument appropriately. That is, if the; /// proxy stores a PDF, use `RooTemplateProxy<RooAbsPdf>`, *etc.*.; /// @{; /// Get the label of the current category state. This function only makes sense for category proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:436,Deployability,release,release,436,"////////////////////////////////////////////////////////////////////////////////; /// Return l-value pointer to contents. If the contents derive from RooAbsLValue or RooAbsCategoryLValue,; /// the conversion is safe, and the function directly returns the pointer using a static_cast.; /// If the template parameter of this proxy is not an LValue type, then; /// - in a debug build, a dynamic_cast with an assertion is used.; /// - in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This; /// is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies.; /// \deprecated This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or; /// RooAbsCategoryLValue (+derived types), as arg() will always return the correct type.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:596,Modifiability,refactor,refactoring,596,"////////////////////////////////////////////////////////////////////////////////; /// Return l-value pointer to contents. If the contents derive from RooAbsLValue or RooAbsCategoryLValue,; /// the conversion is safe, and the function directly returns the pointer using a static_cast.; /// If the template parameter of this proxy is not an LValue type, then; /// - in a debug build, a dynamic_cast with an assertion is used.; /// - in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This; /// is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies.; /// \deprecated This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or; /// RooAbsCategoryLValue (+derived types), as arg() will always return the correct type.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:211,Safety,safe,safe,211,"////////////////////////////////////////////////////////////////////////////////; /// Return l-value pointer to contents. If the contents derive from RooAbsLValue or RooAbsCategoryLValue,; /// the conversion is safe, and the function directly returns the pointer using a static_cast.; /// If the template parameter of this proxy is not an LValue type, then; /// - in a debug build, a dynamic_cast with an assertion is used.; /// - in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This; /// is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies.; /// \deprecated This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or; /// RooAbsCategoryLValue (+derived types), as arg() will always return the correct type.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h:405,Testability,assert,assertion,405,"////////////////////////////////////////////////////////////////////////////////; /// Return l-value pointer to contents. If the contents derive from RooAbsLValue or RooAbsCategoryLValue,; /// the conversion is safe, and the function directly returns the pointer using a static_cast.; /// If the template parameter of this proxy is not an LValue type, then; /// - in a debug build, a dynamic_cast with an assertion is used.; /// - in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This; /// is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies.; /// \deprecated This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or; /// RooAbsCategoryLValue (+derived types), as arg() will always return the correct type.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTemplateProxy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTemplateProxy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h:12,Integrability,interface,interface,12,"// Printing interface (human readable)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooThresholdCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h:64,Integrability,depend,depend,64,"/// No shape recomputation is necessary. This category does not depend on other categories.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooThresholdCategory.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooThresholdCategory.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:22,Integrability,rout,routines,22,"// Buffer redirection routines used in inside RooAbsOptTestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:8,Security,access,access,8,"// Tree access",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:27,Integrability,interface,interface,27,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:17,Performance,optimiz,optimizer,17,"// Constant term optimizer interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:22,Performance,cache,cached,22,"//! TTree holding the cached function values",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:18,Performance,cache,cache,18,"//! Object owning cache contents",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:21,Modifiability,variab,variable,21,"// Pointer to weight variable (if set)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:34,Availability,error,error,34,"///<! External weight array - low error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h:35,Availability,error,error,35,"///<! External weight array - high error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooTreeDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooTreeDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:53,Modifiability,variab,variable,53,"///< Instance which our data belongs to. This is the variable in the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:51,Performance,load,load,51,"///< Instance where we should write data into when load() is called.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:24,Deployability,release,releases,24,"// make sure the vector releases the underlying memory",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:23,Modifiability,variab,variable,23,"///< Pointer to weight variable (if set)",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:34,Availability,error,error,34,"///<! External weight array - low error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:35,Availability,error,error,35,"///<! External weight array - high error",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:6,Performance,Optimiz,Optimization,6,"///<! Optimization cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:19,Performance,cache,cache,19,"///<! Optimization cache",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:6,Performance,Cache,Cache,6,"///<! Cache owner",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:31,Deployability,update,update,31,"///<! Request for forced cache update",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h:25,Performance,cache,cache,25,"///<! Request for forced cache update",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooVectorDataStore.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooVectorDataStore.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:26,Integrability,interface,interface,26,"// Transaction management interface for multi-step import operations",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:11,Performance,load,load,11,"// Import, load and save parameter value snapshots",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:3,Security,Access,Accessor,3,"// Accessor functions",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:9,Security,access,accessors,9,"// Group accessors",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:5,Performance,Cache,Cache,5,"///< Cache for expensive objects",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:6,Modifiability,Sandbox,Sandbox,6,"///<! Sandbox for incoming objects in a transaction",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:6,Testability,Sandbox,Sandbox,6,"///<! Sandbox for incoming objects in a transaction",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h:66,Modifiability,variab,variables,66,"// Persistable project container for (composite) pdfs, functions, variables and datasets",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspace.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspace.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h:7,Integrability,interface,interface,7,"/// An interface to set and retrieve a workspace.; /// This is needed for all generic objects that can be saved in a workspace, which itself depend; /// on the workspace (e.g. the RooStats::ModelConfig).; /// Because of a circular dependency, a workspace with a ModelConfig cannot be (deep) cloned.; /// The handle hides this dependency.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspaceHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h:141,Integrability,depend,depend,141,"/// An interface to set and retrieve a workspace.; /// This is needed for all generic objects that can be saved in a workspace, which itself depend; /// on the workspace (e.g. the RooStats::ModelConfig).; /// Because of a circular dependency, a workspace with a ModelConfig cannot be (deep) cloned.; /// The handle hides this dependency.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspaceHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h:231,Integrability,depend,dependency,231,"/// An interface to set and retrieve a workspace.; /// This is needed for all generic objects that can be saved in a workspace, which itself depend; /// on the workspace (e.g. the RooStats::ModelConfig).; /// Because of a circular dependency, a workspace with a ModelConfig cannot be (deep) cloned.; /// The handle hides this dependency.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspaceHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h:326,Integrability,depend,dependency,326,"/// An interface to set and retrieve a workspace.; /// This is needed for all generic objects that can be saved in a workspace, which itself depend; /// on the workspace (e.g. the RooStats::ModelConfig).; /// Because of a circular dependency, a workspace with a ModelConfig cannot be (deep) cloned.; /// The handle hides this dependency.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWorkspaceHandle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWorkspaceHandle.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:338,Integrability,wrap,wrapped,338,"/// Construct a new RooWrapperPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] inputFunction Any RooAbsReal that should be converted into a PDF. Although it's possible; /// \param[in] selfNormalized The return value the RooAbsPdf::selfNormalized() function for the wrapped PDF object.; /// If it is `true`, then no automatic normalization will be; /// performed when evaluating the function. In this case, the; /// effect RooWrapperPdf is not to change the evaluated values,; /// but only to wrap the function in something that is of type; /// RooAbsPdf, which can be useful if some interface reqiures it.; /// to pass a PDF, it only makes sense for non-PDF functions.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:565,Integrability,wrap,wrap,565,"/// Construct a new RooWrapperPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] inputFunction Any RooAbsReal that should be converted into a PDF. Although it's possible; /// \param[in] selfNormalized The return value the RooAbsPdf::selfNormalized() function for the wrapped PDF object.; /// If it is `true`, then no automatic normalization will be; /// performed when evaluating the function. In this case, the; /// effect RooWrapperPdf is not to change the evaluated values,; /// but only to wrap the function in something that is of type; /// RooAbsPdf, which can be useful if some interface reqiures it.; /// to pass a PDF, it only makes sense for non-PDF functions.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:656,Integrability,interface,interface,656,"/// Construct a new RooWrapperPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] inputFunction Any RooAbsReal that should be converted into a PDF. Although it's possible; /// \param[in] selfNormalized The return value the RooAbsPdf::selfNormalized() function for the wrapped PDF object.; /// If it is `true`, then no automatic normalization will be; /// performed when evaluating the function. In this case, the; /// effect RooWrapperPdf is not to change the evaluated values,; /// but only to wrap the function in something that is of type; /// RooAbsPdf, which can be useful if some interface reqiures it.; /// to pass a PDF, it only makes sense for non-PDF functions.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:425,Performance,perform,performed,425,"/// Construct a new RooWrapperPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] inputFunction Any RooAbsReal that should be converted into a PDF. Although it's possible; /// \param[in] selfNormalized The return value the RooAbsPdf::selfNormalized() function for the wrapped PDF object.; /// If it is `true`, then no automatic normalization will be; /// performed when evaluating the function. In this case, the; /// effect RooWrapperPdf is not to change the evaluated values,; /// but only to wrap the function in something that is of type; /// RooAbsPdf, which can be useful if some interface reqiures it.; /// to pass a PDF, it only makes sense for non-PDF functions.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:14,Deployability,Integrat,Integration,14,"// Analytical Integration handling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:14,Integrability,Integrat,Integration,14,"// Analytical Integration handling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:102,Integrability,wrap,wrapper,102,"// Internal toy generation. Since our _func is not a PDF (if it is, it doesn't make sense to use this wrapper),; // we cannot do anything.; /// Get specialised generator. Since the underlying function is not a PDF, this will always return zero.; // Int_t getGenerator(const RooArgSet& /*directVars*/, RooArgSet& /*generateVars*/,; // bool /*staticInitOK = true*/) const override { return 0; }; // void initGenerator(Int_t /*code*/) override { }; // void generateEvent(Int_t /*code*/) override { }; // bool isDirectGenSafe(const RooAbsArg& /*arg*/) const override { return false; }; // Hints for optimized brute-force sampling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h:595,Performance,optimiz,optimized,595,"// Internal toy generation. Since our _func is not a PDF (if it is, it doesn't make sense to use this wrapper),; // we cannot do anything.; /// Get specialised generator. Since the underlying function is not a PDF, this will always return zero.; // Int_t getGenerator(const RooArgSet& /*directVars*/, RooArgSet& /*generateVars*/,; // bool /*staticInitOK = true*/) const override { return 0; }; // void initGenerator(Int_t /*code*/) override { }; // void generateEvent(Int_t /*code*/) override { }; // bool isDirectGenSafe(const RooAbsArg& /*arg*/) const override { return false; }; // Hints for optimized brute-force sampling",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooWrapperPdf.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooWrapperPdf.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h:57,Integrability,interface,interfaces,57,"// Define ROOFIT_MEMORY_SAFE_INTERFACES to change RooFit interfaces to be; // memory safe.; // #define ROOFIT_MEMORY_SAFE_INTERFACES",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h:85,Safety,safe,safe,85,"// Define ROOFIT_MEMORY_SAFE_INTERFACES to change RooFit interfaces to be; // memory safe.; // #define ROOFIT_MEMORY_SAFE_INTERFACES",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h:382,Integrability,wrap,wraps,382,"/// An alias for raw pointers for indicating that the return type of a RooFit; /// function is an owning pointer that must be deleted by the caller. For; /// RooFit developers, it can be very useful to make this an alias to; /// std::unique_ptr<T>, in order to check that your code has no memory; /// problems. Changing this alias is equivalent to forcing all code immediately; /// wraps the result of functions returning a RooFit::OwningPtr<T> in a; /// std::unique_ptr<T>.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Config.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Config.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/EvalContext.h:29,Integrability,wrap,wrap,29,"// Comparison operators that wrap the pointer comparisons.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/EvalContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/EvalContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/ModelConfig.h:24,Deployability,configurat,configuration,24,"///< A class that holds configuration information for a model using a workspace as a store",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/ModelConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/ModelConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/ModelConfig.h:24,Modifiability,config,configuration,24,"///< A class that holds configuration information for a model using a workspace as a store",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/ModelConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/ModelConfig.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/UniqueId.h:49,Modifiability,enhance,enhance,49,"/// A UniqueId can be added as a class member to enhance any class with a; /// unique identifier for each instantiated object.; ///; /// Example:; /// ~~~{.cpp}; /// class MyClass {; ///; /// public:; /// /// Return unique ID by reference.; /// /// Please always use the name `uniqueId` for the getter.; /// UniqueId<MyClass> const& uniqueId() const { return _uniqueId; }; ///; /// private:; /// const UniqueId<MyClass> _uniqueId; //! should be non-persistent; ///; /// };; /// ~~~",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/UniqueId.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/UniqueId.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:160,Energy Efficiency,reduce,reducer,160,"/// @brief Figure out the output size of a node. It is the size of the; /// vector observable that it depends on, or 1 if it doesn't depend on any; /// or is a reducer node.; /// @param key The node to look up the size for.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:102,Integrability,depend,depends,102,"/// @brief Figure out the output size of a node. It is the size of the; /// vector observable that it depends on, or 1 if it doesn't depend on any; /// or is a reducer node.; /// @param key The node to look up the size for.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:133,Integrability,depend,depend,133,"/// @brief Figure out the output size of a node. It is the size of the; /// vector observable that it depends on, or 1 if it doesn't depend on any; /// or is a reducer node.; /// @param key The node to look up the size for.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:70,Integrability,wrap,wrap,70,"/// @brief A class to manage loop scopes using the RAII technique. To wrap your code around a loop,; /// simply place it between a brace inclosed scope with a call to beginLoop at the top. For e.g.; /// {; /// auto scope = ctx.beginLoop({<-set of vector observables to loop over->});; /// // your loop body code goes here.; /// }",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:105,Usability,simpl,simply,105,"/// @brief A class to manage loop scopes using the RAII technique. To wrap your code around a loop,; /// simply place it between a brace inclosed scope with a call to beginLoop at the top. For e.g.; /// {; /// auto scope = ctx.beginLoop({<-set of vector observables to loop over->});; /// // your loop body code goes here.; /// }",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:73,Safety,avoid,avoid,73,"// If input is integer, we want to print it into the code like one (i.e. avoid the unnecessary '.0000').",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:51,Modifiability,variab,variables,51,"/// @brief Index to get unique names for temporary variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:44,Integrability,inject,injected,44,"/// @brief Stores code that eventually gets injected into main code body.; /// Mainly used for placing decls outside of loops.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h:44,Security,inject,injected,44,"/// @brief Stores code that eventually gets injected into main code body.; /// Mainly used for placing decls outside of loops.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:14,Usability,simpl,simplification,14,"// Note: this simplification does not work with Clad as of v1.1!; // return gaussian(x, mean, x < mean ? sigmaL : sigmaR);",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:14,Testability,log,log,14,"// piece-wise log",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:24,Testability,log,log-normal,24,"// parabolic version of log-normal",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:139,Deployability,update,update,139,"// Special handling of this case since std::log(Poisson(0,0)=0 but can't be; // calculated with usual log-formula since std::log(mu)=0. No update of result; // is required since term=0.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:44,Testability,log,log,44,"// Special handling of this case since std::log(Poisson(0,0)=0 but can't be; // calculated with usual log-formula since std::log(mu)=0. No update of result; // is required since term=0.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:102,Testability,log,log-formula,102,"// Special handling of this case since std::log(Poisson(0,0)=0 but can't be; // calculated with usual log-formula since std::log(mu)=0. No update of result; // is required since term=0.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:125,Testability,log,log,125,"// Special handling of this case since std::log(Poisson(0,0)=0 but can't be; // calculated with usual log-formula since std::log(mu)=0. No update of result; // is required since term=0.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:228,Deployability,integrat,integrate,228,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:292,Deployability,integrat,integrate,292,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:228,Integrability,integrat,integrate,228,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:292,Integrability,integrat,integrate,292,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:216,Modifiability,variab,variable,216,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:280,Modifiability,variab,variable,280,"/// @brief Function to calculate the integral of an un-normalized RooGaussian over x. To calculate the integral over; /// mean, just interchange the respective values of x and mean.; /// @param xMin Minimum value of variable to integrate wrt.; /// @param xMax Maximum value of of variable to integrate wrt.; /// @param mean Mean.; /// @param sigma Sigma.; /// @return The integral of an un-normalized RooGaussian over the value in x.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:20,Availability,avail,available,20,"/// use fast FMA if available, fall back to normal arithmetic if not",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:53,Deployability,integrat,integrate,53,"// coefficient for integral(T_0(x)) is 1 (implicit), integrate by hand; // T_0(x) and T_1(x), and use for n > 1: integral(T_n(x) dx) =; // (T_n+1(x) / (n + 1) - T_n-1(x) / (n - 1)) / 2",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:53,Integrability,integrat,integrate,53,"// coefficient for integral(T_0(x)) is 1 (implicit), integrate by hand; // T_0(x) and T_1(x), and use for n > 1: integral(T_n(x) dx) =; // (T_n+1(x) / (n + 1) - T_n-1(x) / (n - 1)) / 2",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Deployability,integrat,integrate,3,"// integrate T_0(x) by hand",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Integrability,integrat,integrate,3,"// integrate T_0(x) by hand",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Deployability,integrat,integrate,3,"// integrate T_1(x) by hand...",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Integrability,integrat,integrate,3,"// integrate T_1(x) by hand...",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Deployability,integrat,integrate,3,"// integrate using recursion relation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Integrability,integrat,integrate,3,"// integrate using recursion relation",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Safety,Avoid,Avoid,3,"// Avoid catastrophic cancellation in the high tails:",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:74,Energy Efficiency,power,power,74,"// for each of the i Bernstein basis polynomials; // represent it in the 'power basis' (the naive polynomial basis); // where the integral is straight forward.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h:3,Energy Efficiency,power,power,3,"// power basis≈ß",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/MathFuncs.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/NormalizationHelpers.h:54,Performance,optimiz,optimization,54,"// This information is used for the binned likelihood optimization.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/Detail/NormalizationHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/Detail/NormalizationHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/buildLikelihood.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:4,Integrability,Synchroniz,Synchronize,4,"/// Synchronize minimizer settings with calculators in child classes.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodGradientWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:27,Integrability,wrap,wrappers,27,"/// For communication with wrappers, an instance of this struct must be shared between them and MinuitFcnGrad. It keeps; /// track of what has been evaluated for the current parameter set provided by Minuit.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:75,Deployability,update,update,75,"// indicate whether that part has been calculated since the last parameter update",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:4,Integrability,Synchroniz,Synchronize,4,"/// Synchronize minimizer settings with calculators in child classes",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/LikelihoodWrapper.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:16,Integrability,wrap,wrapper,16,"/// Convenience wrapper class used to distinguish between pdf/data owning and non-owning constructors.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:720,Testability,log,log,720,"/*; * \brief Evaluate (part of) the likelihood over a given range of events and components; *; * A fractional event range is used because components may have different numbers of events. For a; * multi-component RooSumL, for instance, this means the caller need not indicate for each component which event; * ranges they want to evaluate, but can just pass one overall fractional range.; *; * \param[in] events The fractional event range.; * \param[in] components_begin The first component to be calculated.; * \param[in] components_end The *exclusive* upper limit to the range of components to be calculated, i.e. the; * component *before this one* is the last to be included. \return The value of part of the negative log likelihood,; * returned as a KahanSum object which also includes a carry term.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:11,Integrability,Interface,Interface,11,"/// \brief Interface function signaling a request to perform constant term optimization.; ///; /// The default implementation takes no action other than to forward the calls to all servers. May be overridden in; /// likelihood classes without a cached dataset, like RooSubsidiaryL.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:53,Performance,perform,perform,53,"/// \brief Interface function signaling a request to perform constant term optimization.; ///; /// The default implementation takes no action other than to forward the calls to all servers. May be overridden in; /// likelihood classes without a cached dataset, like RooSubsidiaryL.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:75,Performance,optimiz,optimization,75,"/// \brief Interface function signaling a request to perform constant term optimization.; ///; /// The default implementation takes no action other than to forward the calls to all servers. May be overridden in; /// likelihood classes without a cached dataset, like RooSubsidiaryL.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:245,Performance,cache,cached,245,"/// \brief Interface function signaling a request to perform constant term optimization.; ///; /// The default implementation takes no action other than to forward the calls to all servers. May be overridden in; /// likelihood classes without a cached dataset, like RooSubsidiaryL.",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooAbsL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h:12,Performance,cache,cache,12,"// used for cache together with the parameter tracker",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooBinnedL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooRealL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooRealL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooRealL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSubsidiaryL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooSubsidiaryL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSubsidiaryL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h:92,Availability,error,error,92,"// Note: when above ctor is called without std::moving components, you get a really obscure error. Pass as; // std::move(components)!",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooSumL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h:12,Performance,cache,cache,12,"// used for cache together with the parameter tracker",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h:13,Testability,Test,TestStatistics,13,"// namespace TestStatistics",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFit/TestStatistics/RooUnbinnedL.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitLegacy/RooCatTypeLegacy.h:12,Integrability,interface,interface,12,"// Printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitLegacy/RooCatTypeLegacy.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitLegacy/RooCatTypeLegacy.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitLegacy/RooTreeData.h:11,Modifiability,variab,variables,11,"///< Truth variables",MatchSource.CODE_COMMENT,roofit/roofitcore/inc/RooFitLegacy/RooTreeData.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/inc/RooFitLegacy/RooTreeData.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h:140,Deployability,integrat,integrated,140,"/// Disable all caches for sub-branches in an expression tree.; /// This is helpful when an expression with cached sub-branches needs to be integrated numerically.",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooFitImplHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h:140,Integrability,integrat,integrated,140,"/// Disable all caches for sub-branches in an expression tree.; /// This is helpful when an expression with cached sub-branches needs to be integrated numerically.",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooFitImplHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h:16,Performance,cache,caches,16,"/// Disable all caches for sub-branches in an expression tree.; /// This is helpful when an expression with cached sub-branches needs to be integrated numerically.",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooFitImplHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h:108,Performance,cache,cached,108,"/// Disable all caches for sub-branches in an expression tree.; /// This is helpful when an expression with cached sub-branches needs to be integrated numerically.",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooFitImplHelpers.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooFitImplHelpers.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:10,Availability,toler,tolerance,10,/*; * The tolerance for the curve test is put to 0.4 instead of 0.2 to take into; * account the small variations in the values of the likelihood which can occur; * in presence of a different treatment of floating point numbers.; */,MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:34,Testability,test,test,34,/*; * The tolerance for the curve test is put to 0.4 instead of 0.2 to take into; * account the small variations in the values of the likelihood which can occur; * in presence of a different treatment of floating point numbers.; */,MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:20,Availability,toler,tolerance,20,"///< histogram test tolerance (KS dist != prob)",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:15,Testability,test,test,15,"///< histogram test tolerance (KS dist != prob)",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:16,Availability,toler,tolerance,16,"///< curve test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:11,Testability,test,test,11,"///< curve test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:16,Availability,toler,tolerance,16,"///< curve test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:11,Testability,test,test,11,"///< curve test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:24,Availability,toler,tolerance,24,"///< fit parameter test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:19,Testability,test,test,19,"///< fit parameter test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:26,Availability,toler,tolerance,26,"///< fit correlation test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:21,Testability,test,test,21,"///< fit correlation test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:16,Availability,toler,tolerance,16,"///< value test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h:11,Testability,test,test,11,"///< value test tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/res/RooUnitTest.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/res/RooUnitTest.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:6,Safety,avoid,avoid,6,"// To avoid deleted move assignment.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BatchModeDataHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:10,Modifiability,variab,variable,10,"// output variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BatchModeDataHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:717,Usability,guid,guide,717,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Extract all content from a RooFit datasets as a map of spans.; /// Spans with the weights and squared weights will be also stored in the map,; /// keyed with the names `_weight` and the `_weight_sumW2`. If the dataset is; /// unweighted, these weight spans will only contain the single value `1.0`.; /// Entries with zero weight will be skipped.; ///; /// \return A `std::map` with spans keyed to name pointers.; /// \param[in] data The input dataset.; /// \param[in] rangeName Select only entries from the data in a given range; /// (empty string for no range).; /// \param[in] simPdf A simultaneous pdf to use as a guide for splitting the; /// dataset. The spans from each channel data will be prefixed with; /// the channel name.; /// \param[in] skipZeroWeights Skip entries with zero weight when filling the; /// data spans. Be very careful with enabling it, because the user; /// might not expect that the batch results are not aligned with the; /// original dataset anymore!; /// \param[in] takeGlobalObservablesFromData Take also the global observables; /// stored in the dataset.; /// \param[in] buffers Pass here an empty stack of `double` vectors, which will; /// be used as memory for the data if the memory in the dataset; /// object can't be used directly (e.g. because you used the range; /// selection or the splitting by categories).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BatchModeDataHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:31,Availability,alive,alive,31,"// The dataset need to be kept alive because the datamap points to their content",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BatchModeDataHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx:10,Modifiability,variab,variable,10,"// output variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BatchModeDataHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BatchModeDataHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:27,Availability,error,error,27,"///< buffer containing the error message; /// for the POSIX version of strerror_r",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:33,Integrability,message,message,33,"///< buffer containing the error message; /// for the POSIX version of strerror_r",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:23,Availability,error,error,23,"/// constructor taking error code, hint on operation (msg)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:243,Energy Efficiency,allocate,allocated,243,"/** @brief class representing a page pool; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * pool of mmapped pages (on systems which support it, on all others, the; * functionality is emulated with dynamically allocated memory); *; * in most operating systems there is a limit to how many mappings any one; * process is allowed to request; for this reason, we mmap a relatively; * large amount up front, and then carve off little pieces as we need them; *; * Moreover, some systems have too large a physical page size in their MMU; * for the code to handle (we want offsets and lengths to fit into 16; * bits), so we carve such big physical pages into smaller logical Pages; * if needed. The largest logical page size is currently 16 KiB.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:693,Testability,log,logical,693,"/** @brief class representing a page pool; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * pool of mmapped pages (on systems which support it, on all others, the; * functionality is emulated with dynamically allocated memory); *; * in most operating systems there is a limit to how many mappings any one; * process is allowed to request; for this reason, we mmap a relatively; * large amount up front, and then carve off little pieces as we need them; *; * Moreover, some systems have too large a physical page size in their MMU; * for the code to handle (we want offsets and lengths to fit into 16; * bits), so we carve such big physical pages into smaller logical Pages; * if needed. The largest logical page size is currently 16 KiB.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:733,Testability,log,logical,733,"/** @brief class representing a page pool; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * pool of mmapped pages (on systems which support it, on all others, the; * functionality is emulated with dynamically allocated memory); *; * in most operating systems there is a limit to how many mappings any one; * process is allowed to request; for this reason, we mmap a relatively; * large amount up front, and then carve off little pieces as we need them; *; * Moreover, some systems have too large a physical page size in their MMU; * for the code to handle (we want offsets and lengths to fit into 16; * bits), so we carve such big physical pages into smaller logical Pages; * if needed. The largest logical page size is currently 16 KiB.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:12,Testability,log,logical,12,"/// return (logical) page size of the system",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:31,Energy Efficiency,allocate,allocate,31,"/// find size of next chunk to allocate (in a hopefully smart way)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:4,Deployability,release,release,4,"/// release a chunk",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:4,Deployability,release,release,4,"/// release a chunk",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:14,Availability,failure,failure,14,"// in case of failure or implausible value, use a safe default: 4k; // page size, and do not try to mmap",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:50,Safety,safe,safe,50,"// in case of failure or implausible value, use a safe default: 4k; // page size, and do not try to mmap",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:575,Safety,safe,safe,575,"// try to mprotect the other bits of the pool with no access...; // we'd really like a version of mremap here that can unmap all the; // other pages in the chunk, but that does not exist, so we protect; // the other pages in this chunk such that they may neither be read,; // written nor executed, only the pages we're interested in for; // communications stay readable and writable; //; // if an OS does not support changing the protection of a part of an; // mmapped area, the mprotect calls below should just fail and not; // change any protection, so we're a little less safe against; // corruption, but everything should still work",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:54,Security,access,access,54,"// try to mprotect the other bits of the pool with no access...; // we'd really like a version of mremap here that can unmap all the; // other pages in the chunk, but that does not exist, so we protect; // the other pages in this chunk such that they may neither be read,; // written nor executed, only the pages we're interested in for; // communications stay readable and writable; //; // if an OS does not support changing the protection of a part of an; // mmapped area, the mprotect calls below should just fail and not; // change any protection, so we're a little less safe against; // corruption, but everything should still work",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:6,Testability,log,logical,6,"// if logical and physical page size differ, we may have to adjust; // m_nPgPerGrp to make things fit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Energy Efficiency,allocate,allocate,3,"// allocate and register new chunk and put it on the freelist",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:24,Availability,avail,available,24,"// no chunks with space available, figure out chunk size",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:75,Availability,down,down,75,"// register a cleanup handler to make sure all BidirMMapPipes are torn; // down, and child processes are sent a SIGTERM",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Availability,error,error,3,"// error in fork()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:47,Availability,alive,alive,47,"// handshake with other end (to make sure it's alive)...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:47,Availability,alive,alive,47,"// handshake with other end (to make sure it's alive)...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:16,Usability,clear,clear,16,"// ok, finally, clear the failbit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:8,Availability,down,down,8,"// shut down the write direction (no more writes from our side)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:8,Availability,down,down,8,"// shut down the write direction (no more writes from our side); // drain anything the other end might still want to send",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:68,Energy Efficiency,drain,drain,68,"// shut down the write direction (no more writes from our side); // drain anything the other end might still want to send",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:84,Availability,reliab,reliably,84,"// **************** THIS IS EXTREMELY UGLY: ****************; // POLLHUP is not set reliably on pipe/socket shutdown on all; // platforms, unfortunately, so we poll for readability here until; // the other end closes, too; //; // the read loop below ensures that the other end sees the POLLIN that; // is set on shutdown instead, and goes ahead to close its end; //; // if we don't do this, and close straight away, the other end; // will catch a SIGPIPE or similar, and we don't want that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:25,Availability,error,errors,25,"// ignore all other poll errors",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:11,Availability,error,error,11,"// ok some error occurred, so figure out if we want to retry of throw",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:25,Availability,error,error,25,"// break in case of read error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:25,Usability,simpl,simple,25,"// free page...; // Very simple algorithm: once we're done with a page, we send it back; // where it came from. If it's from our end, we put it on the free list, if; // it's from the other end, we send it back.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Performance,queue,queue,3,"// queue for sending",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:34,Availability,alive,alive,34,"// poll if the other end is still alive - this needs that we first; // close the write pipe of the other end when the remote end of the; // connection is shutting down in doClose; we'll see that because we; // get a POLLHUP on our inpipe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:163,Availability,down,down,163,"// poll if the other end is still alive - this needs that we first; // close the write pipe of the other end when the remote end of the; // connection is shutting down in doClose; we'll see that because we; // get a POLLHUP on our inpipe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:19,Availability,avail,available,19,"// queue any pages available for reading we can without blocking",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Performance,queue,queue,3,"// queue any pages available for reading we can without blocking",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:19,Availability,avail,available,19,"// queue any pages available for reading we can without blocking",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Performance,queue,queue,3,"// queue any pages available for reading we can without blocking",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:31,Energy Efficiency,consumption,consumption,31,"// queue all pages waiting for consumption in the pipe before we give an; // answer",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Performance,queue,queue,3,"// queue all pages waiting for consumption in the pipe before we give an; // answer",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:31,Energy Efficiency,consumption,consumption,31,"// queue all pages waiting for consumption in the pipe before we give an; // answer",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Performance,queue,queue,3,"// queue all pages waiting for consumption in the pipe before we give an; // answer",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:136,Safety,timeout,timeout,136,"// go through pipes, and change flags where we already know without really; // polling - stuff where we don't need poll to wait for its timeout in the; // OS...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:13,Availability,error,error,13,"// check for error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:53,Performance,queue,queue,53,"// we always poll for readability; this allows us to queue pages; // early",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:34,Deployability,update,update,34,"// fds may have changed state, so update...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:17,Availability,mask,masks,17,"// apply correct masks, and count pipes with pending events",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:17,Availability,echo,echo,17,"// child does an echo loop",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:34,Availability,down,down,34,"// did our parent tell us to shut down?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:30,Availability,down,down,30,"// tell parent we're shutting down",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:46,Availability,ping,pings,46,"// child does the equivalent of listening for pings and sending the; // packet back",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:23,Availability,down,down,23,"// tell parent to shut down",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,Availability,echo,echo,10,"// simple echo loop test",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:20,Testability,test,test,20,"// simple echo loop test",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Usability,simpl,simple,3,"// simple echo loop test",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:15,Testability,test,test,15,"// simple poll test - children send 5 results in random intervals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:3,Usability,simpl,simple,3,"// simple poll test - children send 5 results in random intervals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:32,Availability,alive,alive,32,"// while at least some children alive",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:44,Safety,timeout,timeout,44,"// poll, wait until status change (infinite timeout)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:21,Availability,down,down,21,"// child is shutting down...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:21,Availability,error,error,21,"// retire pipes with error or end-of-file condition",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,Testability,benchmark,benchmark,10,"// little benchmark - round trip time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,Testability,benchmark,benchmark,10,"// little benchmark - child as sink",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx:10,Testability,benchmark,benchmark,10,"// little benchmark - child as source",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:352,Deployability,release,release,352,/** @brief class representing a chunk of pages; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * allocating pages from the OS happens in chunks in order to not exhaust; * the maximum allowed number of memory mappings per process; this class; * takes care of such a chunk; *; * a page chunk allows callers to obtain or release pages in groups of; * continuous pages of fixed size; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:382,Deployability,continuous,continuous,382,/** @brief class representing a chunk of pages; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * allocating pages from the OS happens in chunks in order to not exhaust; * the maximum allowed number of memory mappings per process; this class; * takes care of such a chunk; *; * a page chunk allows callers to obtain or release pages in groups of; * continuous pages of fixed size; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5,Testability,log,logical,5,"///< logical page size (run-time determined); /// mmap variety that works on this system",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:15,Testability,log,logical,15,"/// return the logical page size",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:155,Deployability,continuous,continuous,155,/** @brief handle class for a number of Pages; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-24; *; * the associated pages are continuous in memory; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:27,Security,access,accessible,27,"/// return number of pages accessible",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4,Performance,perform,perform,4,"/// perform page to page number mapping",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4,Performance,perform,perform,4,"/// perform page to page number mapping",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1168,Availability,avail,available,1168,"r <manuel.schiller@nikhef.nl>; * @date 2013-07-07; *; * This class creates a bidirectional channel between this process and a child; * it creates with fork().; *; * The channel is comrised of a small shared pool of buffer memory mmapped into; * both process spaces, and two pipes to synchronise the exchange of data. The; * idea behind using the pipes at all is to have some primitive which we can; * block on without having to worry about atomic operations or polling, leaving; * these tasks to the OS. In case the anonymous mmap cannot be performed on the; * OS the code is running on (for whatever reason), the code falls back to; * mmapping /dev/zero, mmapping a temporary file, or (if those all fail), a; * dynamically allocated buffer which is then transmitted through the pipe(s),; * a slightly slower alternative (because the data is copied more often).; *; * The channel supports five major operations: read(), write(), flush(),; * purge() and close(). Reading and writing may block until the required buffer; * space is available. Writes may queue up data to be sent to the other end; * until either enough pages are full, or the user calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which al",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3212,Availability,error,errors,3212," polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pages, and eventually tries to put; * them on the its list; if a page belongs to the other end of the; * connection, it is sent back; * - lists of pages are sent across the pipe, not individual pages, in order; * to minimise the number of read/write operations needed; *",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3344,Availability,error,error,3344,"rMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pages, and eventually tries to put; * them on the its list; if a page belongs to the other end of the; * connection, it is sent back; * - lists of pages are sent across the pipe, not individual pages, in order; * to minimise the number of read/write operations needed; * - when mmap works properly, only one bytes containing the page number of; * the page list head is sent back and forth; the contents of that page; * allow to access the rest of the p",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5550,Availability,echo,echo,5550,"ork, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understand. it's much better to come up with a design; * which does not need pipes to be shared among more than two processes.; *; * Here is a trivial example of a parent and a child talking to each other over; * a BidirMMapPipe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechil",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5746,Availability,down,down,5746,"ansmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understand. it's much better to come up with a design; * which does not need pipes to be shared among more than two processes.; *; * Here is a trivial example of a parent and a child talking to each other over; * a BidirMMapPipe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:6881,Availability,down,down,6881," std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depend",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:7960,Availability,down,down,7960,"; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depending on your OS's scheduling quirks, you may catch a SIGPIPE if; * one end closes its pipe while the other is still trying to read.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2615,Deployability,install,install,2615," for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:862,Energy Efficiency,allocate,allocated,862,"/** @brief BidirMMapPipe creates a bidirectional channel between the current; * process and a child it forks.; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-07; *; * This class creates a bidirectional channel between this process and a child; * it creates with fork().; *; * The channel is comrised of a small shared pool of buffer memory mmapped into; * both process spaces, and two pipes to synchronise the exchange of data. The; * idea behind using the pipes at all is to have some primitive which we can; * block on without having to worry about atomic operations or polling, leaving; * these tasks to the OS. In case the anonymous mmap cannot be performed on the; * OS the code is running on (for whatever reason), the code falls back to; * mmapping /dev/zero, mmapping a temporary file, or (if those all fail), a; * dynamically allocated buffer which is then transmitted through the pipe(s),; * a slightly slower alternative (because the data is copied more often).; *; * The channel supports five major operations: read(), write(), flush(),; * purge() and close(). Reading and writing may block until the required buffer; * space is available. Writes may queue up data to be sent to the other end; * until either enough pages are full, or the user calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3487,Energy Efficiency,allocate,allocated,3487," or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pages, and eventually tries to put; * them on the its list; if a page belongs to the other end of the; * connection, it is sent back; * - lists of pages are sent across the pipe, not individual pages, in order; * to minimise the number of read/write operations needed; * - when mmap works properly, only one bytes containing the page number of; * the page list head is sent back and forth; the contents of that page; * allow to access the rest of the page list sent, and page headers on the; * list tell the receiving end if the page is free or has to be added to the; * busy list; * - when mmap does not work, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understa",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:8027,Energy Efficiency,schedul,scheduling,8027,"; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depending on your OS's scheduling quirks, you may catch a SIGPIPE if; * one end closes its pipe while the other is still trying to read.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:7164,Integrability,protocol,protocols,7164," std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depend",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:7894,Integrability,protocol,protocol,7894,"; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depending on your OS's scheduling quirks, you may catch a SIGPIPE if; * one end closes its pipe while the other is still trying to read.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:8004,Integrability,depend,depending,8004,"; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a single go (one; * flush). Then, the server has everything it needs, and hopefully, it'll; * shut up for a while and to let the client do something useful in the; * meantime... The same goes when the server replies to the request: include; * everything there is to know about the result of the request in the reply.; * - The expensive operation should be the request that is made, all other; * operations should somehow be formulated as options or properties to that; * request.; * - Include a shutdown handshake in whatever protocol you send over the; * pipe. That way, you can shut things down in a controlled way. Otherwise,; * and depending on your OS's scheduling quirks, you may catch a SIGPIPE if; * one end closes its pipe while the other is still trying to read.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:679,Performance,perform,performed,679,"/** @brief BidirMMapPipe creates a bidirectional channel between the current; * process and a child it forks.; *; * @author Manuel Schiller <manuel.schiller@nikhef.nl>; * @date 2013-07-07; *; * This class creates a bidirectional channel between this process and a child; * it creates with fork().; *; * The channel is comrised of a small shared pool of buffer memory mmapped into; * both process spaces, and two pipes to synchronise the exchange of data. The; * idea behind using the pipes at all is to have some primitive which we can; * block on without having to worry about atomic operations or polling, leaving; * these tasks to the OS. In case the anonymous mmap cannot be performed on the; * OS the code is running on (for whatever reason), the code falls back to; * mmapping /dev/zero, mmapping a temporary file, or (if those all fail), a; * dynamically allocated buffer which is then transmitted through the pipe(s),; * a slightly slower alternative (because the data is copied more often).; *; * The channel supports five major operations: read(), write(), flush(),; * purge() and close(). Reading and writing may block until the required buffer; * space is available. Writes may queue up data to be sent to the other end; * until either enough pages are full, or the user calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1190,Performance,queue,queue,1190,"d; * it creates with fork().; *; * The channel is comrised of a small shared pool of buffer memory mmapped into; * both process spaces, and two pipes to synchronise the exchange of data. The; * idea behind using the pipes at all is to have some primitive which we can; * block on without having to worry about atomic operations or polling, leaving; * these tasks to the OS. In case the anonymous mmap cannot be performed on the; * OS the code is running on (for whatever reason), the code falls back to; * mmapping /dev/zero, mmapping a temporary file, or (if those all fail), a; * dynamically allocated buffer which is then transmitted through the pipe(s),; * a slightly slower alternative (because the data is copied more often).; *; * The channel supports five major operations: read(), write(), flush(),; * purge() and close(). Reading and writing may block until the required buffer; * space is available. Writes may queue up data to be sent to the other end; * until either enough pages are full, or the user calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1968,Performance,perform,performance,1968,"opied more often).; *; * The channel supports five major operations: read(), write(), flush(),; * purge() and close(). Reading and writing may block until the required buffer; * space is available. Writes may queue up data to be sent to the other end; * until either enough pages are full, or the user calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2276,Performance,perform,performed,2276,"er calls flush which forces; * any unsent buffers to be sent to the other end. flush forces any data that; * is to be sent to be sent. purge discards any buffered data waiting to be; * read and/or sent. Closing the channel on the child returns zero, closing it; * on the parent returns the child's exit status.; *; * The class also provides operator<< and operator>> for C++-style I/O for; * basic data types (bool, char, short, int, long, long long, float, double; * and their unsigned counterparts). Data is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. Fo",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2830,Safety,avoid,avoid,2830," is transmitted binary (i.e. no; * formatting to strings like std::cout does). There are also overloads to; * support C-style zero terminated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mm",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2953,Safety,safe,safe,2953,"nated strings and std::string. In terms of; * performance, the former is to be preferred.; *; * If the caller needs to multiplex input and output to/from several pipes, the; * class provides the poll() method which allows to block until an event occurs; * on any of the polled pipes.; *; * After the BidirMMapPipe is closed, no further operations may be performed on; * that object, save for the destructor which may still be called.; *; * If the BidirMMapPipe has not properly been closed, the destructor will call; * close. However, the exit code of the child is lost in that case.; *; * Closing the object causes the mmapped memory to be unmapped and the two; * pipes to be closed. We also install an atexit handler in the process of; * creating BidirMMapPipes. This ensures that when the current process; * terminates, a SIGTERM signal is sent to the child processes created for all; * unclosed pipes to avoid leaving zombie processes in the OS's process table.; *; * BidirMMapPipe creation, closing and destruction are thread safe. If the; * BidirMMapPipe is used in more than one thread, the other operations have to; * be protected with a mutex (or something similar), though.; *; * End of file (other end closed its pipe, or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pa",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4349,Security,access,access,4349," or died) is indicated with the eof(); * method, serious I/O errors set a flags (bad(), fail()), and also throw; * exceptions. For normal read/write operations, they can be suppressed (i.e.; * error reporting only using flags) with a constructor argument.; *; * Technicalities:; * - there is a pool of mmapped pages, half the pages are allocated to the; * parent process, half to the child; * - when one side has accumulated enough data (or a flush forces dirty pages; * out to the other end), it sends these pages to the other end by writing a; * byte containing the page number into the pipe; * - the other end (which has the pages mmapped, too) reads the page number(s); * and puts the corresponding pages on its busy list; * - as the other ends reads, it frees busy pages, and eventually tries to put; * them on the its list; if a page belongs to the other end of the; * connection, it is sent back; * - lists of pages are sent across the pipe, not individual pages, in order; * to minimise the number of read/write operations needed; * - when mmap works properly, only one bytes containing the page number of; * the page list head is sent back and forth; the contents of that page; * allow to access the rest of the page list sent, and page headers on the; * list tell the receiving end if the page is free or has to be added to the; * busy list; * - when mmap does not work, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understa",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:6446,Testability,test,test,6446,"pe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5492,Usability,simpl,simplechild,5492,"ork, we transfer one byte to indicate the head of the; * page list sent, and for each page on the list of sent pages, the page; * header and the page payload is sent (if the page is free, we only; * transmit the page header, and we never transmit more payload than; * the page actually contains); * - in the child, all open BidirMMapPipes but the current one are closed. this; * is done for two reasons: first, to conserve file descriptors and address; * space. second, if more than one process is meant to use such a; * BidirMMapPipe, synchronisation issues arise which can lead to bugs that; * are hard to find and understand. it's much better to come up with a design; * which does not need pipes to be shared among more than two processes.; *; * Here is a trivial example of a parent and a child talking to each other over; * a BidirMMapPipe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechil",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:6420,Usability,simpl,simple,6420,"pe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:6517,Usability,simpl,simplechild,6517,"pe:; * @code; * #include <string>; * #include <iostream>; * #include <cstdlib>; *; * #include ""BidirMMapPipe.h""; *; * int simplechild(BidirMMapPipe& pipe); * {; * // child does an echo loop; * while (pipe.good() && !pipe.eof()) {; * // read a string; * std::string str;; * pipe >> str;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * // check if parent wants us to shut down; * if (!str.empty()) {; * std::cout << ""[CHILD] : read: "" << str << std::endl;; * str = ""... early in the morning?"";; * }; * pipe << str << BidirMMapPipe::flush;; * if (str.empty()) break;; * if (!pipe) return -1;; * std::cout << ""[CHILD] : wrote: "" << str << std::endl;; * }; * // send shutdown request acknowledged; * pipe << """" << BidirMMapPipe::flush;; *; * pipe.close();; * return 0;; * }; *; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * std::cout << ""[PARENT]: simple challenge-response test, one child:"" <<; * std::endl;; * BidirMMapPipe* pipe = spawnChild(simplechild);; * for (int i = 0; i < 5; ++i) {; * std::string str(""What shall we do with a drunken sailor..."");; * *pipe << str << BidirMMapPipe::flush;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: wrote: "" << str << std::endl;; * *pipe >> str;; * if (!*pipe) return -1;; * std::cout << ""[PARENT]: read: "" << str << std::endl;; * }; * // ask child to shut down; * pipe << """" << BidirMMapPipe::flush;; * // wait for it to see the shutdown request; * std::string s;; * pipe >> s;; * std::cout << ""[PARENT]: exit status of child: "" << pipe->close() <<; * std::endl;; * delete pipe;; * return 0;; * }; * @endcode; *; * When designing your own protocols to use over the pipe, there are a few; * things to bear in mind:; * - Do as http does: When building a request, send all the options and; * properties of that request with the request itself in a s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:13,Availability,failure,failure,13,"///< logical failure (e.g. pipe closed)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5,Testability,log,logical,5,"///< logical failure (e.g. pipe closed)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:10,Availability,error,error,10,"///< read error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:11,Availability,error,error,11,"///< write error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:17,Availability,error,error,17,"///< general I/O error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:5,Availability,error,error,5,"///< error reporting with exceptions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:375,Availability,error,error,375,"/** @brief constructor (forks!); *; * Creates a bidirectional communications channel between this process; * and a child the constructor forks. On return from the constructor,; * isParent() and isChild() can be used to tell the parent end from the; * child end of the pipe. In the child, all other open BidirMMapPipes; * are closed.; *; * @param useExceptions read()/write() error reporting also done using; * exceptions; * @param useSocketpair use a socketpair instead of a pair or pipes; *; * Normally, exceptions are thrown for all serious I/O errors (apart; * from end of file). Setting useExceptions to false will force the; * read() and write() methods to only report serious I/O errors using; * flags.; *; * When useSocketpair is true, use a pair of Unix domain sockets; * created using socketpair instead a pair of pipes. The advantage is; * that only one pair of file descriptors is needed instead of two; * pairs which are needed for the pipe pair. Performance should very; * similar on most platforms, especially if mmap works, since only; * very little data is sent through the pipe(s)/socketpair.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:547,Availability,error,errors,547,"/** @brief constructor (forks!); *; * Creates a bidirectional communications channel between this process; * and a child the constructor forks. On return from the constructor,; * isParent() and isChild() can be used to tell the parent end from the; * child end of the pipe. In the child, all other open BidirMMapPipes; * are closed.; *; * @param useExceptions read()/write() error reporting also done using; * exceptions; * @param useSocketpair use a socketpair instead of a pair or pipes; *; * Normally, exceptions are thrown for all serious I/O errors (apart; * from end of file). Setting useExceptions to false will force the; * read() and write() methods to only report serious I/O errors using; * flags.; *; * When useSocketpair is true, use a pair of Unix domain sockets; * created using socketpair instead a pair of pipes. The advantage is; * that only one pair of file descriptors is needed instead of two; * pairs which are needed for the pipe pair. Performance should very; * similar on most platforms, especially if mmap works, since only; * very little data is sent through the pipe(s)/socketpair.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:686,Availability,error,errors,686,"/** @brief constructor (forks!); *; * Creates a bidirectional communications channel between this process; * and a child the constructor forks. On return from the constructor,; * isParent() and isChild() can be used to tell the parent end from the; * child end of the pipe. In the child, all other open BidirMMapPipes; * are closed.; *; * @param useExceptions read()/write() error reporting also done using; * exceptions; * @param useSocketpair use a socketpair instead of a pair or pipes; *; * Normally, exceptions are thrown for all serious I/O errors (apart; * from end of file). Setting useExceptions to false will force the; * read() and write() methods to only report serious I/O errors using; * flags.; *; * When useSocketpair is true, use a pair of Unix domain sockets; * created using socketpair instead a pair of pipes. The advantage is; * that only one pair of file descriptors is needed instead of two; * pairs which are needed for the pipe pair. Performance should very; * similar on most platforms, especially if mmap works, since only; * very little data is sent through the pipe(s)/socketpair.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:959,Performance,Perform,Performance,959,"/** @brief constructor (forks!); *; * Creates a bidirectional communications channel between this process; * and a child the constructor forks. On return from the constructor,; * isParent() and isChild() can be used to tell the parent end from the; * child end of the pipe. In the child, all other open BidirMMapPipes; * are closed.; *; * @param useExceptions read()/write() error reporting also done using; * exceptions; * @param useSocketpair use a socketpair instead of a pair or pipes; *; * Normally, exceptions are thrown for all serious I/O errors (apart; * from end of file). Setting useExceptions to false will force the; * read() and write() methods to only report serious I/O errors using; * flags.; *; * When useSocketpair is true, use a pair of Unix domain sockets; * created using socketpair instead a pair of pipes. The advantage is; * that only one pair of file descriptors is needed instead of two; * pairs which are needed for the pipe pair. Performance should very; * similar on most platforms, especially if mmap works, since only; * very little data is sent through the pipe(s)/socketpair.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:74,Integrability,message,messages,74,"/** @brief set the debug flags; *; * @param flag debug flags (if zero, no messages are printed); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:221,Availability,avail,available,221,"/** @brief read from pipe; *; * @param addr where to put read data; * @param sz size of data to read (in bytes); * @returns size of data read, or 0 in case of end-of-file; *; * read may block until data from other end is available. It will; * return 0 if the other end closed the pipe.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:265,Availability,avail,available,265,"/** @brief write to pipe; *; * @param addr where to get data to write from; * @param sz size of data to write (in bytes); * @returns size of data written, or 0 in case of end-of-file; *; * write may block until data can be written to other end (depends a; * bit on available buffer space). It will return 0 if the other end; * closed the pipe. The data is queued to be written on the next; * convenient occasion, or it can be forced out with flush().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:245,Integrability,depend,depends,245,"/** @brief write to pipe; *; * @param addr where to get data to write from; * @param sz size of data to write (in bytes); * @returns size of data written, or 0 in case of end-of-file; *; * write may block until data can be written to other end (depends a; * bit on available buffer space). It will return 0 if the other end; * closed the pipe. The data is queued to be written on the next; * convenient occasion, or it can be forced out with flush().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:356,Performance,queue,queued,356,"/** @brief write to pipe; *; * @param addr where to get data to write from; * @param sz size of data to write (in bytes); * @returns size of data written, or 0 in case of end-of-file; *; * write may block until data can be written to other end (depends a; * bit on available buffer space). It will return 0 if the other end; * closed the pipe. The data is queued to be written on the next; * convenient occasion, or it can be forced out with flush().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:192,Availability,error,error,192,/** @brief flush buffers with unwritten data; *; * This forces unwritten data to be written to the other end. The call; * will block until this has been done (or the attempt failed with an; * error).; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:10,Availability,error,error,10,"///< pipe error read end",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:10,Availability,error,error,10,"///< pipe error Write end",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:10,Availability,error,error,10,"///< pipe error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:15,Integrability,interface,interface,15,"/// for poll() interface",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:35,Integrability,interface,interface,35,"/// convenience typedef for poll() interface",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:85,Availability,error,error,85,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:304,Availability,error,error,304,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:893,Availability,error,error,893,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:899,Availability,Error,Error,899,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3078,Availability,alive,alive,3078," * ::usleep(int(1e6 * ::drand48()));; * std::ostringstream buf;; * buf << ""child pid "" << ::getpid() << "" sends message "" << i;; * std::cout << ""[CHILD] : "" << buf.str() << std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PAR",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3766,Availability,down,down,3766,"<< """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() << std::endl;; * if (retVal) return retVal;; * delete it->pipe;; * it = pipes.erase(it);; * continue;; * }; * }; * }; * return 0;; * }; * @endcode; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3875,Availability,error,error,3875,"<< """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() << std::endl;; * if (retVal) return retVal;; * delete it->pipe;; * it = pipes.erase(it);; * continue;; * }; * }; * }; * return 0;; * }; * @endcode; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3943,Availability,Error,Error,3943,"<< """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() << std::endl;; * if (retVal) return retVal;; * delete it->pipe;; * it = pipes.erase(it);; * continue;; * }; * }; * }; * return 0;; * }; * @endcode; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4038,Availability,Error,Error,4038,"<< """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() << std::endl;; * if (retVal) return retVal;; * delete it->pipe;; * it = pipes.erase(it);; * continue;; * }; * }; * }; * return 0;; * }; * @endcode; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1118,Energy Efficiency,schedul,scheduling,1118," * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:2144,Integrability,message,message,2144,"y and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * std::ostringstream buf;; * buf << ""child pid "" << ::getpid() << "" sends message "" << i;; * std::cout << ""[CHILD] : "" << buf.str() << std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty())",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1546,Performance,queue,queue,1546,",; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * std::ostringstream buf;; * buf << ""child pid "" << ::getpid() << "" sends message "" << i;; * std::cout << ""[CHILD] : "" << buf.str() << std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:143,Safety,timeout,timeout,143,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:151,Safety,timeout,timeout,151,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:253,Safety,timeout,timeout,253,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:316,Safety,Timeout,Timeout,316,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:402,Safety,timeout,timeout,402,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:496,Safety,timeout,timeout,496,"/** @brief poll a set of pipes for events (ready to read from, ready to; * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1072,Safety,timeout,timeout,1072," * write to, error); *; * @param pipes set of pipes to check; * @param timeout timeout in milliseconds; * @returns positive number: number of pipes which have; * status changes, 0: timeout, or no pipes with; * status changed, -1 on error; *; * Timeout can be zero (check for specified events, and return), finite; * (wait at most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:3159,Safety,timeout,timeout,3159,"std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait for parent to acknowledge; * std::string s;; * pipe >> s;; * pipe.close();; * return 0;; * }; *; * // function to spawn a child; * BidirMMapPipe* spawnChild(int (*childexec)(BidirMMapPipe&)); * {; * BidirMMapPipe *p = new BidirMMapPipe();; * if (p->isChild()) {; * int retVal = childexec(*p);; * delete p;; * std::exit(retVal);; * }; * return p;; * }; *; * int main(); * {; * typedef BidirMMapPipe::PollEntry PollEntry;; * // poll data structure; * BidirMMapPipe::PollVector pipes;; * pipes.reserve(3);; * // spawn children; * for (int i = 0; i < 3; ++i) {; * pipes.push_back(PollEntry(spawnChild(randomchild),; * BidirMMapPipe::Readable));; * }; * // while at least some children alive; * while (!pipes.empty()) {; * // poll, wait until status change (infinite timeout); * int npipes = BidirMMapPipe::poll(pipes, -1);; * // scan for pipes with changed status; * for (std::vector<PollEntry>::iterator it = pipes.begin();; * npipes && pipes.end() != it; ) {; * if (!it->revents) {; * // unchanged, next one; * ++it;; * continue;; * }; * --npipes; // maybe we can stop early...; * // read from pipes which are readable; * if (it->revents & BidirMMapPipe::Readable) {; * std::string s;; * *(it->pipe) >> s;; * if (!s.empty()) {; * std::cout << ""[PARENT]: Read from pipe "" <<; * it->pipe << "": "" << s << std::endl;; * ++it;; * continue;; * } else {; * // child is shutting down...; * *(it->pipe) << """" << BidirMMapPipe::flush;; * goto childcloses;; * }; * }; * // retire pipes with error or end-of-file condition; * if (it->revents & (BidirMMapPipe::Error |; * BidirMMapPipe::EndOfFile |; * BidirMMapPipe::Invalid)) {; * std::cout << ""[PARENT]: Error on pipe "" <<; * it->pipe << "" revents "" << it->revents <<; * std::endl;; * childcloses:; * std::cout << ""[PARENT]:\tchild exit status: "" <<; * it->pipe->close() ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:1427,Usability,simpl,simply,1427,"most timeout milliseconds before returning), or -1; * (infinite). The poll method returns when the timeout has elapsed,; * or if an event occurs on one of the pipes being polled, whichever; * happens earlier.; *; * Pipes is a vector of one or more PollEntries, which each list a pipe; * and events to poll for. If events is left empty (zero), all; * conditions are polled for, otherwise only the indicated ones. On; * return, the revents fields contain the events that occurred for each; * pipe; error Error, EndOfFile or Invalid events are always set,; * regardless of whether they were in the set of requested events.; *; * poll may block slightly longer than specified by timeout due to OS; * timer granularity and OS scheduling. Due to its implementation, the; * poll call can also return early if the remote end of the page sends; * a free page while polling (which is put on that pipe's freelist),; * while that pipe is polled for e.g Reading. The status of the pipe is; * indicated correctly in revents, and the caller can simply poll; * again. (The reason this is done this way is because it helps to; * replenish the pool of free pages and queue busy pages without; * blocking.); *; * Here's a piece of example code waiting on two pipes; if they become; * readable they are read:; * @code; * #include <unistd.h>; * #include <cstdlib>; * #include <string>; * #include <sstream>; * #include <iostream>; *; * #include ""BidirMMapPipe.h""; *; * // what to execute in the child; * int randomchild(BidirMMapPipe& pipe); * {; * ::srand48(::getpid());; * for (int i = 0; i < 5; ++i) {; * // sleep a random time between 0 and .9 seconds; * ::usleep(int(1e6 * ::drand48()));; * std::ostringstream buf;; * buf << ""child pid "" << ::getpid() << "" sends message "" << i;; * std::cout << ""[CHILD] : "" << buf.str() << std::endl;; * pipe << buf.str() << BidirMMapPipe::flush;; * if (!pipe) return -1;; * if (pipe.eof()) break;; * }; * // tell parent we're done; * pipe << """" << BidirMMapPipe::flush;; * // wait ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:19,Availability,failure,failure,19,"/** @brief logical failure (e.g. I/O on closed BidirMMapPipe); *; * @returns true in case of grave logical error (I/O on closed pipe,...); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:107,Availability,error,error,107,"/** @brief logical failure (e.g. I/O on closed BidirMMapPipe); *; * @returns true in case of grave logical error (I/O on closed pipe,...); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:11,Testability,log,logical,11,"/** @brief logical failure (e.g. I/O on closed BidirMMapPipe); *; * @returns true in case of grave logical error (I/O on closed pipe,...); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:99,Testability,log,logical,99,"/** @brief logical failure (e.g. I/O on closed BidirMMapPipe); *; * @returns true in case of grave logical error (I/O on closed pipe,...); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:23,Availability,error,error,23,/** @brief true on I/O error; *; * @returns true on I/O error; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:56,Availability,error,error,56,/** @brief true on I/O error; *; * @returns true on I/O error; */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:76,Availability,error,errors,76,"/** @brief status of stream is good; *; * @returns true if pipe is good (no errors, eof, ...); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:38,Availability,error,error,38,"/** @brief return true if not serious error (fail/bad); *; * @returns true if stream is does not have serious error (fail/bad); *; * (if EOF, this is still true); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:110,Availability,error,error,110,"/** @brief return true if not serious error (fail/bad); *; * @returns true if stream is does not have serious error (fail/bad); *; * (if EOF, this is still true); */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:34,Availability,error,error,34,/** @brief return true if serious error (fail/bad); *; * @returns true if stream has a serious error (fail/bad); */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:95,Availability,error,error,95,/** @brief return true if serious error (fail/bad); *; * @returns true if stream has a serious error (fail/bad); */,MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:75,Energy Efficiency,allocate,allocated,75,"/** @brief read a C-style string; *; * @param str pointer to string (space allocated with malloc!); * @returns pipe read from; *; * since this is for C-style strings, we use malloc/realloc/free for; * strings. passing in a nullptr pointer is valid here, and the routine; * will use realloc to allocate a chunk of memory of the right size.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:293,Energy Efficiency,allocate,allocate,293,"/** @brief read a C-style string; *; * @param str pointer to string (space allocated with malloc!); * @returns pipe read from; *; * since this is for C-style strings, we use malloc/realloc/free for; * strings. passing in a nullptr pointer is valid here, and the routine; * will use realloc to allocate a chunk of memory of the right size.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:262,Integrability,rout,routine,262,"/** @brief read a C-style string; *; * @param str pointer to string (space allocated with malloc!); * @returns pipe read from; *; * since this is for C-style strings, we use malloc/realloc/free for; * strings. passing in a nullptr pointer is valid here, and the routine; * will use realloc to allocate a chunk of memory of the right size.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:102,Integrability,message,message,102,"// TotPages = 16 will give 32k buffers at 4k page size for both; // parent and child; if your average message to send is larger; // than this, consider raising the value (max 256)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:107,Availability,avail,available,107,"///< pages per pipe end; // if FlushThresh pages are filled, the code forces a flush; 3/4; // of the pages available seems to work quite well",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:36,Integrability,rout,routine,36,"///< pid of the parent; /// cleanup routine - at exit, we want our children to get a SIGTERM...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:59,Performance,queue,queue,59,"/** @brief receive a pages from the other end (may block), queue them; *; * @returns number of pages received; *; * this is an application-level scatter read, which gets the list of; * pages to read from the pipe. if mmap works, it needs only one read; * call (to get the head of the list of pages transferred). if we need; * to copy pages through the pipe, we need to add one read for each; * empty page, and two reads for each non-empty page.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:152,Availability,avail,available,152,"/** @brief receive pages from other end (non-blocking); *; * @returns number of pages received; *; * like recvpages(), but does not block if nothing is available for; * reading; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h:4,Performance,perform,perform,4,"/// perform the flush",MatchSource.CODE_COMMENT,roofit/roofitcore/src/BidirMMapPipe.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/BidirMMapPipe.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx:3,Availability,error,error,3,"// error!",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ConstraintHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx:159,Testability,log,log-likelihood,159,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Create the parameter constraint sum to add to the negative log-likelihood.; /// \return If there are constraints, returns a pointer to the constraint NLL.; /// Returns a `nullptr` if the parameters are unconstrained.; /// \param[in] name Name of the created RooConstraintSum object.; /// \param[in] pdf The PDF model whose parameters should be constrained.; /// Constraint terms will be extracted from RooProdPdf instances; /// that are servers of the PDF (internal constraints).; /// \param[in] data Dataset used in the fit with the constraint sum. It is; /// used to figure out which are the observables and also to get the; /// global observables definition and values if they are stored in; /// the dataset.; /// \param[in] constrainedParameters Set of parameters to constrain. If `nullptr`, all; /// parameters will be considered.; /// \param[in] externalConstraints Set of constraint terms that are not; /// embedded in the PDF (external constraints).; /// \param[in] globalObservables The normalization set for the constraint terms.; /// If it is `nullptr`, the set of all constrained parameters will; /// be used as the normalization set.; /// \param[in] globalObservablesTag Alternative to define the normalization set; /// for the constraint terms. All constrained parameters that have; /// the attribute with the tag defined by `globalObservablesTag` are; /// used. The `globalObservables` and `globalObservablesTag`; /// parameters are mutually exclusive, meaning at least one of them; /// has to be `nullptr`.; /// \param[in] takeGlobalObservablesFromData If the dataset should be used to automatically; /// define the set of global observables. If this is the case and the; /// set of global observables is still defined manually with the; /// `globalObservables` or `globalObservablesTag` parameters, the; /// values of all global observables that are not stored in the; /// dataset are",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ConstraintHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ConstraintHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:138,Availability,error,errors,138,"////////////////////////////////////////////////////////////////////////////////; /// Use the asymptotically correct approach to estimate errors in the presence of weights.; /// This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; /// Applies the calculated covaraince matrix to the RooMinimizer and returns; /// the quality of the covariance matrix.; /// See also the documentation of RooAbsPdf::fitTo(), where this function is used.; /// \param[in] minimizer The RooMinimizer to get the fit result from. The state; /// of the minimizer will be altered by this function: the covariance; /// matrix caltulated here will be applied to it via; /// RooMinimizer::applyCovarianceMatrix().; /// \param[in] data The dataset that was used for the fit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:166,Safety,detect,detect,166,"// Warning if the dataset is binned. TODO: in some cases,; // people also use RooDataSet to encode binned data,; // e.g. for simultaneous fits. It would be useful to detect; // this in this future as well.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:24,Availability,error,errors,24,"// Calculated corrected errors for weighted likelihood fits",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:28,Testability,log,logpdf,28,"// Calculate derivatives of logpdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:67,Modifiability,extend,extended,67,"// Calculate derivatives for number of expected events, needed for extended ML fit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:23,Availability,error,errors,23,"// Propagate corrected errors to parameters objects",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:106,Availability,error,errors,106,"////////////////////////////////////////////////////////////////////////////////; /// Apply correction to errors and covariance matrix. This uses two covariance; /// matrices, one with the weights, the other with squared weights, to obtain; /// the correct errors for weighted likelihood fits.; /// Applies the calculated covaraince matrix to the RooMinimizer and returns; /// the quality of the covariance matrix.; /// See also the documentation of RooAbsPdf::fitTo(), where this function is used.; /// \param[in] minimizer The RooMinimizer to get the fit result from. The state; /// of the minimizer will be altered by this function: the covariance; /// matrix caltulated here will be applied to it via; /// RooMinimizer::applyCovarianceMatrix().; /// \param[in] nll The NLL object that was used for the fit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:257,Availability,error,errors,257,"////////////////////////////////////////////////////////////////////////////////; /// Apply correction to errors and covariance matrix. This uses two covariance; /// matrices, one with the weights, the other with squared weights, to obtain; /// the correct errors for weighted likelihood fits.; /// Applies the calculated covaraince matrix to the RooMinimizer and returns; /// the quality of the covariance matrix.; /// See also the documentation of RooAbsPdf::fitTo(), where this function is used.; /// \param[in] minimizer The RooMinimizer to get the fit result from. The state; /// of the minimizer will be altered by this function: the covariance; /// matrix caltulated here will be applied to it via; /// RooMinimizer::applyCovarianceMatrix().; /// \param[in] nll The NLL object that was used for the fit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:24,Availability,error,errors,24,"// Calculated corrected errors for weighted likelihood fits",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:51,Availability,error,errors,51,"// C now contains V C^-1 V; // Propagate corrected errors to parameters objects",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:4,Deployability,Configurat,Configuration,4,"/// Configuration struct for RooAbsPdf::minimizeNLL with all the default values; /// that also should be taked as the default values for RooAbsPdf::fitTo.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:4,Modifiability,Config,Configuration,4,"/// Configuration struct for RooAbsPdf::minimizeNLL with all the default values; /// that also should be taked as the default values for RooAbsPdf::fitTo.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:21,Modifiability,extend,extended,21,"// Process automatic extended option",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:103,Availability,error,error,103,"// If Extended(false) was explicitly set, but the pdf MUST be extended, then; // it's time to print an error. This happens when you're fitting a RooAddPdf; // with coefficient that represent yields, and without the additional; // constraint these coefficients are degenerate because the RooAddPdf; // normalizes itself. Nothing correct can come out of this.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:6,Modifiability,Extend,Extended,6,"// If Extended(false) was explicitly set, but the pdf MUST be extended, then; // it's time to print an error. This happens when you're fitting a RooAddPdf; // with coefficient that represent yields, and without the additional; // constraint these coefficients are degenerate because the RooAddPdf; // normalizes itself. Nothing correct can come out of this.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:62,Modifiability,extend,extended,62,"// If Extended(false) was explicitly set, but the pdf MUST be extended, then; // it's time to print an error. This happens when you're fitting a RooAddPdf; // with coefficient that represent yields, and without the additional; // constraint these coefficients are degenerate because the RooAddPdf; // normalizes itself. Nothing correct can come out of this.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:3,Usability,Clear,Clear,3,"// Clear possible range attributes from previous fits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:63,Modifiability,variab,variable,63,"// If the channel is not in the selected range of the category variable, we; // won't create an for NLL this channel.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:22,Modifiability,variab,variables,22,"// Rename the special variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:17,Deployability,Integrat,IntegrateBins,17,"// Deal with the IntegrateBins argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:17,Integrability,Integrat,IntegrateBins,17,"// Deal with the IntegrateBins argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:25,Deployability,Integrat,IntegrateBins,25,"// Done dealing with the IntegrateBins option",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:25,Integrability,Integrat,IntegrateBins,25,"// Done dealing with the IntegrateBins option",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:555,Availability,error,error,555,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:593,Deployability,Configurat,Configuration,593,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:627,Deployability,configurat,configuration,627,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:108,Modifiability,variab,variable,108,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:186,Modifiability,variab,variable,186,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:399,Modifiability,variab,variable,399,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:593,Modifiability,Config,Configuration,593,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:627,Modifiability,config,configuration,627,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:384,Testability,log,log-likelihood,384,"////////////////////////////////////////////////////////////////////////////////; /// Minimizes a given NLL variable by finding the optimal parameters with the; /// RooMinimzer. The NLL variable can be created with RooAbsPdf::createNLL.; /// If you are looking for a function that combines likelihood creation with; /// fitting, see RooAbsPdf::fitTo.; /// \param[in] nll The negative log-likelihood variable to minimize.; /// \param[in] data The dataset that was also used for the NLL. It's a necessary; /// parameter because it is used in the asymptotic error correction.; /// \param[in] cfg Configuration struct with all the configuration options for; /// the RooMinimizer. These are a subset of the options that you can; /// also pass to RooAbsPdf::fitTo via the RooFit command arguments.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:225,Availability,error,errors,225,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:303,Availability,error,error,303,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:404,Availability,error,error,404,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:419,Availability,error,error,419,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:521,Availability,error,errors,521,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:548,Availability,error,error,548,"R""(WARNING: a likelihood fit is requested of what appears to be weighted data.; While the estimated values of the parameters will always be calculated taking the weights into account,; there are multiple ways to estimate the errors of the parameters. You are advised to make an; explicit choice for the error calculation:; - Either provide SumW2Error(true), to calculate a sum-of-weights-corrected HESSE error matrix; (error will be proportional to the number of events in MC).; - Or provide SumW2Error(false), to return errors from original HESSE error matrix; (which will be proportional to the sum of the weights, i.e., a dataset with <sum of weights> events).; - Or provide AsymptoticError(true), to use the asymptotically correct expression; (for details see https://arxiv.org/abs/1911.01303).""; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:3,Safety,avoid,avoid,3,"// avoid setting both SumW2 and Asymptotic for uncertainty correction",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:26,Performance,optimiz,optimization,26,"// Activate constant term optimization",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:14,Availability,error,errors,14,"// Initialize errors with hesse",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:12,Availability,error,errors,12,"// Evaluate errors with Hesse",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:117,Modifiability,Config,Config,117,"// New style likelihoods define parallelization through Parallelize(...) on fitTo or attributes on; // RooMinimizer::Config.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:78,Performance,optimiz,optimization,78,"// If no explicit cloneData command is specified, cloneData is set to true if optimization is activated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:262,Availability,failure,failures,262,"// Even though it is technically only required when the computation graph; // is changed because global observables are taken from data, it is safer; // to clone the constraint model in general to reset the normalization; // integral caches and avoid ASAN build failures (the PDF of the main; // measurement is cloned too anyway, so not much overhead). This can be; // reconsidered after the caching of normalization sets by pointer is changed; // to a more memory-safe solution.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:234,Performance,cache,caches,234,"// Even though it is technically only required when the computation graph; // is changed because global observables are taken from data, it is safer; // to clone the constraint model in general to reset the normalization; // integral caches and avoid ASAN build failures (the PDF of the main; // measurement is cloned too anyway, so not much overhead). This can be; // reconsidered after the caching of normalization sets by pointer is changed; // to a more memory-safe solution.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:143,Safety,safe,safer,143,"// Even though it is technically only required when the computation graph; // is changed because global observables are taken from data, it is safer; // to clone the constraint model in general to reset the normalization; // integral caches and avoid ASAN build failures (the PDF of the main; // measurement is cloned too anyway, so not much overhead). This can be; // reconsidered after the caching of normalization sets by pointer is changed; // to a more memory-safe solution.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:245,Safety,avoid,avoid,245,"// Even though it is technically only required when the computation graph; // is changed because global observables are taken from data, it is safer; // to clone the constraint model in general to reset the normalization; // integral caches and avoid ASAN build failures (the PDF of the main; // measurement is cloned too anyway, so not much overhead). This can be; // reconsidered after the caching of normalization sets by pointer is changed; // to a more memory-safe solution.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:465,Safety,safe,safe,465,"// Even though it is technically only required when the computation graph; // is changed because global observables are taken from data, it is safer; // to clone the constraint model in general to reset the normalization; // integral caches and avoid ASAN build failures (the PDF of the main; // measurement is cloned too anyway, so not much overhead). This can be; // reconsidered after the caching of normalization sets by pointer is changed; // to a more memory-safe solution.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx:3,Usability,Clear,Clear,3,"// Clear possible range attributes from previous fits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/FitHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/FitHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/Initialisation.cxx:85,Performance,load,load,85,/**; \file Initialisation.cxx; \ingroup Roofitcore; Run static initialisers on first load of RooFitCore.; **/,MatchSource.CODE_COMMENT,roofit/roofitcore/src/Initialisation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/Initialisation.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/Initialisation.cxx:130,Performance,perform,performs,130,"////////////////////////////////////////////////////////////////////////////////////////////////////////////////; /// A RAII that performs RooFit's static initialisation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/Initialisation.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/Initialisation.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:446,Deployability,configurat,configuration,446,"/*; * Project: RooFit; * Authors:; * Kyle Cranmer,; * Lorenzo Moneta,; * Gregory Schott,; * Wouter Verkerke,; * Sven Kreiss; *; * Copyright (c) 2023, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \math",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:1455,Deployability,integrat,integrated,1455,"ce and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \mathrm{Constraint}_b = \mathrm{Gauss}(b_0 \, | \, b, 0.2); \f]; - **External constraints** Include given external constraints to likelihood by multiplying them with the original; likelihood.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:1455,Integrability,integrat,integrated,1455,"ce and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \mathrm{Constraint}_b = \mathrm{Gauss}(b_0 \, | \, b, 0.2); \f]; - **External constraints** Include given external constraints to likelihood by multiplying them with the original; likelihood.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:446,Modifiability,config,configuration,446,"/*; * Project: RooFit; * Authors:; * Kyle Cranmer,; * Lorenzo Moneta,; * Gregory Schott,; * Wouter Verkerke,; * Sven Kreiss; *; * Copyright (c) 2023, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \math",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:1713,Performance,load,loaded,1713,"ce and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \mathrm{Constraint}_b = \mathrm{Gauss}(b_0 \, | \, b, 0.2); \f]; - **External constraints** Include given external constraints to likelihood by multiplying them with the original; likelihood.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:422,Usability,simpl,simple,422,"/*; * Project: RooFit; * Authors:; * Kyle Cranmer,; * Lorenzo Moneta,; * Gregory Schott,; * Wouter Verkerke,; * Sven Kreiss; *; * Copyright (c) 2023, CERN; *; * Redistribution and use in source and binary forms,; * with or without modification, are permitted according to the terms; * listed in LICENSE (http://roofit.sourceforge.net/license.txt); */; /** \class RooStats::ModelConfig; \ingroup Roostats. ModelConfig is a simple class that holds configuration information specifying how a model; should be used in the context of various RooStats tools. A single model can be used; in different ways, and this class should carry all that is needed to specify how it should be used.; ModelConfig requires a workspace to be set. A ModelConfig holds sets of parameters of the likelihood function that have different interpretations:; - **Parameter of interest** Parameters that are measured (*i.e.* fitted).; - **Nuisance parameters** Parameters that are fitted, but their post-fit value is not interesting. Often,; they might be constrained because external knowledge about them exists, *e.g.* from external measurements.; - **Constraint parameters** No direct use in RooFit/RooStats. Can be used by the user for bookkeeping.; - **Observables** Parameters that have been measured externally, *i.e.* they exist in a dataset. These are not fitted,; but read during fitting from the entries of a dataset.; - **Conditional observables** Observables that are not integrated when the normalisation of the PDF is calculated.; See *e.g.* `rf306_condpereventerrors` in the RooFit tutorials.; - **Global observables** Observables that to the fit look like ""constant"" values, *i.e.* they are not being; fitted and they are not loaded from a dataset, but some knowledge exists that allows to set them to a; specific value. Examples:; -- A signal efficiency measured in a Monte Carlo study.; -- When constraining a parameter \f$ b \f$, the target value (\f$ b_0 \f$) that this parameter is constrained to:; \f[; \math",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:32,Integrability,message,message,32,"// print Modelconfig as an info message",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the snapshot from ws and return the corresponding set with the snapshot values.; /// User must delete returned RooArgSet.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:11,Performance,load,loadSnapshot,11,"// calling loadSnapshot will also copy the current parameter values in the workspaces; // since we do not want to change the model parameters - we restore the previous ones",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:62,Modifiability,variab,variables,62,"// make my snapshot which will contain a copy of the snapshot variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:3,Performance,load,load,3,"// load snapshot value from the workspace",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:19,Modifiability,variab,variables,19,"// restore now the variables of snapshot in ws to their original values; // need to const cast since assign is not const (but in reality in just assign values and does not change the set); // and anyway the set is const",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:86,Performance,load,load,86,"////////////////////////////////////////////////////////////////////////////////; /// load the snapshot from ws if it exists",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:106,Safety,avoid,avoid,106,"////////////////////////////////////////////////////////////////////////////////; /// helper functions to avoid code duplication",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:62,Deployability,update,updated,62,"// be careful not to remove passed set in case it is the same updated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:128,Deployability,configurat,configuration,128,"// namespace; /** @fn RooStats::ModelConfig::createNLL(); *; * Wrapper around RooAbsPdf::createNLL(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * The options taken from the ModelConfig are:; *; * * ConditionalObservables(); * * GlobalObservables(); * * ExternalConstraints(); *; * Except for the options above, you can still pass all the other command; * arguments supported by RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:63,Integrability,Wrap,Wrapper,63,"// namespace; /** @fn RooStats::ModelConfig::createNLL(); *; * Wrapper around RooAbsPdf::createNLL(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * The options taken from the ModelConfig are:; *; * * ConditionalObservables(); * * GlobalObservables(); * * ExternalConstraints(); *; * Except for the options above, you can still pass all the other command; * arguments supported by RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:128,Modifiability,config,configuration,128,"// namespace; /** @fn RooStats::ModelConfig::createNLL(); *; * Wrapper around RooAbsPdf::createNLL(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * The options taken from the ModelConfig are:; *; * * ConditionalObservables(); * * GlobalObservables(); * * ExternalConstraints(); *; * Except for the options above, you can still pass all the other command; * arguments supported by RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:106,Deployability,configurat,configuration,106,"/** @fn RooStats::ModelConfig::fitTo(); *; * Wrapper around RooAbsPdf::fitTo(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * See ModelConfig::createNLL() for more information.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:45,Integrability,Wrap,Wrapper,45,"/** @fn RooStats::ModelConfig::fitTo(); *; * Wrapper around RooAbsPdf::fitTo(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * See ModelConfig::createNLL() for more information.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx:106,Modifiability,config,configuration,106,"/** @fn RooStats::ModelConfig::fitTo(); *; * Wrapper around RooAbsPdf::fitTo(), where; * the pdf and some configuration options are retrieved from the ModelConfig.; *; * See ModelConfig::createNLL() for more information.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/ModelConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/ModelConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:2705,Deployability,integrat,integration,2705,"s model that can be analytically convolved with a resolution model.; ///; /// To achieve factorization between the physics model and the resolution; /// model, each physics model must be able to be written in the form; /// \f[; /// \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); /// \f]; ///; /// where \f$ \mathrm{basis}_k \f$ are a limited number of functions in terms of the variable; /// to be convoluted, and \f$ \mathrm{coef}_k \f$ are coefficients independent of the convolution; /// variable.; ///; /// Classes derived from RooResolutionModel implement; /// \f[; /// R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; /// \f]; ///; /// which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; /// \f[; /// \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); /// \f]; ///; /// A minimal implementation of a RooAbsAnaConvPdf physics model consists of; ///; /// - A constructor that declares the required basis functions using the declareBasis() method.; /// The declareBasis() function assigns a unique identifier code to each declare basis; ///; /// - An implementation of `coefficient(Int_t code)` returning the coefficient value for each; /// declared basis function; ///; /// Optionally, analytical integrals can be provided for the coefficient functions. The; /// interface for this is quite similar to that for integrals of regular PDFs. Two functions,; /// \code{.cpp}; /// Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; /// double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const; /// \endcode; ///; /// advertise the coefficient integration capabilities and implement them respectively.; /// Please see RooAbsPdf for additional details. Advertised analytical integrals must be; /// valid for all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:2341,Integrability,interface,interface,2341,"s model that can be analytically convolved with a resolution model.; ///; /// To achieve factorization between the physics model and the resolution; /// model, each physics model must be able to be written in the form; /// \f[; /// \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); /// \f]; ///; /// where \f$ \mathrm{basis}_k \f$ are a limited number of functions in terms of the variable; /// to be convoluted, and \f$ \mathrm{coef}_k \f$ are coefficients independent of the convolution; /// variable.; ///; /// Classes derived from RooResolutionModel implement; /// \f[; /// R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; /// \f]; ///; /// which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; /// \f[; /// \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); /// \f]; ///; /// A minimal implementation of a RooAbsAnaConvPdf physics model consists of; ///; /// - A constructor that declares the required basis functions using the declareBasis() method.; /// The declareBasis() function assigns a unique identifier code to each declare basis; ///; /// - An implementation of `coefficient(Int_t code)` returning the coefficient value for each; /// declared basis function; ///; /// Optionally, analytical integrals can be provided for the coefficient functions. The; /// interface for this is quite similar to that for integrals of regular PDFs. Two functions,; /// \code{.cpp}; /// Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; /// double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const; /// \endcode; ///; /// advertise the coefficient integration capabilities and implement them respectively.; /// Please see RooAbsPdf for additional details. Advertised analytical integrals must be; /// valid for all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:2705,Integrability,integrat,integration,2705,"s model that can be analytically convolved with a resolution model.; ///; /// To achieve factorization between the physics model and the resolution; /// model, each physics model must be able to be written in the form; /// \f[; /// \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); /// \f]; ///; /// where \f$ \mathrm{basis}_k \f$ are a limited number of functions in terms of the variable; /// to be convoluted, and \f$ \mathrm{coef}_k \f$ are coefficients independent of the convolution; /// variable.; ///; /// Classes derived from RooResolutionModel implement; /// \f[; /// R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; /// \f]; ///; /// which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; /// \f[; /// \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); /// \f]; ///; /// A minimal implementation of a RooAbsAnaConvPdf physics model consists of; ///; /// - A constructor that declares the required basis functions using the declareBasis() method.; /// The declareBasis() function assigns a unique identifier code to each declare basis; ///; /// - An implementation of `coefficient(Int_t code)` returning the coefficient value for each; /// declared basis function; ///; /// Optionally, analytical integrals can be provided for the coefficient functions. The; /// interface for this is quite similar to that for integrals of regular PDFs. Two functions,; /// \code{.cpp}; /// Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const; /// double coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName) const; /// \endcode; ///; /// advertise the coefficient integration capabilities and implement them respectively.; /// Please see RooAbsPdf for additional details. Advertised analytical integrals must be; /// valid for all coefficients.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1317,Modifiability,variab,variable,1317,"nta Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAbsAnaConvPdf; /// \ingroup Roofitcore; ///; /// Base class for PDFs that represent a; /// physics model that can be analytically convolved with a resolution model.; ///; /// To achieve factorization between the physics model and the resolution; /// model, each physics model must be able to be written in the form; /// \f[; /// \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); /// \f]; ///; /// where \f$ \mathrm{basis}_k \f$ are a limited number of functions in terms of the variable; /// to be convoluted, and \f$ \mathrm{coef}_k \f$ are coefficients independent of the convolution; /// variable.; ///; /// Classes derived from RooResolutionModel implement; /// \f[; /// R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; /// \f]; ///; /// which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; /// \f[; /// \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); /// \f]; ///; /// A minimal implementation of a RooAbsAnaConvPdf physics model consists of; ///; /// - A constructor that declares the required basis functions using the declareBasis() method.; /// The declareBasis() function assigns a unique identifier code to each declare basis; ///; /// - An implementation of `coefficient(Int_t code)` returning the coefficien",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1430,Modifiability,variab,variable,1430,"nta Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAbsAnaConvPdf; /// \ingroup Roofitcore; ///; /// Base class for PDFs that represent a; /// physics model that can be analytically convolved with a resolution model.; ///; /// To achieve factorization between the physics model and the resolution; /// model, each physics model must be able to be written in the form; /// \f[; /// \mathrm{Phys}(x, \bar{a}, \bar{b}) = \sum_k \mathrm{coef}_k(\bar{a}) * \mathrm{basis}_k(x,\bar{b}); /// \f]; ///; /// where \f$ \mathrm{basis}_k \f$ are a limited number of functions in terms of the variable; /// to be convoluted, and \f$ \mathrm{coef}_k \f$ are coefficients independent of the convolution; /// variable.; ///; /// Classes derived from RooResolutionModel implement; /// \f[; /// R_k(x,\bar{b},\bar{c}) = \int \mathrm{basis}_k(x', \bar{b}) \cdot \mathrm{resModel}(x-x',\bar{c}) \; \mathrm{d}x',; /// \f]; ///; /// which RooAbsAnaConvPdf uses to construct the pdf for [ Phys (x) R ] :; /// \f[; /// \mathrm{PDF}(x,\bar{a},\bar{b},\bar{c}) = \sum_k \mathrm{coef}_k(\bar{a}) * R_k(x,\bar{b},\bar{c}); /// \f]; ///; /// A minimal implementation of a RooAbsAnaConvPdf physics model consists of; ///; /// - A constructor that declares the required basis functions using the declareBasis() method.; /// The declareBasis() function assigns a unique identifier code to each declare basis; ///; /// - An implementation of `coefficient(Int_t code)` returning the coefficien",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:179,Modifiability,variab,variable,179,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. The supplied resolution model must be constructed with the same; /// convoluted variable as this physics model ('convVar')",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:276,Modifiability,variab,variable,276,"////////////////////////////////////////////////////////////////////////////////; /// Declare a basis function for use in this physics model. The string expression; /// must be a valid RooFormulVar expression representing the basis function, referring; /// to the convolution variable as '@0', and any additional parameters (supplied in; /// 'params' as '@1','@2' etc.; ///; /// The return value is a unique identifier code, that will be passed to coefficient(); /// to identify the basis function for which the coefficient is requested. If the; /// resolution model used does not support the declared basis function, code -1 is; /// returned.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:3,Safety,Sanity check,Sanity check,3,"// Sanity check",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:263,Deployability,deploy,deploy,263,"////////////////////////////////////////////////////////////////////////////////; /// Create a generator context for this p.d.f. If both the p.d.f and the resolution model; /// support internal generation of the convolution observable on an infinite domain,; /// deploy a specialized convolution generator context, which generates the physics distribution; /// and the smearing separately, adding them a posteriori. If this is not possible return; /// a (slower) generic generation context that uses accept/reject sampling",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:88,Modifiability,variab,variable,88,"// Check if physics PDF and resolution model can both directly generate the convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:34,Integrability,depend,dependents,34,"// Any resolution model with more dependents than the convolution variable; // or pdf or resmodel do not support direct generation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:66,Modifiability,variab,variable,66,"// Any resolution model with more dependents than the convolution variable; // or pdf or resmodel do not support direct generation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:107,Safety,safe,safe,107,"////////////////////////////////////////////////////////////////////////////////; /// Return true if it is safe to generate the convolution observable; /// from the internal generator (this is the case if the chosen resolution; /// model is the truth model)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:122,Modifiability,variab,variable,122,"////////////////////////////////////////////////////////////////////////////////; /// Return a pointer to the convolution variable instance used in the resolution model",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:170,Deployability,integrat,integration,170,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:390,Deployability,integrat,integration,390,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:534,Deployability,integrat,integration,534,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:657,Deployability,configurat,configuration,657,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:170,Integrability,integrat,integration,170,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:390,Integrability,integrat,integration,390,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:534,Integrability,integrat,integration,534,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:657,Modifiability,config,configuration,657,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:110,Performance,perform,perform,110,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:305,Performance,perform,performed,305,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to perform (analytical) integrals; /// internally. For a given integration request over allVars while; /// normalized over normSet2 and in range 'rangeName', returns; /// largest subset that can be performed internally in analVars; /// Return code is unique integer code identifying integration scenario; /// to be passed to analyticalIntegralWN() to calculate requeste integral; ///; /// Class RooAbsAnaConv defers analytical integration request to; /// resolution model and/or coefficient implementations and; /// aggregates results into composite configuration with a unique; /// code assigned by RooAICRegistry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:21,Deployability,integrat,integration,21,"// Handle trivial no-integration scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:21,Integrability,integrat,integration,21,"// Handle trivial no-integration scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:44,Integrability,depend,dependents,44,"// Select subset of allVars that are actual dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:9,Deployability,integrat,integration,9,"// Store integration configuration in registry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:21,Deployability,configurat,configuration,21,"// Store integration configuration in registry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:9,Integrability,integrat,integration,9,"// Store integration configuration in registry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:21,Modifiability,config,configuration,21,"// Store integration configuration in registry",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:481,Deployability,integrat,integrated,481,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:561,Deployability,integrat,integrated,561,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:971,Deployability,integrat,integrated,971,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1043,Deployability,integrat,integrated,1043,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:464,Integrability,depend,dependents,464,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:481,Integrability,integrat,integrated,481,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:544,Integrability,depend,dependents,544,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:561,Integrability,integrat,integrated,561,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:954,Integrability,depend,dependents,954,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:971,Integrability,integrat,integrated,971,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1026,Integrability,depend,dependents,1026,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1043,Integrability,integrat,integrated,1043,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1098,Integrability,depend,dependents,1098,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:1184,Integrability,depend,dependents,1184,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integral defined by given code, which is returned; /// by getAnalyticalIntegralWN(); ///; /// For unnormalized integrals the returned value is; /// \f[; /// \mathrm{PDF} = \sum_k \int \mathrm{coef}_k \; \mathrm{d}\bar{x}; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}\bar{y},; /// \f]; /// where \f$ \bar{x} \f$ is the set of coefficient dependents to be integrated,; /// and \f$ \bar{y} \f$ the set of basis function dependents to be integrated.; ///; /// For normalized integrals this becomes; /// \f[; /// \mathrm{PDF} = \frac{\sum_k \int \mathrm{coef}_k \; \mathrm{d}x; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}y}; /// {\sum_k \int \mathrm{coef}_k \; \mathrm{d}v; /// \cdot \int \mathrm{basis}_k (x) \mathrm{ResModel} \; \mathrm{d}w},; /// \f]; /// where; /// * \f$ x \f$ is the set of coefficient dependents to be integrated,; /// * \f$ y \f$ the set of basis function dependents to be integrated,; /// * \f$ v \f$ is the set of coefficient dependents over which is normalized and; /// * \f$ w \f$ is the set of basis function dependents over which is normalized.; ///; /// Set \f$ x \f$ must be contained in \f$ v \f$ and set \f$ y \f$ must be contained in \f$ w \f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:13,Energy Efficiency,adapt,adaptation,13,"// WVE needs adaptation to handle new rangeName feature; // Handle trivial passthrough scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:13,Modifiability,adapt,adaptation,13,"// WVE needs adaptation to handle new rangeName feature; // Handle trivial passthrough scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:133,Deployability,integrat,integration,133,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:317,Deployability,integrat,integration,317,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:133,Integrability,integrat,integration,133,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:163,Integrability,interface,interface,163,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:317,Integrability,integrat,integration,317,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function advertising integration capabilities. The interface is; /// similar to that of getAnalyticalIntegral except that an integer code is added that; /// designates the coefficient number for which the integration capabilities are requested; ///; /// This default implementation advertises that no internal integrals are supported.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:196,Deployability,integrat,integration,196,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function implementing advertised integrals. Only; /// the pass-through scenario (no integration) is implemented.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:196,Integrability,integrat,integration,196,"////////////////////////////////////////////////////////////////////////////////; /// Default implementation of function implementing advertised integrals. Only; /// the pass-through scenario (no integration) is implemented.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:136,Deployability,integrat,integration,136,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:247,Deployability,integrat,integration,247,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:405,Deployability,integrat,integrate,405,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:480,Deployability,integrat,integration,480,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:558,Deployability,integrat,integrate,558,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:136,Integrability,integrat,integration,136,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:148,Integrability,depend,dependents,148,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:247,Integrability,integrat,integration,247,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:405,Integrability,integrat,integrate,405,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:425,Integrability,depend,dependents,425,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:480,Integrability,integrat,integration,480,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:492,Integrability,interface,interface,492,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:558,Integrability,integrat,integrate,558,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:574,Integrability,depend,dependents,574,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:300,Safety,unsafe,unsafe,300,"////////////////////////////////////////////////////////////////////////////////; /// This function forces RooRealIntegral to offer all integration dependents; /// to RooAbsAnaConvPdf::getAnalyticalIntegralWN() for consideration for; /// internal integration, if RooRealIntegral considers this to be unsafe (e.g. due; /// to hidden Jacobian terms).; ///; /// RooAbsAnaConvPdf will not attempt to actually integrate all these dependents; /// but feed them to the resolution models integration interface, which will; /// make the final determination on how to integrate these dependents.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:121,Modifiability,variab,variables,121,"////////////////////////////////////////////////////////////////////////////////; /// Build complete list of coefficient variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:29,Modifiability,variab,variables,29,"// Instantiate a coefficient variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx:113,Performance,cache,cache-and-track,113,"///////////////////////////////////////////////////////////////////////////////; /// Label OK'ed components with cache-and-track",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsAnaConvPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsAnaConvPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:908,Integrability,depend,depend,908,"/******************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsArg; \ingroup Roofitcore. Common abstract base class for objects that; represent a value and a ""shape"" in RooFit. Values or shapes usually depend on values; or shapes of other RooAbsArg instances. Connecting several RooAbsArg in; a computation graph models an expression tree that can be evaluated. ### Building a computation graph of RooFit objects; Therefore, RooAbsArg provides functionality to connect objects of type RooAbsArg into; a computation graph to pass values between those objects.; A value can e.g. be a real-valued number, (instances of RooAbsReal), or an integer, that is,; category index (instances of RooAbsCategory). The third subclass of RooAbsArg is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2030,Integrability,depend,dependsOn,2030,". ### Building a computation graph of RooFit objects; Therefore, RooAbsArg provides functionality to connect objects of type RooAbsArg into; a computation graph to pass values between those objects.; A value can e.g. be a real-valued number, (instances of RooAbsReal), or an integer, that is,; category index (instances of RooAbsCategory). The third subclass of RooAbsArg is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and is",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2556,Integrability,interface,interfaces,2556,"is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and isShapeDirty() functions to decide if a; computation is necessary. Caching can be vetoed globally by setting a; bit using setDirtyInhibit(). This will make computations slower, but all the; nodes of the computation graph will be evaluated irrespective of whether their; state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled; for single nodes. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2761,Performance,cache,cached,2761,"is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and isShapeDirty() functions to decide if a; computation is necessary. Caching can be vetoed globally by setting a; bit using setDirtyInhibit(). This will make computations slower, but all the; nodes of the computation graph will be evaluated irrespective of whether their; state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled; for single nodes. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2941,Performance,cache,cached,2941,"is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and isShapeDirty() functions to decide if a; computation is necessary. Caching can be vetoed globally by setting a; bit using setDirtyInhibit(). This will make computations slower, but all the; nodes of the computation graph will be evaluated irrespective of whether their; state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled; for single nodes. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2653,Usability,clear,clearing,2653,"is RooStringVar,; but it is rarely used. The ""shapes"" that a RooAbsArg can possess can e.g. be the definition; range of an observable, or how many states a category object has. In computations,; values are expected to change often, while shapes remain mostly constant; (unless e.g. a new range is set for an observable). Nodes of a computation graph are connected using instances of RooAbsProxy.; If Node B declares a member `RooTemplateProxy<TypeOfNodeA>`, Node A will be; registered as a server of values to Node B, and Node B will know that it is; a client of node A. Using functions like dependsOn(), or getObservables(); / getParameters(), the relation of `A --> B` can be queried. Using graphVizTree(),; one can create a visualisation of the expression tree. An instance of RooAbsArg can have named attributes. It also has flags; to indicate that either its value or its shape were changed (= it is dirty).; RooAbsArg provides functionality to manage client/server relations in; a computation graph (\ref clientServerInterface), and helps propagating; value/shape changes through the graph. RooAbsArg implements interfaces; for inspecting client/server relationships (\ref clientServerInterface) and; setting/clearing/querying named attributes. ### Caching of values; The values of nodes in the computation graph are cached in RooFit. If; a value is used in two nodes of a graph, it doesn't need to be recomputed. If; a node acquires a new value, it notifies its consumers (""clients"") that; their cached values are dirty. See the functions in \ref optimisationInterface; for details.; A node uses its isValueDirty() and isShapeDirty() functions to decide if a; computation is necessary. Caching can be vetoed globally by setting a; bit using setDirtyInhibit(). This will make computations slower, but all the; nodes of the computation graph will be evaluated irrespective of whether their; state is clean or dirty. Using setOperMode(), caching can also be enabled/disabled; for single nodes. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:192,Performance,cache,cache,192,"////////////////////////////////////////////////////////////////////////////////; /// Control global dirty inhibit mode. When set to true no value or shape dirty; /// flags are propagated and cache is always considered to be dirty.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:103,Usability,clear,clear,103,"////////////////////////////////////////////////////////////////////////////////; /// Set (default) or clear a named boolean attribute of this object.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:103,Usability,clear,clear,103,"////////////////////////////////////////////////////////////////////////////////; /// Set (default) or clear a named boolean attribute of this object.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:157,Integrability,depend,depend,157,"////////////////////////////////////////////////////////////////////////////////; /// Register another RooAbsArg as a server to us, ie, declare that; /// we depend on it.; /// \param server The server to be registered.; /// \param valueProp In addition to the basic client-server relationship, declare dependence on the server's value.; /// \param shapeProp In addition to the basic client-server relationship, declare dependence on the server's shape.; /// \param refCount Optionally add with higher reference count (if multiple components depend on it)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:302,Integrability,depend,dependence,302,"////////////////////////////////////////////////////////////////////////////////; /// Register another RooAbsArg as a server to us, ie, declare that; /// we depend on it.; /// \param server The server to be registered.; /// \param valueProp In addition to the basic client-server relationship, declare dependence on the server's value.; /// \param shapeProp In addition to the basic client-server relationship, declare dependence on the server's shape.; /// \param refCount Optionally add with higher reference count (if multiple components depend on it)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:419,Integrability,depend,dependence,419,"////////////////////////////////////////////////////////////////////////////////; /// Register another RooAbsArg as a server to us, ie, declare that; /// we depend on it.; /// \param server The server to be registered.; /// \param valueProp In addition to the basic client-server relationship, declare dependence on the server's value.; /// \param shapeProp In addition to the basic client-server relationship, declare dependence on the server's shape.; /// \param refCount Optionally add with higher reference count (if multiple components depend on it)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:541,Integrability,depend,depend,541,"////////////////////////////////////////////////////////////////////////////////; /// Register another RooAbsArg as a server to us, ie, declare that; /// we depend on it.; /// \param server The server to be registered.; /// \param valueProp In addition to the basic client-server relationship, declare dependence on the server's value.; /// \param shapeProp In addition to the basic client-server relationship, declare dependence on the server's shape.; /// \param refCount Optionally add with higher reference count (if multiple components depend on it)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:11,Security,hash,hash,11,"// LM: use hash tables for larger lists; // if (_serverList.GetSize() > 999 && _serverList.getHashTableSize() == 0) _serverList.setHashTableSize(1000);; // if (server._clientList.GetSize() > 999 && server._clientList.getHashTableSize() == 0) server._clientList.setHashTableSize(1000);; // if (server._clientListValue.GetSize() > 999 && server._clientListValue.getHashTableSize() == 0) server._clientListValue.setHashTableSize(1000);; // Add server link to given server",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:169,Integrability,depend,depend,169,"////////////////////////////////////////////////////////////////////////////////; /// Unregister another RooAbsArg as a server to us, ie, declare that; /// we no longer depend on its value and shape.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:577,Deployability,update,updated,577,"////////////////////////////////////////////////////////////////////////////////; /// Replace 'oldServer' with 'newServer', specifying whether the new server has; /// value or shape server properties.; ///; /// \warning This function should not be used! This method is quite unsafe for; /// many reasons. For once, the new server will be put at the end of the server; /// list, no matter the position of the original server. This might mess up; /// code that expects the servers to be in a certain order. Furthermore, the; /// proxy objects corresponding to the server are not updated, leaving the; /// object in an invalid state where the servers are out of sync with the; /// proxies. This can have very bad consequences. Finally, by having to; /// manually specify the value and shape server properties, it is very easy to; /// get them wrong.; ///; /// If you want to safely replace a server, you should use; /// RooAbsArg::redirectServers(), which replaces the server in-place at the; /// same position of the server list, keeps the same value and shape server; /// properties, and also updates the corresponding proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:1092,Deployability,update,updates,1092,"////////////////////////////////////////////////////////////////////////////////; /// Replace 'oldServer' with 'newServer', specifying whether the new server has; /// value or shape server properties.; ///; /// \warning This function should not be used! This method is quite unsafe for; /// many reasons. For once, the new server will be put at the end of the server; /// list, no matter the position of the original server. This might mess up; /// code that expects the servers to be in a certain order. Furthermore, the; /// proxy objects corresponding to the server are not updated, leaving the; /// object in an invalid state where the servers are out of sync with the; /// proxies. This can have very bad consequences. Finally, by having to; /// manually specify the value and shape server properties, it is very easy to; /// get them wrong.; ///; /// If you want to safely replace a server, you should use; /// RooAbsArg::redirectServers(), which replaces the server in-place at the; /// same position of the server list, keeps the same value and shape server; /// properties, and also updates the corresponding proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:275,Safety,unsafe,unsafe,275,"////////////////////////////////////////////////////////////////////////////////; /// Replace 'oldServer' with 'newServer', specifying whether the new server has; /// value or shape server properties.; ///; /// \warning This function should not be used! This method is quite unsafe for; /// many reasons. For once, the new server will be put at the end of the server; /// list, no matter the position of the original server. This might mess up; /// code that expects the servers to be in a certain order. Furthermore, the; /// proxy objects corresponding to the server are not updated, leaving the; /// object in an invalid state where the servers are out of sync with the; /// proxies. This can have very bad consequences. Finally, by having to; /// manually specify the value and shape server properties, it is very easy to; /// get them wrong.; ///; /// If you want to safely replace a server, you should use; /// RooAbsArg::redirectServers(), which replaces the server in-place at the; /// same position of the server list, keeps the same value and shape server; /// properties, and also updates the corresponding proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:872,Safety,safe,safely,872,"////////////////////////////////////////////////////////////////////////////////; /// Replace 'oldServer' with 'newServer', specifying whether the new server has; /// value or shape server properties.; ///; /// \warning This function should not be used! This method is quite unsafe for; /// many reasons. For once, the new server will be put at the end of the server; /// list, no matter the position of the original server. This might mess up; /// code that expects the servers to be in a certain order. Furthermore, the; /// proxy objects corresponding to the server are not updated, leaving the; /// object in an invalid state where the servers are out of sync with the; /// proxies. This can have very bad consequences. Finally, by having to; /// manually specify the value and shape server properties, it is very easy to; /// get them wrong.; ///; /// If you want to safely replace a server, you should use; /// RooAbsArg::redirectServers(), which replaces the server in-place at the; /// same position of the server list, keeps the same value and shape server; /// properties, and also updates the corresponding proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:116,Availability,mask,mask,116,"////////////////////////////////////////////////////////////////////////////////; /// Change dirty flag propagation mask for specified server",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:259,Integrability,depend,dependents,259,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that don't match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getObservables()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:210,Modifiability,variab,variable,210,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that don't match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getObservables()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:308,Integrability,depend,depends,308,"////////////////////////////////////////////////////////////////////////////////; /// Add all parameters of the function and its daughters to `params`.; /// \param[in] params Collection that stores all parameters. Add all new parameters to this.; /// \param[in] nset Normalisation set (optional). If a value depends on this set, it's not a parameter.; /// \param[in] stripDisconnected Passed on to getParametersHook().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:582,Integrability,depend,depends,582,"////////////////////////////////////////////////////////////////////////////////; /// Obtain an estimate of the number of parameters of the function and its daughters.; /// Calling `addParameters` for large functions (NLL) can cause many reallocations of; /// `params` due to the recursive behaviour. This utility function aims to pre-compute; /// the total number of parameters, so that enough memory is reserved.; /// The estimate is not fully accurate (overestimate) as there is no equivalent to `getParametersHook`.; /// \param[in] nset Normalisation set (optional). If a value depends on this set, it's not a parameter.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:13,Performance,cache,cached,13,"// Check for cached parameter set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:3,Performance,Cache,Cache,3,"// Cache parameter set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:78,Integrability,depend,depends,78,"/// Given a set of possible observables, return the observables that this PDF depends on.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:253,Integrability,depend,dependents,253,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getParameters().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:204,Modifiability,variab,variable,204,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that match any of the names of the variable list; /// of the supplied data set (the dependents). The caller of this; /// function is responsible for deleting the returned argset.; /// The complement of this function is getParameters().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:518,Integrability,depend,depend,518,"////////////////////////////////////////////////////////////////////////////////; /// Create a list of leaf nodes in the arg tree starting with; /// ourself as top node that match any of the names the args in the; /// supplied argset.; /// Returns `true` only if something went wrong.; /// The complement of this function is getParameters().; /// \param[in] dataList Set of leaf nodes to match.; /// \param[out] outputSet Output set.; /// \param[in] valueOnly If this parameter is true, we only match leaves that; /// depend on the value of any arg in `dataList`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:239,Availability,error,error,239,"////////////////////////////////////////////////////////////////////////////////; /// Overloadable function in which derived classes can implement; /// consistency checks of the variables. If this function returns; /// true, indicating an error, the fitter or generator will abort.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:178,Modifiability,variab,variables,178,"////////////////////////////////////////////////////////////////////////////////; /// Overloadable function in which derived classes can implement; /// consistency checks of the variables. If this function returns; /// true, indicating an error, the fitter or generator will abort.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:275,Safety,abort,abort,275,"////////////////////////////////////////////////////////////////////////////////; /// Overloadable function in which derived classes can implement; /// consistency checks of the variables. If this function returns; /// true, indicating an error, the fitter or generator will abort.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:102,Integrability,depend,depend,102,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) any object in the; /// specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:186,Integrability,depend,dependsOn,186,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) any object in the; /// specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) any object in the; /// specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:19,Integrability,depend,depend,19,"// Test whether we depend on (ie, are served by) any object in the; // specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:102,Integrability,depend,dependsOn,102,"// Test whether we depend on (ie, are served by) any object in the; // specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:3,Testability,Test,Test,3,"// Test whether we depend on (ie, are served by) any object in the; // specified collection. Uses the dependsOn(RooAbsArg&) member function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:102,Integrability,depend,depend,102,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) an object with a specific name.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test whether we depend on (ie, are served by) an object with a specific name.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:18,Testability,test,testArg,18,"// First check if testArg is self",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:20,Integrability,depend,dependence,20,"// Next test direct dependence",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:8,Testability,test,test,8,"// Next test direct dependence",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the nodes of tree are shared with that of the given tree",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:105,Integrability,depend,dependents,105,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:198,Testability,test,testArg,198,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:105,Integrability,depend,dependents,105,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Testability,Test,Test,86,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:198,Testability,test,testArg,198,"////////////////////////////////////////////////////////////////////////////////; /// Test if any of the dependents of the arg tree (as determined by getObservables); /// overlaps with those of the testArg.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:12,Integrability,depend,dependency,12,"// Cyclical dependency interception",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:12,Integrability,depend,dependency,12,"// Cyclical dependency, abort",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:24,Safety,abort,abort,24,"// Cyclical dependency, abort",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:2,Testability,assert,assert,2,"//assert(0) ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:52,Availability,down,down,52,"// Propagate dirty flag to all clients if this is a down->up transition",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:12,Integrability,depend,dependency,12,"// Cyclical dependency, abort",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:24,Safety,abort,abort,24,"// Cyclical dependency, abort",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:52,Availability,down,down,52,"// Propagate dirty flag to all clients if this is a down->up transition",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:1216,Availability,error,error,1216,"////////////////////////////////////////////////////////////////////////////////; /// Replace all direct servers of this object with the new servers in `newServerList`.; /// This substitutes objects that we receive values from with new objects that have the same name.; /// \see recursiveRedirectServers() Use recursive version if servers that are only indirectly serving this object should be replaced as well.; /// \see redirectServers() If only the direct servers of an object need to be replaced.; ///; /// Note that changing the types of objects is generally allowed, but can be wrong if the interface of an object changes.; /// For example, one can reparametrise a model by substituting a variable with a function:; /// \f[; /// f(x\, |\, a) = a \cdot x \rightarrow f(x\, |\, b) = (2.1 \cdot b) \cdot x; /// \f]; /// If an object, however, expects a PDF, and this is substituted with a function that isn't normalised, wrong results might be obtained; /// or it might even crash the program. The types of the objects being substituted are not checked.; ///; /// \param[in] newSetOrig Set of new servers that should be used instead of the current servers.; /// \param[in] mustReplaceAll A warning is printed and error status is returned if not all servers could be; /// substituted successfully.; /// \param[in] nameChange If false, an object named ""x"" is only replaced with an object also named ""x"" in `newSetOrig`.; /// If the object in `newSet` is called differently, set `nameChange` to true and use setAttribute() on the x object:; /// ```; /// objectToReplaceX.setAttribute(""ORIGNAME:x""); /// ```; /// Now, the renamed object will be selected based on the attribute ""ORIGNAME:<name>"".; /// \param[in] isRecursionStep Internal switch used when called from recursiveRedirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:597,Integrability,interface,interface,597,"////////////////////////////////////////////////////////////////////////////////; /// Replace all direct servers of this object with the new servers in `newServerList`.; /// This substitutes objects that we receive values from with new objects that have the same name.; /// \see recursiveRedirectServers() Use recursive version if servers that are only indirectly serving this object should be replaced as well.; /// \see redirectServers() If only the direct servers of an object need to be replaced.; ///; /// Note that changing the types of objects is generally allowed, but can be wrong if the interface of an object changes.; /// For example, one can reparametrise a model by substituting a variable with a function:; /// \f[; /// f(x\, |\, a) = a \cdot x \rightarrow f(x\, |\, b) = (2.1 \cdot b) \cdot x; /// \f]; /// If an object, however, expects a PDF, and this is substituted with a function that isn't normalised, wrong results might be obtained; /// or it might even crash the program. The types of the objects being substituted are not checked.; ///; /// \param[in] newSetOrig Set of new servers that should be used instead of the current servers.; /// \param[in] mustReplaceAll A warning is printed and error status is returned if not all servers could be; /// substituted successfully.; /// \param[in] nameChange If false, an object named ""x"" is only replaced with an object also named ""x"" in `newSetOrig`.; /// If the object in `newSet` is called differently, set `nameChange` to true and use setAttribute() on the x object:; /// ```; /// objectToReplaceX.setAttribute(""ORIGNAME:x""); /// ```; /// Now, the renamed object will be selected based on the attribute ""ORIGNAME:<name>"".; /// \param[in] isRecursionStep Internal switch used when called from recursiveRedirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:695,Modifiability,variab,variable,695,"////////////////////////////////////////////////////////////////////////////////; /// Replace all direct servers of this object with the new servers in `newServerList`.; /// This substitutes objects that we receive values from with new objects that have the same name.; /// \see recursiveRedirectServers() Use recursive version if servers that are only indirectly serving this object should be replaced as well.; /// \see redirectServers() If only the direct servers of an object need to be replaced.; ///; /// Note that changing the types of objects is generally allowed, but can be wrong if the interface of an object changes.; /// For example, one can reparametrise a model by substituting a variable with a function:; /// \f[; /// f(x\, |\, a) = a \cdot x \rightarrow f(x\, |\, b) = (2.1 \cdot b) \cdot x; /// \f]; /// If an object, however, expects a PDF, and this is substituted with a function that isn't normalised, wrong results might be obtained; /// or it might even crash the program. The types of the objects being substituted are not checked.; ///; /// \param[in] newSetOrig Set of new servers that should be used instead of the current servers.; /// \param[in] mustReplaceAll A warning is printed and error status is returned if not all servers could be; /// substituted successfully.; /// \param[in] nameChange If false, an object named ""x"" is only replaced with an object also named ""x"" in `newSetOrig`.; /// If the object in `newSet` is called differently, set `nameChange` to true and use setAttribute() on the x object:; /// ```; /// objectToReplaceX.setAttribute(""ORIGNAME:x""); /// ```; /// Now, the renamed object will be selected based on the attribute ""ORIGNAME:<name>"".; /// \param[in] isRecursionStep Internal switch used when called from recursiveRedirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:143,Safety,avoid,avoid,143,"// We don't need to do anything if there are no new servers or if the only; // new server is this RooAbsArg itself. And by returning early, we avoid; // potentially annoying side effects of the redirectServersHook.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:298,Availability,error,error,298,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:169,Integrability,inject,inject,169,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:187,Integrability,depend,dependent,187,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:255,Performance,cache,caches,255,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:169,Security,inject,inject,169,"////////////////////////////////////////////////////////////////////////////////; /// Function that is called at the end of redirectServers(). Can be overloaded; /// to inject some class-dependent behavior after server redirection, e.g.; /// resetting of caches. The return value is meant to be an error flag, so in; /// case something goes wrong the function should return `true`. If you; /// overload this function, don't forget to also call the function of the; /// base class.; ///; /// \see redirectServers() For a detailed explanation of the function parameters.; ///; // \param[in] newServerList One of the original parameters passed to redirectServers().; // \param[in] mustReplaceAll One of the original parameters passed to redirectServers().; // \param[in] nameChange One of the original parameters passed to redirectServers().; // \param[in] isRecursiveStep One of the original parameters passed to redirectServers().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:278,Deployability,update,updates,278,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooArgProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur. The proxied argument is; /// also added as value and/or shape server",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:289,Performance,cache,cached,289,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooArgProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur. The proxied argument is; /// also added as value and/or shape server",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:278,Deployability,update,updates,278,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooSetProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:289,Performance,cache,cached,289,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooSetProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:279,Deployability,update,updates,279,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooListProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:290,Performance,cache,cached,290,"////////////////////////////////////////////////////////////////////////////////; /// Register an RooListProxy in the proxy list. This function is called by owned; /// proxies upon creation. After registration, this arg will forward pointer; /// changes from serverRedirects and updates in cached normalization sets; /// to the proxies immediately after they occur.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:110,Performance,cache,cached,110,"////////////////////////////////////////////////////////////////////////////////; /// Forward a change in the cached normalization argset; /// to all the registered proxies.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:36,Performance,cache,cache,36,"// First time we loop over proxies: cache the results to avoid future; // costly dynamic_casts",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:57,Safety,avoid,avoid,57,"// First time we loop over proxies: cache the results to avoid future; // costly dynamic_casts",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:33,Integrability,depend,dependencies,33,"// Print nothing if there are no dependencies",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:215,Integrability,depend,dependent,215,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:179,Modifiability,variab,variables,179,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:215,Integrability,depend,dependent,215,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:139,Modifiability,variab,variable,139,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:179,Modifiability,variab,variables,179,"////////////////////////////////////////////////////////////////////////////////; /// Replace server nodes with names matching the dataset variable names; /// with those data set variables, making this PDF directly dependent on the dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:269,Integrability,depend,depend,269,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:106,Performance,optimiz,optimization,106,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:166,Performance,cache,cache,166,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:269,Integrability,depend,depend,269,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:106,Performance,optimiz,optimization,106,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:166,Performance,cache,cache,166,"////////////////////////////////////////////////////////////////////////////////; /// Activate cache mode optimization with given definition of observables.; /// The cache operation mode of all objects in the expression tree will; /// modified such that all nodes that depend directly or indirectly on; /// any of the listed observables will be set to ADirty, as they are; /// expected to change every time. This save change tracking overhead for; /// nodes that are a priori known to change every time",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:3,Performance,Optimiz,Optimization,3,"// Optimization applies only to branch nodes, not to leaf nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:312,Integrability,message,message,312,"// Terminate call if this node was already processed (tree structure may be cyclical); // LM : RooLinkedList::findArg looks by name and not but by object pointer,; // should one use RooLinkedList::FindObject (look byt pointer) instead of findArg when; // tree contains nodes with the same name ?; // Add an info message if the require node does not exist but a different node already exists with same name",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:50,Integrability,depend,depend,50,"// Set cache mode operator to 'AlwaysDirty' if we depend on any of the given observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:7,Performance,cache,cache,7,"// Set cache mode operator to 'AlwaysDirty' if we depend on any of the given observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:50,Performance,cache,caches,50,"// Process any RooAbsArgs contained in any of the caches of this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:185,Performance,cache,cached,185,"////////////////////////////////////////////////////////////////////////////////; /// Find branch nodes with all-constant parameters, and add them to the list of; /// nodes that can be cached with a dataset in a test statistic calculation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:212,Testability,test,test,212,"////////////////////////////////////////////////////////////////////////////////; /// Find branch nodes with all-constant parameters, and add them to the list of; /// nodes that can be cached with a dataset in a test statistic calculation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:18,Performance,optimiz,optimized,18,"// If node can be optimized and hasn't been identified yet, add it to the list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:185,Performance,cache,cached,185,"////////////////////////////////////////////////////////////////////////////////; /// Find branch nodes with all-constant parameters, and add them to the list of; /// nodes that can be cached with a dataset in a test statistic calculation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:212,Testability,test,test,212,"////////////////////////////////////////////////////////////////////////////////; /// Find branch nodes with all-constant parameters, and add them to the list of; /// nodes that can be cached with a dataset in a test statistic calculation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:17,Integrability,depend,depends,17,"// Check if node depends on any non-constant parameter",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:71,Availability,down,down,71,"// If yes, list node eligible for caching, if not test nodes one level down",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:50,Testability,test,test,50,"// If yes, list node eligible for caching, if not test nodes one level down",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:10,Performance,cache,cache,10,"// Add to cache list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:29,Availability,down,down,29,"// If not, see if next level down can be cached",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:41,Performance,cache,cached,41,"// If not, see if next level down can be cached",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:23,Performance,cache,cached,23,"// Forward call to all cached contained in current object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function signaling a request to perform constant term; /// optimization. This default implementation takes no action other than to; /// forward the calls to all servers",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:128,Performance,perform,perform,128,"////////////////////////////////////////////////////////////////////////////////; /// Interface function signaling a request to perform constant term; /// optimization. This default implementation takes no action other than to; /// forward the calls to all servers",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:155,Performance,optimiz,optimization,155,"////////////////////////////////////////////////////////////////////////////////; /// Interface function signaling a request to perform constant term; /// optimization. This default implementation takes no action other than to; /// forward the calls to all servers",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:93,Performance,cache,cache,93,"////////////////////////////////////////////////////////////////////////////////; /// Change cache operation mode to given mode. If recurseAdirty; /// is true, then a mode change to AlwaysDirty will automatically; /// be propagated recursively to all client nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:192,Modifiability,variab,variables,192,"////////////////////////////////////////////////////////////////////////////////; /// Print tree structure of expression tree on given ostream, only branch nodes are printed.; /// Lead nodes (variables) will not be shown; ///; /// If namePat is not ""*"", only nodes with names matching the pattern will be printed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:100,Integrability,interface,interface,100,"////////////////////////////////////////////////////////////////////////////////; /// Hook function interface for object to insert additional information; /// when printed in the context of a tree structure. This default; /// implementation prints nothing",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:301,Performance,cache,cache,301,"////////////////////////////////////////////////////////////////////////////////; /// Register RooAbsCache with this object. This function is called; /// by RooAbsCache constructors for objects that are a datamember; /// of this RooAbsArg. By registering itself the RooAbsArg is aware; /// of all its cache data members and will forward server change; /// and cache mode change calls to the cache objects, which in turn; /// can forward them their contents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:360,Performance,cache,cache,360,"////////////////////////////////////////////////////////////////////////////////; /// Register RooAbsCache with this object. This function is called; /// by RooAbsCache constructors for objects that are a datamember; /// of this RooAbsArg. By registering itself the RooAbsArg is aware; /// of all its cache data members and will forward server change; /// and cache mode change calls to the cache objects, which in turn; /// can forward them their contents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:391,Performance,cache,cache,391,"////////////////////////////////////////////////////////////////////////////////; /// Register RooAbsCache with this object. This function is called; /// by RooAbsCache constructors for objects that are a datamember; /// of this RooAbsArg. By registering itself the RooAbsArg is aware; /// of all its cache data members and will forward server change; /// and cache mode change calls to the cache objects, which in turn; /// can forward them their contents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:114,Performance,cache,caches,114,"////////////////////////////////////////////////////////////////////////////////; /// Return number of registered caches",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:104,Performance,cache,cache,104,"////////////////////////////////////////////////////////////////////////////////; /// Return registered cache object by index",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// Return RooArgSet with all variables (tree leaf nodes of expression tree)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:18,Integrability,message,messages,18,"// silent warning messages coming when evaluating a RooAddPdf without a normalization set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:260,Availability,error,error,260,"////////////////////////////////////////////////////////////////////////////////; /// Take ownership of the contents of 'comps'. Different from the overload that; /// taked the RooArgSet by `const&`, this version can also take an owning; /// RooArgSet without error, because the ownership will not be ambiguous afterwards.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:3,Energy Efficiency,Schedul,Schedule,3,"// Schedule deferred processing of TRefArray into proxy list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx:201,Usability,simpl,simple,201,"////////////////////////////////////////////////////////////////////////////////; /// This function defines a translation for each RooAbsReal based object that can be used; /// to express the class as simple C++ code. The function adds the code represented by; /// each class as an std::string (that is later concatenated with code strings from translate calls); /// to form the C++ code that AD tools can understand. Any class that wants to support AD, has to; /// implement this function.; ///; /// \param[in] ctx An object to manage auxiliary information for code-squashing. Also takes the; /// code string that this class outputs into the squashed code through the 'addToCodeBody' function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsArg.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsArg.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx:848,Integrability,interface,interface,848,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsBinning.cxx; \class RooAbsBinning; \ingroup Roofitcore. Abstract base class for RooRealVar binning definitions.; This class defines the interface to retrieve bin boundaries, ranges etc.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx:155,Modifiability,variab,variable,155,"////////////////////////////////////////////////////////////////////////////////; /// Print binning arguments (the RooAbsReal objects represening; /// the variable bin boundaries for parameterized binning implementations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx:183,Modifiability,parameteriz,parameterized,183,"////////////////////////////////////////////////////////////////////////////////; /// Print binning arguments (the RooAbsReal objects represening; /// the variable bin boundaries for parameterized binning implementations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:871,Integrability,interface,interface,871,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCache.cxx; \class RooAbsCache; \ingroup Roofitcore. Abstract base class for data members of RooAbsArgs; that cache other (composite) RooAbsArg expressions. The RooAbsCache; interface defines the interaction between the owning RooAbsArg object; and the cache data member to communicate server redirects, operation; mode changes and constant term optimization management calls.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:807,Performance,cache,cache,807,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCache.cxx; \class RooAbsCache; \ingroup Roofitcore. Abstract base class for data members of RooAbsArgs; that cache other (composite) RooAbsArg expressions. The RooAbsCache; interface defines the interaction between the owning RooAbsArg object; and the cache data member to communicate server redirects, operation; mode changes and constant term optimization management calls.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:950,Performance,cache,cache,950,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCache.cxx; \class RooAbsCache; \ingroup Roofitcore. Abstract base class for data members of RooAbsArgs; that cache other (composite) RooAbsArg expressions. The RooAbsCache; interface defines the interaction between the owning RooAbsArg object; and the cache data member to communicate server redirects, operation; mode changes and constant term optimization management calls.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:1043,Performance,optimiz,optimization,1043,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCache.cxx; \class RooAbsCache; \ingroup Roofitcore. Abstract base class for data members of RooAbsArgs; that cache other (composite) RooAbsArg expressions. The RooAbsCache; interface defines the interaction between the owning RooAbsArg object; and the cache data member to communicate server redirects, operation; mode changes and constant term optimization management calls.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:136,Performance,cache,cache,136,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. Takes owner as argument and register cache with owner.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:142,Performance,cache,cache,142,"////////////////////////////////////////////////////////////////////////////////; /// Copy constructor. Takes owner as argument and registers cache with owne.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:110,Performance,cache,cache,110,"////////////////////////////////////////////////////////////////////////////////; /// Destructor. Unregisters cache with owner.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:141,Performance,cache,cache,141,"////////////////////////////////////////////////////////////////////////////////; /// Reset the owner, triggering the owner to register this cache in its list of caches.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx:162,Performance,cache,caches,162,"////////////////////////////////////////////////////////////////////////////////; /// Reset the owner, triggering the owner to register this cache in its list of caches.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCache.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCache.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:638,Performance,cache,cache,638,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedPdf.cxx; \class RooAbsCachedPdf; \ingroup Roofitcore. Abstract base class for p.d.f.s that need or; want to cache their evaluate() output in a RooHistPdf defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistPdf cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedPdf must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the p.d.fs function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:795,Performance,cache,cache,795,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedPdf.cxx; \class RooAbsCachedPdf; \ingroup Roofitcore. Abstract base class for p.d.f.s that need or; want to cache their evaluate() output in a RooHistPdf defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistPdf cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedPdf must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the p.d.fs function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:1164,Performance,cache,cached,1164,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedPdf.cxx; \class RooAbsCachedPdf; \ingroup Roofitcore. Abstract base class for p.d.f.s that need or; want to cache their evaluate() output in a RooHistPdf defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistPdf cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedPdf must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the p.d.fs function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:1324,Performance,cache,cache,1324,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedPdf.cxx; \class RooAbsCachedPdf; \ingroup Roofitcore. Abstract base class for p.d.f.s that need or; want to cache their evaluate() output in a RooHistPdf defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistPdf cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedPdf must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the p.d.fs function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:200,Performance,cache,cache,200,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of getVal() overriding default implementation; /// of RooAbsPdf. Return normalized value stored in cache p.d.f; /// rather than return value of evaluate() which is undefined; /// for RooAbsCachedPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:115,Performance,cache,cache,115,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to RooHistPdf cache pdf for given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:116,Performance,cache,cache,116,"////////////////////////////////////////////////////////////////////////////////; /// Return pointer to RooDataHist cache histogram for given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:345,Integrability,depend,dependent,345,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache object associated with given choice of observables. If cache object; /// does not exist, create and fill and register it on the fly. If recalculate=false; /// recalculation of cache contents of existing caches that are marked dirty due to; /// dependent parameter changes is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache object associated with given choice of observables. If cache object; /// does not exist, create and fill and register it on the fly. If recalculate=false; /// recalculation of cache contents of existing caches that are marked dirty due to; /// dependent parameter changes is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:156,Performance,cache,cache,156,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache object associated with given choice of observables. If cache object; /// does not exist, create and fill and register it on the fly. If recalculate=false; /// recalculation of cache contents of existing caches that are marked dirty due to; /// dependent parameter changes is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:277,Performance,cache,cache,277,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache object associated with given choice of observables. If cache object; /// does not exist, create and fill and register it on the fly. If recalculate=false; /// recalculation of cache contents of existing caches that are marked dirty due to; /// dependent parameter changes is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:304,Performance,cache,caches,304,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache object associated with given choice of observables. If cache object; /// does not exist, create and fill and register it on the fly. If recalculate=false; /// recalculation of cache contents of existing caches that are marked dirty due to; /// dependent parameter changes is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:17,Deployability,configurat,configuration,17,"// Check if this configuration was created becfore",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:17,Modifiability,config,configuration,17,"// Check if this configuration was created becfore",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:22,Performance,cache,cache,22,"// Check if we have a cache histogram in the global expensive object cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:69,Performance,cache,cache,69,"// Check if we have a cache histogram in the global expensive object cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:19,Performance,cache,cache,19,"// Create and fill cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:75,Performance,cache,cache,75,"// Check if we have contents registered already in global expensive object cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:20,Deployability,configurat,configuration,20,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:20,Modifiability,config,configuration,20,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:14,Performance,cache,cache,14,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:267,Integrability,depend,dependent,267,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache object which owns RooDataHist cache histogram,; /// RooHistPdf pdf that represents is shape and RooChangeTracker meta; /// object that tracks changes in listed dependent parameter of cache.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:101,Performance,cache,cache,101,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache object which owns RooDataHist cache histogram,; /// RooHistPdf pdf that represents is shape and RooChangeTracker meta; /// object that tracks changes in listed dependent parameter of cache.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:137,Performance,cache,cache,137,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache object which owns RooDataHist cache histogram,; /// RooHistPdf pdf that represents is shape and RooChangeTracker meta; /// object that tracks changes in listed dependent parameter of cache.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:290,Performance,cache,cache,290,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache object which owns RooDataHist cache histogram,; /// RooHistPdf pdf that represents is shape and RooChangeTracker meta; /// object that tracks changes in listed dependent parameter of cache.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:10,Performance,cache,cache,10,"// Create cache object itself -- Default implementation is a RooHistPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:29,Performance,cache,cache,29,"// add a different name when cache is built in case nsetIn is not an empty list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:78,Integrability,depend,dependency,78,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistPdf on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:23,Performance,cache,cache,23,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistPdf on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:131,Performance,optimiz,optimization,131,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistPdf on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:3,Usability,clear,clear,3,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistPdf on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:24,Performance,cache,cache,24,"// Set initial state of cache to dirty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:189,Deployability,configurat,configuration,189,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix for cache objects based on; /// observable names that define cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:189,Modifiability,config,configuration,189,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix for cache objects based on; /// observable names that define cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:126,Performance,cache,cache,126,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix for cache objects based on; /// observable names that define cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:183,Performance,cache,cache,183,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix for cache objects based on; /// observable names that define cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:144,Performance,cache,cache,144,"////////////////////////////////////////////////////////////////////////////////; /// Change the interpolation order that is used in RooHistPdf cache; /// representation smoothing the RooDataHist shapes.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:133,Performance,cache,cache,133,"////////////////////////////////////////////////////////////////////////////////; /// Returns all RooAbsArg objects contained in the cache element",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:104,Performance,cache,cache,104,"////////////////////////////////////////////////////////////////////////////////; /// Print contents of cache when printing self as part of object tree",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:161,Deployability,integrat,integration,161,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to offer all our actual observable for internal; /// integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:161,Integrability,integrat,integration,161,"////////////////////////////////////////////////////////////////////////////////; /// Force RooRealIntegral to offer all our actual observable for internal; /// integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,Deployability,integrat,integration,119,"////////////////////////////////////////////////////////////////////////////////; /// Advertises internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,Integrability,integrat,integration,119,"////////////////////////////////////////////////////////////////////////////////; /// Advertises internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:182,Performance,cache,cache,182,"////////////////////////////////////////////////////////////////////////////////; /// Advertises internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:197,Performance,cache,cache,197,"////////////////////////////////////////////////////////////////////////////////; /// Advertises internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:70,Deployability,integrat,integrated,70,"// takes ownership of all sets; // Mark all observables as internally integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:70,Integrability,integrat,integrated,70,"// takes ownership of all sets; // Mark all observables as internally integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,Deployability,integrat,integration,119,"////////////////////////////////////////////////////////////////////////////////; /// Implements internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:119,Integrability,integrat,integration,119,"////////////////////////////////////////////////////////////////////////////////; /// Implements internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:182,Performance,cache,cache,182,"////////////////////////////////////////////////////////////////////////////////; /// Implements internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx:197,Performance,cache,cache,197,"////////////////////////////////////////////////////////////////////////////////; /// Implements internal (analytical) integration capabilities. Call; /// is forwarded to RooHistPdf cache p.d.f of cache that is used for; /// given choice of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:642,Performance,cache,cache,642,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedReal.cxx; \class RooAbsCachedReal; \ingroup Roofitcore. Abstract base class for functions that need or; want to cache their evaluate() output in a RooHistFunc defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistFunc cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedReal must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the functions function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:801,Performance,cache,cache,801,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedReal.cxx; \class RooAbsCachedReal; \ingroup Roofitcore. Abstract base class for functions that need or; want to cache their evaluate() output in a RooHistFunc defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistFunc cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedReal must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the functions function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:1174,Performance,cache,cached,1174,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedReal.cxx; \class RooAbsCachedReal; \ingroup Roofitcore. Abstract base class for functions that need or; want to cache their evaluate() output in a RooHistFunc defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistFunc cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedReal must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the functions function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:1334,Performance,cache,cache,1334,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCachedReal.cxx; \class RooAbsCachedReal; \ingroup Roofitcore. Abstract base class for functions that need or; want to cache their evaluate() output in a RooHistFunc defined in; terms of the used observables. This base class manages the creation; and storage of all RooHistFunc cache p.d.fs and the RooDataHists; that define their shape. Implementations of RooAbsCachedReal must; define member function fillCacheObject() which serves to fill an; already created RooDataHist with the functions function values. In; addition the member functions actualObservables() and; actualParameters() must be define which report what the actual; observables to be cached are for a given set of observables passed; by the user to getVal() and on which parameters need to be tracked; for changes to trigger a refilling of the cache histogram.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:190,Performance,cache,cache,190,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of getVal() overriding default implementation; /// of RooAbsReal. Return value stored in cache p.d.f; /// rather than return value of evaluate() which is undefined; /// for RooAbsCachedReal",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:15,Performance,cache,cached,15,"// Cannot call cached p.d.f w.o nset; // if (!nset) return evaluate() ;; // Calculate current unnormalized value of object; // coverity[NULL_RETURNS]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:181,Deployability,configurat,configuration,181,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:201,Integrability,interface,interface,201,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:181,Modifiability,config,configuration,181,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:127,Performance,cache,cache,127,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:165,Performance,cache,cached,165,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:420,Performance,cache,cache,420,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache corresponding to observables in nset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:17,Deployability,configurat,configuration,17,"// Check if this configuration was created becfore",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:17,Modifiability,config,configuration,17,"// Check if this configuration was created becfore",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:62,Deployability,update,update,62,"// Set cache function data to ADirty since function will need update every time in cache update process",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:89,Deployability,update,update,89,"// Set cache function data to ADirty since function will need update every time in cache update process",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:7,Performance,cache,cache,7,"// Set cache function data to ADirty since function will need update every time in cache update process",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:83,Performance,cache,cache,83,"// Set cache function data to ADirty since function will need update every time in cache update process",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:75,Performance,cache,cache,75,"// Check if we have contents registered already in global expensive object cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:20,Deployability,configurat,configuration,20,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:20,Modifiability,config,configuration,20,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:14,Performance,cache,cache,14,"// Store this cache configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:101,Performance,cache,cache,101,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache storage unit class; ///; /// Create RooDataHist that will cache function values and create; /// RooHistFunc that represent s RooDataHist shape as function, create; /// meta object that tracks changes in declared parameters of p.d.f; /// through actualParameters()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:165,Performance,cache,cache,165,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of cache storage unit class; ///; /// Create RooDataHist that will cache function values and create; /// RooHistFunc that represent s RooDataHist shape as function, create; /// meta object that tracks changes in declared parameters of p.d.f; /// through actualParameters()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:24,Performance,cache,cache,24,"// Set initial state of cache to dirty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:78,Integrability,depend,dependency,78,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistFunc on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:23,Performance,cache,cache,23,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistFunc on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:132,Performance,optimiz,optimization,132,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistFunc on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:3,Usability,clear,clear,3,"// clear dirty flag as cache is up-to-date upon creation; // Introduce formal dependency of RooHistFunc on parameters so that const optimization code; // makes the correct decisions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:119,Performance,cache,cache,119,"////////////////////////////////////////////////////////////////////////////////; /// Construct unique suffix name for cache p.d.f object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:139,Performance,cache,cache,139,"////////////////////////////////////////////////////////////////////////////////; /// Set interpolation order of RooHistFunct representing cache histogram",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:104,Performance,cache,cache,104,"////////////////////////////////////////////////////////////////////////////////; /// Print contents of cache when printing self as part of object tree",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:104,Deployability,integrat,integration,104,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx:104,Integrability,integrat,integration,104,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:877,Integrability,interface,interface,877,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCacheElement.cxx; \class RooAbsCacheElement; \ingroup Roofitcore. Abstract base class for objects to be stored; in RooAbsCache cache manager objects. Each storage element has an; interface to pass on calls for server redirection, operation mode; change calls and constant term optimization management calls; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:825,Performance,cache,cache,825,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCacheElement.cxx; \class RooAbsCacheElement; \ingroup Roofitcore. Abstract base class for objects to be stored; in RooAbsCache cache manager objects. Each storage element has an; interface to pass on calls for server redirection, operation mode; change calls and constant term optimization management calls; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:975,Performance,optimiz,optimization,975,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * File: $Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCacheElement.cxx; \class RooAbsCacheElement; \ingroup Roofitcore. Abstract base class for objects to be stored; in RooAbsCache cache manager objects. Each storage element has an; interface to pass on calls for server redirection, operation mode; change calls and constant term optimization management calls; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for server redirect calls",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:109,Performance,cache,cache,109,"////////////////////////////////////////////////////////////////////////////////; /// Hook function to print cache guts in tree printing mode of RooAbsArgs",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for cache optimization calls. The default implementation is to forward all these; /// calls to all contained RooAbsArg objects as publicized through containedArg()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:100,Performance,cache,cache,100,"////////////////////////////////////////////////////////////////////////////////; /// Interface for cache optimization calls. The default implementation is to forward all these; /// calls to all contained RooAbsArg objects as publicized through containedArg()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:106,Performance,optimiz,optimization,106,"////////////////////////////////////////////////////////////////////////////////; /// Interface for cache optimization calls. The default implementation is to forward all these; /// calls to all contained RooAbsArg objects as publicized through containedArg()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for constant term optimization calls. The default implementation is to forward all these; /// calls to all contained RooAbsArg objects as publicized through containedArg()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx:114,Performance,optimiz,optimization,114,"////////////////////////////////////////////////////////////////////////////////; /// Interface for constant term optimization calls. The default implementation is to forward all these; /// calls to all contained RooAbsArg objects as publicized through containedArg()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCacheElement.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCacheElement.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:2011,Availability,avail,available,2011," and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCategory.cxx; \class RooAbsCategory; \ingroup Roofitcore. RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states. Each state is denoted by an integer and a name. Both can be used to retrieve and; set states, but referring to states by index is more efficient. Conversion between; index and name can be done using lookupName() or lookupIndex().; It is possible to iterate through all defined states using begin() and end(). For category classes deriving from RooAbsCategory, states can only be evaluated, *i.e.*, queried.; Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The; simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. ### Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256; characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data.; Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to; retrieve the corresponding state name. There is no limit for the length of the state name. To not break old code, the old RooCatType interfaces are still available. Whenever possible,; the following replacements should be used:; - lookupType() \f$ \rightarrow \f$ lookupName() / lookupIndex(); - typeIterator() \f$ \rightarrow \f$ range-based for loop / begin() / end(); - isValidIndex(Int_t index) \f$ \rightarrow \f$ hasIndex(); - isValid(const RooCatType&) \f$ \rightarrow \f$ hasIndex() / hasLabel(); **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:1014,Energy Efficiency,efficient,efficient,1014,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCategory.cxx; \class RooAbsCategory; \ingroup Roofitcore. RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states. Each state is denoted by an integer and a name. Both can be used to retrieve and; set states, but referring to states by index is more efficient. Conversion between; index and name can be done using lookupName() or lookupIndex().; It is possible to iterate through all defined states using begin() and end(). For category classes deriving from RooAbsCategory, states can only be evaluated, *i.e.*, queried.; Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The; simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. ### Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256; characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data.; Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to; retrieve the corresponding state name. There is no limit for the length of the state name. To not break old code, the old RooCatType interfaces ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:1498,Integrability,Interface,Interface,1498," and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCategory.cxx; \class RooAbsCategory; \ingroup Roofitcore. RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states. Each state is denoted by an integer and a name. Both can be used to retrieve and; set states, but referring to states by index is more efficient. Conversion between; index and name can be done using lookupName() or lookupIndex().; It is possible to iterate through all defined states using begin() and end(). For category classes deriving from RooAbsCategory, states can only be evaluated, *i.e.*, queried.; Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The; simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. ### Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256; characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data.; Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to; retrieve the corresponding state name. There is no limit for the length of the state name. To not break old code, the old RooCatType interfaces are still available. Whenever possible,; the following replacements should be used:; - lookupType() \f$ \rightarrow \f$ lookupName() / lookupIndex(); - typeIterator() \f$ \rightarrow \f$ range-based for loop / begin() / end(); - isValidIndex(Int_t index) \f$ \rightarrow \f$ hasIndex(); - isValid(const RooCatType&) \f$ \rightarrow \f$ hasIndex() / hasLabel(); **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:1990,Integrability,interface,interfaces,1990," and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCategory.cxx; \class RooAbsCategory; \ingroup Roofitcore. RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states. Each state is denoted by an integer and a name. Both can be used to retrieve and; set states, but referring to states by index is more efficient. Conversion between; index and name can be done using lookupName() or lookupIndex().; It is possible to iterate through all defined states using begin() and end(). For category classes deriving from RooAbsCategory, states can only be evaluated, *i.e.*, queried.; Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The; simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. ### Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256; characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data.; Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to; retrieve the corresponding state name. There is no limit for the length of the state name. To not break old code, the old RooCatType interfaces are still available. Whenever possible,; the following replacements should be used:; - lookupType() \f$ \rightarrow \f$ lookupName() / lookupIndex(); - typeIterator() \f$ \rightarrow \f$ range-based for loop / begin() / end(); - isValidIndex(Int_t index) \f$ \rightarrow \f$ hasIndex(); - isValid(const RooCatType&) \f$ \rightarrow \f$ hasIndex() / hasLabel(); **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:1391,Usability,simpl,simplest,1391," and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsCategory.cxx; \class RooAbsCategory; \ingroup Roofitcore. RooAbsCategory is the base class for objects that represent a discrete value with a finite number of states. Each state is denoted by an integer and a name. Both can be used to retrieve and; set states, but referring to states by index is more efficient. Conversion between; index and name can be done using lookupName() or lookupIndex().; It is possible to iterate through all defined states using begin() and end(). For category classes deriving from RooAbsCategory, states can only be evaluated, *i.e.*, queried.; Refer to RooAbsCategoryLValue and its derived classes for categories where states can also be set. The; simplest category class whose states can be set, queried and saved in a dataset, refer to RooCategory. ### Interface change in ROOT-6.22; Category data were based in the class RooCatType, holding an index state and a category name truncated to 256; characters. This wastes 64 bytes of storage space per entry, and prevents fast retrieval of category data.; Since ROOT-6.22, categories are only represented by an integer. RooAbsCategory::lookupName() can be used to; retrieve the corresponding state name. There is no limit for the length of the state name. To not break old code, the old RooCatType interfaces are still available. Whenever possible,; the following replacements should be used:; - lookupType() \f$ \rightarrow \f$ lookupName() / lookupIndex(); - typeIterator() \f$ \rightarrow \f$ range-based for loop / begin() / end(); - isValidIndex(Int_t index) \f$ \rightarrow \f$ hasIndex(); - isValid(const RooCatType&) \f$ \rightarrow \f$ hasIndex() / hasLabel(); **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:132,Availability,avail,available,132,"////////////////////////////////////////////////////////////////////////////////; /// Define a new state with given label. The next available; /// integer is assigned as index value.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:283,Availability,failure,failure,283,"////////////////////////////////////////////////////////////////////////////////; /// Find the index number corresponding to the state name.; /// \see hasLabel() for checking if a given label has been defined.; /// \return Index of the category or std::numeric_limits<int>::min() on failure.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:97,Integrability,synchroniz,synchronize,97,"////////////////////////////////////////////////////////////////////////////////; /// Explicitly synchronize RooAbsCategory internal cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:133,Performance,cache,cache,133,"////////////////////////////////////////////////////////////////////////////////; /// Explicitly synchronize RooAbsCategory internal cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:95,Performance,cache,cached,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value from given source and raise dirty flag.; /// It is the callers responsibility to ensure that the sources; /// cache is clean(valid) before this function is called, e.g. by; /// calling syncCache() on the source.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:218,Performance,cache,cache,218,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value from given source and raise dirty flag.; /// It is the callers responsibility to ensure that the sources; /// cache is clean(valid) before this function is called, e.g. by; /// calling syncCache() on the source.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx:130,Performance,cache,cache,130,"////////////////////////////////////////////////////////////////////////////////; /// Overwrite the value stored in this object's cache.; /// This can be used to fake a computation that resulted in `value`.; /// \param[in] value Value to write. The argument is reinterpreted as a category state.; /// If such a state does not exist, this will create undefined behaviour.; /// \param[in] notifyClients If true, notify users of this object that its value changed.; /// This is the default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx:227,Energy Efficiency,efficient,efficient,227,"////////////////////////////////////////////////////////////////////////////////; /// Assignment from another RooAbsCategory. This will use the *state name*; /// of the other object to set the corresponding state. This is less efficient; /// then directly assigning the state index.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategoryLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx:159,Availability,error,error,159,"////////////////////////////////////////////////////////////////////////////////; /// Set our state to our `n`th defined type.; /// \return true in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategoryLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx:95,Performance,cache,cached,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value from given source and raise dirty flag.; /// It is the callers responsibility to ensure that the sources; /// cache is clean(valid) before this function is called, e.g. by; /// calling syncCache() on the source.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategoryLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx:218,Performance,cache,cache,218,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value from given source and raise dirty flag.; /// It is the callers responsibility to ensure that the sources; /// cache is clean(valid) before this function is called, e.g. by; /// calling syncCache() on the source.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCategoryLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCategoryLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:18,Security,hash,hash-map-assisted,18,"/**; * Helper for hash-map-assisted finding of elements by name.; * Create this helper if finding of elements by name is needed.; * Upon creation, this object checks the global; * RooNameReg::renameCounter(); * and tracks elements of this collection by name. If an element; * gets renamed, this counter will be increased, and the name to; * object map becomes invalid. In this case, it has to be recreated.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:21,Security,hash,hash,21,"/// Initialise empty hash map for fast finding by name.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:14,Modifiability,variab,variables,14,"// Delete all variables in our list if we own them",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:228,Security,hash,hash-map,228,"////////////////////////////////////////////////////////////////////////////////; /// Delete contents of the list.; /// The RooAbsArg destructor ensures clients and servers can be deleted in any; /// order.; /// Also cleans the hash-map for fast lookups if present.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:245,Integrability,depend,dependents,245,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents.; /// An owning collection is returned containing clones of; /// - Elements in this collection; /// - External dependents of all elements and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// This is useful to save the values of variables or parameters. It doesn't require; /// deep copying if the parameters are direct members of the collection.; ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:292,Integrability,depend,dependents,292,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents.; /// An owning collection is returned containing clones of; /// - Elements in this collection; /// - External dependents of all elements and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// This is useful to save the values of variables or parameters. It doesn't require; /// deep copying if the parameters are direct members of the collection.; ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:312,Integrability,depend,dependents,312,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents.; /// An owning collection is returned containing clones of; /// - Elements in this collection; /// - External dependents of all elements and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// This is useful to save the values of variables or parameters. It doesn't require; /// deep copying if the parameters are direct members of the collection.; ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:641,Integrability,depend,dependents,641,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents.; /// An owning collection is returned containing clones of; /// - Elements in this collection; /// - External dependents of all elements and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// This is useful to save the values of variables or parameters. It doesn't require; /// deep copying if the parameters are direct members of the collection.; ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:401,Modifiability,variab,variables,401,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents.; /// An owning collection is returned containing clones of; /// - Elements in this collection; /// - External dependents of all elements and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// This is useful to save the values of variables or parameters. It doesn't require; /// deep copying if the parameters are direct members of the collection.; ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:260,Integrability,depend,dependents,260,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents:; /// A collection that owns its elements is returned containing clones of; /// - Elements in this collection; /// - External dependents of those elements; /// and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:314,Integrability,depend,dependents,314,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents:; /// A collection that owns its elements is returned containing clones of; /// - Elements in this collection; /// - External dependents of those elements; /// and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:334,Integrability,depend,dependents,334,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents:; /// A collection that owns its elements is returned containing clones of; /// - Elements in this collection; /// - External dependents of those elements; /// and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:498,Integrability,depend,dependents,498,"////////////////////////////////////////////////////////////////////////////////; /// Take a snap shot of current collection contents:; /// A collection that owns its elements is returned containing clones of; /// - Elements in this collection; /// - External dependents of those elements; /// and recursively any dependents of those dependents; /// (if deepCopy flag is set); ///; /// If deepCopy is specified, the client-server links between the cloned; /// list elements and the cloned external dependents are reconnected to; /// each other, making the snapshot a completely self-contained entity.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:211,Safety,avoid,avoid,211,"////////////////////////////////////////////////////////////////////////////////; /// Assign values from the elements in `other` to our elements.; /// \warning This is not a conventional assignment operator. To avoid confusion, prefer using RooAbsCollection::assign().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:102,Performance,cache,cache,102,"////////////////////////////////////////////////////////////////////////////////; /// Sets the value, cache and constant attribute of any argument in our set; /// that also appears in the other set. Note that this function changes the; /// values of the elements in this collection, but is still marked `const` as; /// it does not change which elements this collection points to.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:222,Integrability,synchroniz,synchronize,222,"////////////////////////////////////////////////////////////////////////////////; /// Sets the value of any argument in our set that also appears in the other set.; /// \param[in] other Collection holding the arguments to synchronize values with.; /// \param[in] forceIfSizeOne If set to true and both our collection; /// and the other collection have a size of one, the arguments are; /// always synchronized without checking if they have the same name.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:397,Integrability,synchroniz,synchronized,397,"////////////////////////////////////////////////////////////////////////////////; /// Sets the value of any argument in our set that also appears in the other set.; /// \param[in] other Collection holding the arguments to synchronize values with.; /// \param[in] forceIfSizeOne If set to true and both our collection; /// and the other collection have a size of one, the arguments are; /// always synchronized without checking if they have the same name.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:25,Modifiability,variab,variables,25,"// check that we own our variables or else are empty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:202,Modifiability,variab,variable,202,"////////////////////////////////////////////////////////////////////////////////; /// Add a clone of the specified argument to list. Returns a pointer to; /// the clone if successful, or else zero if a variable of the same name; /// is already in the list or the list does *not* own its variables (in; /// this case, try add() instead.) Calling addClone() on an empty list; /// forces it to take ownership of all its subsequent variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:287,Modifiability,variab,variables,287,"////////////////////////////////////////////////////////////////////////////////; /// Add a clone of the specified argument to list. Returns a pointer to; /// the clone if successful, or else zero if a variable of the same name; /// is already in the list or the list does *not* own its variables (in; /// this case, try add() instead.) Calling addClone() on an empty list; /// forces it to take ownership of all its subsequent variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:428,Modifiability,variab,variables,428,"////////////////////////////////////////////////////////////////////////////////; /// Add a clone of the specified argument to list. Returns a pointer to; /// the clone if successful, or else zero if a variable of the same name; /// is already in the list or the list does *not* own its variables (in; /// this case, try add() instead.) Calling addClone() on an empty list; /// forces it to take ownership of all its subsequent variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:25,Modifiability,variab,variables,25,"// check that we own our variables or else are empty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:36,Modifiability,variab,variable,36,"// add a pointer to a clone of this variable to our list (we now own it!)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:174,Modifiability,variab,variable,174,"////////////////////////////////////////////////////////////////////////////////; /// Add the specified argument to list. Returns true if successful, or; /// else false if a variable of the same name is already in the list; /// or the list owns its variables (in this case, try addClone() or addOwned() instead).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:249,Modifiability,variab,variables,249,"////////////////////////////////////////////////////////////////////////////////; /// Add the specified argument to list. Returns true if successful, or; /// else false if a variable of the same name is already in the list; /// or the list owns its variables (in this case, try addClone() or addOwned() instead).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:25,Modifiability,variab,variable,25,"// add a pointer to this variable to our list (we don't own it!)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:563,Deployability,release,release,563,"////////////////////////////////////////////////////////////////////////////////; // Add a collection of arguments to this collection by calling addOwned(); /// for each element in the source collection. The input list can't be an; /// owning collection itself, otherwise the arguments would be owned by two; /// collections.; ///; /// If you want to transfer arguments from one owning collection to another,; /// you have two options:; /// 1. `std::move` the input collection and use; /// RooAbsCollection::addOwned(RooAbsCollection&&, bool) (preferred); /// 2. release the ownership of the input collection first, using; /// RooAbsCollection::releaseOwnership()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:645,Deployability,release,releaseOwnership,645,"////////////////////////////////////////////////////////////////////////////////; // Add a collection of arguments to this collection by calling addOwned(); /// for each element in the source collection. The input list can't be an; /// owning collection itself, otherwise the arguments would be owned by two; /// collections.; ///; /// If you want to transfer arguments from one owning collection to another,; /// you have two options:; /// 1. `std::move` the input collection and use; /// RooAbsCollection::addOwned(RooAbsCollection&&, bool) (preferred); /// 2. release the ownership of the input collection first, using; /// RooAbsCollection::releaseOwnership()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:26,Deployability,release,released,26,"// So far, comps has only released the ownership, but it is still valid.; // However, we don't want users to keep using objects after moving them, so; // we make sure to keep our promise that the RooArgSet is really moved.; // Just like a `std::unique_ptr` is also reset when moved.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:198,Availability,error,error,198,"////////////////////////////////////////////////////////////////////////////////; /// Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:204,Integrability,message,messages,204,"////////////////////////////////////////////////////////////////////////////////; /// Get value of a RooAbsReal stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:166,Availability,error,error,166,"////////////////////////////////////////////////////////////////////////////////; /// Set value of a RooAbsRealLValue stored in set with given name to newVal; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:172,Integrability,message,messages,172,"////////////////////////////////////////////////////////////////////////////////; /// Set value of a RooAbsRealLValue stored in set with given name to newVal; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:207,Availability,error,error,207,"////////////////////////////////////////////////////////////////////////////////; /// Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:213,Integrability,message,messages,213,"////////////////////////////////////////////////////////////////////////////////; /// Get state name of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:176,Availability,error,error,176,"////////////////////////////////////////////////////////////////////////////////; /// Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:182,Integrability,message,messages,182,"////////////////////////////////////////////////////////////////////////////////; /// Set state name of a RooAbsCategoryLValue stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:208,Availability,error,error,208,"////////////////////////////////////////////////////////////////////////////////; /// Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:214,Integrability,message,messages,214,"////////////////////////////////////////////////////////////////////////////////; /// Get index value of a RooAbsCategory stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:177,Availability,error,error,177,"////////////////////////////////////////////////////////////////////////////////; /// Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:183,Integrability,message,messages,183,"////////////////////////////////////////////////////////////////////////////////; /// Set index value of a RooAbsCategoryLValue stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:207,Availability,error,error,207,"////////////////////////////////////////////////////////////////////////////////; /// Get string value of a RooStringVar stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:213,Integrability,message,messages,213,"////////////////////////////////////////////////////////////////////////////////; /// Get string value of a RooStringVar stored in set with given name. If none is found, value of defVal is returned.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:170,Availability,error,error,170,"////////////////////////////////////////////////////////////////////////////////; /// Set string value of a RooStringVar stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:176,Integrability,message,messages,176,"////////////////////////////////////////////////////////////////////////////////; /// Set string value of a RooStringVar stored in set with given name to newVal.; /// No error messages are printed unless the verbose flag is set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:1239,Availability,error,error,1239,"////////////////////////////////////////////////////////////////////////////////; /// Output content of collection as LaTex table. By default a table with two columns is created: the left; /// column contains the name of each variable, the right column the value.; ///; /// The following optional named arguments can be used to modify the default behavior; /// <table>; /// <tr><th> Argument <th> Effect; /// <tr><td> `Columns(Int_t ncol)` <td> Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns; /// <tr><td> `Sibling(const RooAbsCollection& other)` <td> Define sibling list.; /// The sibling list is assumed to have objects with the same; /// name in the same order. If this is not the case warnings will be printed. If a single; /// sibling list is specified, 3 columns will be output: the (common) name, the value of this; /// list and the value in the sibling list. Multiple sibling lists can be specified by; /// repeating the Sibling() command.; /// <tr><td> `Format(const char* str)` <td> Classic format string, provided for backward compatibility; /// <tr><td> `Format()` <td> Formatting arguments.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown. ""N"" adds name, ""E"" adds error,; /// ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error; /// and n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `OutputFile(const char* fname)` <td> Send output to file with given name rather than standard output; ///; /// </table>; ///; /// Example use:; /// ```; /// list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; /// ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:1272,Availability,error,error,1272,"////////////////////////////////////////////////////////////////////////////////; /// Output content of collection as LaTex table. By default a table with two columns is created: the left; /// column contains the name of each variable, the right column the value.; ///; /// The following optional named arguments can be used to modify the default behavior; /// <table>; /// <tr><th> Argument <th> Effect; /// <tr><td> `Columns(Int_t ncol)` <td> Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns; /// <tr><td> `Sibling(const RooAbsCollection& other)` <td> Define sibling list.; /// The sibling list is assumed to have objects with the same; /// name in the same order. If this is not the case warnings will be printed. If a single; /// sibling list is specified, 3 columns will be output: the (common) name, the value of this; /// list and the value in the sibling list. Multiple sibling lists can be specified by; /// repeating the Sibling() command.; /// <tr><td> `Format(const char* str)` <td> Classic format string, provided for backward compatibility; /// <tr><td> `Format()` <td> Formatting arguments.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown. ""N"" adds name, ""E"" adds error,; /// ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error; /// and n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `OutputFile(const char* fname)` <td> Send output to file with given name rather than standard output; ///; /// </table>; ///; /// Example use:; /// ```; /// list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; /// ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:1509,Availability,error,error,1509,"////////////////////////////////////////////////////////////////////////////////; /// Output content of collection as LaTex table. By default a table with two columns is created: the left; /// column contains the name of each variable, the right column the value.; ///; /// The following optional named arguments can be used to modify the default behavior; /// <table>; /// <tr><th> Argument <th> Effect; /// <tr><td> `Columns(Int_t ncol)` <td> Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns; /// <tr><td> `Sibling(const RooAbsCollection& other)` <td> Define sibling list.; /// The sibling list is assumed to have objects with the same; /// name in the same order. If this is not the case warnings will be printed. If a single; /// sibling list is specified, 3 columns will be output: the (common) name, the value of this; /// list and the value in the sibling list. Multiple sibling lists can be specified by; /// repeating the Sibling() command.; /// <tr><td> `Format(const char* str)` <td> Classic format string, provided for backward compatibility; /// <tr><td> `Format()` <td> Formatting arguments.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown. ""N"" adds name, ""E"" adds error,; /// ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error; /// and n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `OutputFile(const char* fname)` <td> Send output to file with given name rather than standard output; ///; /// </table>; ///; /// Example use:; /// ```; /// list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; /// ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:226,Modifiability,variab,variable,226,"////////////////////////////////////////////////////////////////////////////////; /// Output content of collection as LaTex table. By default a table with two columns is created: the left; /// column contains the name of each variable, the right column the value.; ///; /// The following optional named arguments can be used to modify the default behavior; /// <table>; /// <tr><th> Argument <th> Effect; /// <tr><td> `Columns(Int_t ncol)` <td> Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns; /// <tr><td> `Sibling(const RooAbsCollection& other)` <td> Define sibling list.; /// The sibling list is assumed to have objects with the same; /// name in the same order. If this is not the case warnings will be printed. If a single; /// sibling list is specified, 3 columns will be output: the (common) name, the value of this; /// list and the value in the sibling list. Multiple sibling lists can be specified by; /// repeating the Sibling() command.; /// <tr><td> `Format(const char* str)` <td> Classic format string, provided for backward compatibility; /// <tr><td> `Format()` <td> Formatting arguments.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown. ""N"" adds name, ""E"" adds error,; /// ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error; /// and n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `OutputFile(const char* fname)` <td> Send output to file with given name rather than standard output; ///; /// </table>; ///; /// Example use:; /// ```; /// list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; /// ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:1627,Modifiability,variab,variable,1627,"////////////////////////////////////////////////////////////////////////////////; /// Output content of collection as LaTex table. By default a table with two columns is created: the left; /// column contains the name of each variable, the right column the value.; ///; /// The following optional named arguments can be used to modify the default behavior; /// <table>; /// <tr><th> Argument <th> Effect; /// <tr><td> `Columns(Int_t ncol)` <td> Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns; /// <tr><td> `Sibling(const RooAbsCollection& other)` <td> Define sibling list.; /// The sibling list is assumed to have objects with the same; /// name in the same order. If this is not the case warnings will be printed. If a single; /// sibling list is specified, 3 columns will be output: the (common) name, the value of this; /// list and the value in the sibling list. Multiple sibling lists can be specified by; /// repeating the Sibling() command.; /// <tr><td> `Format(const char* str)` <td> Classic format string, provided for backward compatibility; /// <tr><td> `Format()` <td> Formatting arguments.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown. ""N"" adds name, ""E"" adds error,; /// ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error; /// and n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `OutputFile(const char* fname)` <td> Send output to file with given name rather than standard output; ///; /// </table>; ///; /// Example use:; /// ```; /// list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; /// ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:88,Availability,down,down,88,"//Windows seems to need an implementation where two different std::sorts are written; //down in two different blocks. Switching between the two comparators using a ternary; //operator does not compile on windows, although the signature is identical.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:109,Security,hash,hash,109,"////////////////////////////////////////////////////////////////////////////////; /// \param[in] flag Switch hash map on or off.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:140,Deployability,patch,patch,140,"// Use a ROOT version macro for behavior-changing code in ROOT 6.33, so se can; // keep the same RooFit code base in master and in the 6.32 patch release; // branch for now.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:146,Deployability,release,release,146,"// Use a ROOT version macro for behavior-changing code in ROOT 6.33, so se can; // keep the same RooFit code base in master and in the 6.32 patch release; // branch for now.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx:57,Security,hash,hash-assisted,57,"// RooArgLists can have duplicate object, so we can't do hash-assisted lookups.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsCollection.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsCollection.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2660,Availability,avail,available,2660,"raint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2. // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);. // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));. // To force `fitTo` to take the global observable values from the model even; // though they are in the dataset, you can use the new `GlobalObservablesSource`; // command argument:; model.fitTo(*data, GlobalObservables(g1, g2), GlobalObservablesSource(""model""));; // The only other allowed value for `GlobalObservablesSource` is ""data"", which; // corresponds to the new default behavior explained above.; ```. In case you create a RooFit dataset directly by calling its constructor, you; can also pass the global observables in a command argument instead of calling; RooAbsData::setGlobalObservables() later:; ```; RooDataSet data{""dataset"", ""dataset"", x, RooFit::GlobalObservables(g1, g2)};; ```. To access the set of global observables stored in a RooAbsData, call; RooAbsData::getGlobalObservables(). It returns a `nullptr` if no global; observable snapshots are stored in the dataset.; ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1733,Deployability,release,release,1733,"stract base class for binned and unbinned; datasets. The abstract interface defines plotting and tabulating entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2. // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);. // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));. // To force `fitTo` to take the global observ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1820,Deployability,release,release,1820,"ting entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2. // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);. // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));. // To force `fitTo` to take the global observable values from the model even; // though they are in the dataset, you can use the new `GlobalObservab",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:830,Integrability,interface,interface,830,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsData.cxx; \class RooAbsData; \ingroup Roofitcore. Abstract base class for binned and unbinned; datasets. The abstract interface defines plotting and tabulating entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values fo",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1129,Integrability,depend,depending,1129,"*; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsData.cxx; \class RooAbsData; \ingroup Roofitcore. Abstract base class for binned and unbinned; datasets. The abstract interface defines plotting and tabulating entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this cha",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1082,Modifiability,variab,variables,1082,"*; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsData.cxx; \class RooAbsData; \ingroup Roofitcore. Abstract base class for binned and unbinned; datasets. The abstract interface defines plotting and tabulating entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this cha",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1249,Modifiability,variab,variables,1249,"*; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsData.cxx; \class RooAbsData; \ingroup Roofitcore. Abstract base class for binned and unbinned; datasets. The abstract interface defines plotting and tabulating entry; points for its contents and provides an iterator over its elements; (bins for binned data sets, data points for unbinned datasets). ### Storing global observables in RooFit datasets. RooFit groups model variables into *observables* and *parameters*, depending on; if their values are stored in the dataset. For fits with parameter; constraints, there is a third kind of variables, called *global observables*.; These represent the results of auxiliary measurements that constrain the; nuisance parameters. In the RooFit implementation, a likelihood is generally; the sum of two terms:; - the likelihood of the data given the parameters, where the normalization set; is the set of observables (implemented by RooNLLVar); - the constraint term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_p",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:3421,Security,access,access,3421,"nt term, where the normalization set is the set of *global; observables* (implemented by RooConstraintSum). Before this release, the global observable values were always taken from the; model/pdf. With this release, a mechanism is added to store a snapshot of; global observables in any RooDataSet or RooDataHist. For toy studies where the; global observables assume a different values for each toy, the bookkeeping of; the set of global observables and in particular their values is much easier; with this change. Usage example for a model with global observables `g1` and `g2`:; ```; using namespace RooFit;. std::unique_ptr<RooAbsData> data{model.generate(x, 1000)}; // data has only the single observables x; data->setGlobalObservables(g1, g2); // now, data also stores a snapshot of g1 and g2. // If you fit the model to the data, the global observables and their values; // are taken from the dataset:; model.fitTo(*data);. // You can still define the set of global observables yourself, but the values; // will be takes from the dataset if available:; model.fitTo(*data, GlobalObservables(g1, g2));. // To force `fitTo` to take the global observable values from the model even; // though they are in the dataset, you can use the new `GlobalObservablesSource`; // command argument:; model.fitTo(*data, GlobalObservables(g1, g2), GlobalObservablesSource(""model""));; // The only other allowed value for `GlobalObservablesSource` is ""data"", which; // corresponds to the new default behavior explained above.; ```. In case you create a RooFit dataset directly by calling its constructor, you; can also pass the global observables in a command argument instead of calling; RooAbsData::setGlobalObservables() later:; ```; RooDataSet data{""dataset"", ""dataset"", x, RooFit::GlobalObservables(g1, g2)};; ```. To access the set of global observables stored in a RooAbsData, call; RooAbsData::getGlobalObservables(). It returns a `nullptr` if no global; observable snapshots are stored in the dataset.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,parameteriz,parameterized,17,"// reconnect any parameterized ranges to internal dataset observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:112,Modifiability,variab,variables,112,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a set of variables. Only fundamental elements of vars; /// (RooRealVar,RooCategory etc) are stored as part of the dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,parameteriz,parameterized,17,"// reconnect any parameterized ranges to internal dataset observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:105,Performance,Cache,Cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Internal method -- Cache given set of functions with data",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:112,Performance,cache,cached,112,"////////////////////////////////////////////////////////////////////////////////; /// Internal method -- Remove cached function values",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:132,Performance,cache,cache,132,"////////////////////////////////////////////////////////////////////////////////; /// Internal method -- Attach dataset copied with cache contents to copied instances of functions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:95,Energy Efficiency,reduce,reduced,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a reduced copy of this dataset. The caller takes ownership of the returned dataset; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `SelectVars(const RooArgSet& vars)` <td> Only retain the listed observables in the output dataset; /// <tr><td> `Cut(const char* expression)` <td> Only retain event surviving the given cut expression.; /// <tr><td> `Cut(const RooFormulaVar& expr)` <td> Only retain event surviving the given cut formula.; /// <tr><td> `CutRange(const char* name)` <td> Only retain events inside range with given name. Multiple CutRange; /// arguments may be given to select multiple ranges.; /// Note that this will also consider the variables that are not selected by SelectVars().; /// <tr><td> `EventRange(int lo, int hi)` <td> Only retain events with given sequential event numbers; /// <tr><td> `Name(const char* name)` <td> Give specified name to output dataset; /// <tr><td> `Title(const char* name)` <td> Give specified title to output dataset; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:782,Modifiability,variab,variables,782,"////////////////////////////////////////////////////////////////////////////////; /// Create a reduced copy of this dataset. The caller takes ownership of the returned dataset; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `SelectVars(const RooArgSet& vars)` <td> Only retain the listed observables in the output dataset; /// <tr><td> `Cut(const char* expression)` <td> Only retain event surviving the given cut expression.; /// <tr><td> `Cut(const RooFormulaVar& expr)` <td> Only retain event surviving the given cut formula.; /// <tr><td> `CutRange(const char* name)` <td> Only retain events inside range with given name. Multiple CutRange; /// arguments may be given to select multiple ranges.; /// Note that this will also consider the variables that are not selected by SelectVars().; /// <tr><td> `EventRange(int lo, int hi)` <td> Only retain events with given sequential event numbers; /// <tr><td> `Name(const char* name)` <td> Give specified name to output dataset; /// <tr><td> `Title(const char* name)` <td> Give specified title to output dataset; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:43,Modifiability,variab,variable,43,"// Make sure varSubset doesn't contain any variable not in this dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:334,Energy Efficiency,reduce,reduce,334,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points.; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:205,Modifiability,variab,variable,205,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points.; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:261,Modifiability,variab,variables,261,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points.; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:270,Energy Efficiency,reduce,reduced,270,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points.; /// The 'cutVar' formula variable is used to select the subset of data points to be; /// retained in the reduced data collection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:190,Modifiability,variab,variable,190,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points.; /// The 'cutVar' formula variable is used to select the subset of data points to be; /// retained in the reduced data collection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:393,Energy Efficiency,reduce,reduce,393,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points; /// and reducing the dimensions to the specified set.; ///; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:264,Modifiability,variab,variable,264,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points; /// and reducing the dimensions to the specified set.; ///; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:320,Modifiability,variab,variables,320,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points; /// and reducing the dimensions to the specified set.; ///; /// The cut expression can refer to any variable in the data set. For cuts involving; /// other variables, such as intermediate formula objects, use the equivalent; /// reduce method specifying the as a RooFormulVar reference.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:43,Modifiability,variab,variable,43,"// Make sure varSubset doesn't contain any variable not in this dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:329,Energy Efficiency,reduce,reduced,329,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points; /// and reducing the dimensions to the specified set.; ///; /// The 'cutVar' formula variable is used to select the subset of data points to be; /// retained in the reduced data collection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:249,Modifiability,variab,variable,249,"////////////////////////////////////////////////////////////////////////////////; /// Create a subset of the data set by applying the given cut on the data points; /// and reducing the dimensions to the specified set.; ///; /// The 'cutVar' formula variable is used to select the subset of data points to be; /// retained in the reduced data collection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:43,Modifiability,variab,variable,43,"// Make sure varSubset doesn't contain any variable not in this dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:179,Modifiability,variab,variables,179,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this; /// dataset for the variables with given names.; ///; /// \param[in] varNameList Comma-separated variable names.; /// \param[in] binArgX Control the binning for the `x` variable.; /// \param[in] binArgY Control the binning for the `y` variable.; /// \param[in] binArgZ Control the binning for the `z` variable.; /// \return Histogram now owned by user.; ///; /// The possible binning command arguments for each axis are:; ///; /// <table>; /// <tr><td> `AutoBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin, set binning to nbins; /// <tr><td> `AutoSymBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin,; /// with additional constraint that mean of data is in center of range, set binning to nbins; /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, double lo, double hi)` <td> Apply specified binning to x axis of histogram; ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on y axis of ROOT histogram; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on z axis of ROOT histogram; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:256,Modifiability,variab,variable,256,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this; /// dataset for the variables with given names.; ///; /// \param[in] varNameList Comma-separated variable names.; /// \param[in] binArgX Control the binning for the `x` variable.; /// \param[in] binArgY Control the binning for the `y` variable.; /// \param[in] binArgZ Control the binning for the `z` variable.; /// \return Histogram now owned by user.; ///; /// The possible binning command arguments for each axis are:; ///; /// <table>; /// <tr><td> `AutoBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin, set binning to nbins; /// <tr><td> `AutoSymBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin,; /// with additional constraint that mean of data is in center of range, set binning to nbins; /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, double lo, double hi)` <td> Apply specified binning to x axis of histogram; ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on y axis of ROOT histogram; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on z axis of ROOT histogram; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:328,Modifiability,variab,variable,328,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this; /// dataset for the variables with given names.; ///; /// \param[in] varNameList Comma-separated variable names.; /// \param[in] binArgX Control the binning for the `x` variable.; /// \param[in] binArgY Control the binning for the `y` variable.; /// \param[in] binArgZ Control the binning for the `z` variable.; /// \return Histogram now owned by user.; ///; /// The possible binning command arguments for each axis are:; ///; /// <table>; /// <tr><td> `AutoBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin, set binning to nbins; /// <tr><td> `AutoSymBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin,; /// with additional constraint that mean of data is in center of range, set binning to nbins; /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, double lo, double hi)` <td> Apply specified binning to x axis of histogram; ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on y axis of ROOT histogram; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on z axis of ROOT histogram; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:394,Modifiability,variab,variable,394,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this; /// dataset for the variables with given names.; ///; /// \param[in] varNameList Comma-separated variable names.; /// \param[in] binArgX Control the binning for the `x` variable.; /// \param[in] binArgY Control the binning for the `y` variable.; /// \param[in] binArgZ Control the binning for the `z` variable.; /// \return Histogram now owned by user.; ///; /// The possible binning command arguments for each axis are:; ///; /// <table>; /// <tr><td> `AutoBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin, set binning to nbins; /// <tr><td> `AutoSymBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin,; /// with additional constraint that mean of data is in center of range, set binning to nbins; /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, double lo, double hi)` <td> Apply specified binning to x axis of histogram; ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on y axis of ROOT histogram; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on z axis of ROOT histogram; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:460,Modifiability,variab,variable,460,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1,TH2 or TH3 with the values of this; /// dataset for the variables with given names.; ///; /// \param[in] varNameList Comma-separated variable names.; /// \param[in] binArgX Control the binning for the `x` variable.; /// \param[in] binArgY Control the binning for the `y` variable.; /// \param[in] binArgZ Control the binning for the `z` variable.; /// \return Histogram now owned by user.; ///; /// The possible binning command arguments for each axis are:; ///; /// <table>; /// <tr><td> `AutoBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin, set binning to nbins; /// <tr><td> `AutoSymBinning(Int_t nbins, Double_y margin)` <td> Automatically calculate range with given added fractional margin,; /// with additional constraint that mean of data is in center of range, set binning to nbins; /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, double lo, double hi)` <td> Apply specified binning to x axis of histogram; ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on y axis of ROOT histogram; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be mapped on z axis of ROOT histogram; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,variab,variable,17,"// Parse list of variable names",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:142,Modifiability,Variab,Variable,142,"////////////////////////////////////////////////////////////////////////////////; /// Calculate standardized moment.; ///; /// \param[in] var Variable to be used for calculating the moment.; /// \param[in] order Order of the moment.; /// \param[in] cutSpec If specified, the moment is calculated on the subset of the data which pass the C++ cut specification expression 'cutSpec'; /// \param[in] cutRange If specified, calculate inside the range named 'cutRange' (also applies cut spec); /// \return \f$ \frac{\left< \left( X - \left< X \right> \right)^n \right>}{\sigma^n} \f$, where n = order.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:148,Modifiability,Variab,Variable,148,"////////////////////////////////////////////////////////////////////////////////; /// Calculate moment of requested order.; ///; /// \param[in] var Variable to be used for calculating the moment.; /// \param[in] order Order of the moment.; /// \param[in] cutSpec If specified, the moment is calculated on the subset of the data which pass the C++ cut specification expression 'cutSpec'; /// \param[in] cutRange If specified, calculate inside the range named 'cutRange' (also applies cut spec); /// \return \f$ \left< \left( X - \left< X \right> \right)^n \right> \f$ of order \f$n\f$.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,variab,variable,10,"// Lookup variable in dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:18,Modifiability,variab,variable,18,"// Check if found variable is of type RooRealVar",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,variab,variable,10,"// Lookup variable in dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:18,Modifiability,variab,variable,18,"// Check if found variable is of type RooRealVar",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,variab,variable,10,"// Lookup variable in dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:55,Availability,error,error,55,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/Sqrt(N) which is generally valid.; // Create holder variable for mean",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,Modifiability,variab,variable,16,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/Sqrt(N) which is generally valid.; // Create holder variable for mean",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:138,Modifiability,variab,variable,138,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/Sqrt(N) which is generally valid.; // Create holder variable for mean",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:37,Availability,error,error,37,"// fill in this variable's value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,Modifiability,variab,variable,16,"// fill in this variable's value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:55,Availability,error,error,55,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/(2*Sqrt(N)) which is only valid if the variable has a Gaussian distribution.; // Create RMS value holder",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,Modifiability,variab,variable,16,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/(2*Sqrt(N)) which is only valid if the variable has a Gaussian distribution.; // Create RMS value holder",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:125,Modifiability,variab,variable,125,"// Create a new variable with appropriate strings. The error is calculated as; // RMS/(2*Sqrt(N)) which is only valid if the variable has a Gaussian distribution.; // Create RMS value holder",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:37,Availability,error,error,37,"// Fill in this variable's value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:16,Modifiability,variab,variable,16,"// Fill in this variable's value and error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:755,Availability,error,error,755,"////////////////////////////////////////////////////////////////////////////////; /// Add a box with statistics information to the specified frame. By default a box with the; /// event count, mean and rms of the plotted variable is added.; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `What(const char* whatstr)` <td> Controls what is printed: ""N"" = count, ""M"" is mean, ""R"" is RMS.; /// <tr><td> `Format(const char* optStr)` <td> \deprecated Classing parameter formatting options, provided for backward compatibility; ///; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown:; /// - ""N"" adds name; /// - ""E"" adds error; /// - ""A"" shows asymmetric error; /// - ""U"" shows unit; /// - ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `Label(const chat* label)` <td> Add header label to parameter box; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left,right side of box and top of box. Position of; /// bottom of box is calculated automatically from number lines in box; /// <tr><td> `Cut(const char* expression)` <td> Apply given cut expression to data when calculating statistics; /// <tr><td> `CutRange(const char* rangeName)` <td> Only consider events within given range when calculating statistics. Multiple; /// CutRange() argument may be specified to combine ranges.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:789,Availability,error,error,789,"////////////////////////////////////////////////////////////////////////////////; /// Add a box with statistics information to the specified frame. By default a box with the; /// event count, mean and rms of the plotted variable is added.; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `What(const char* whatstr)` <td> Controls what is printed: ""N"" = count, ""M"" is mean, ""R"" is RMS.; /// <tr><td> `Format(const char* optStr)` <td> \deprecated Classing parameter formatting options, provided for backward compatibility; ///; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown:; /// - ""N"" adds name; /// - ""E"" adds error; /// - ""A"" shows asymmetric error; /// - ""U"" shows unit; /// - ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `Label(const chat* label)` <td> Add header label to parameter box; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left,right side of box and top of box. Position of; /// bottom of box is calculated automatically from number lines in box; /// <tr><td> `Cut(const char* expression)` <td> Apply given cut expression to data when calculating statistics; /// <tr><td> `CutRange(const char* rangeName)` <td> Only consider events within given range when calculating statistics. Multiple; /// CutRange() argument may be specified to combine ranges.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1038,Availability,error,error,1038,"////////////////////////////////////////////////////////////////////////////////; /// Add a box with statistics information to the specified frame. By default a box with the; /// event count, mean and rms of the plotted variable is added.; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `What(const char* whatstr)` <td> Controls what is printed: ""N"" = count, ""M"" is mean, ""R"" is RMS.; /// <tr><td> `Format(const char* optStr)` <td> \deprecated Classing parameter formatting options, provided for backward compatibility; ///; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown:; /// - ""N"" adds name; /// - ""E"" adds error; /// - ""A"" shows asymmetric error; /// - ""U"" shows unit; /// - ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `Label(const chat* label)` <td> Add header label to parameter box; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left,right side of box and top of box. Position of; /// bottom of box is calculated automatically from number lines in box; /// <tr><td> `Cut(const char* expression)` <td> Apply given cut expression to data when calculating statistics; /// <tr><td> `CutRange(const char* rangeName)` <td> Only consider events within given range when calculating statistics. Multiple; /// CutRange() argument may be specified to combine ranges.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:220,Modifiability,variab,variable,220,"////////////////////////////////////////////////////////////////////////////////; /// Add a box with statistics information to the specified frame. By default a box with the; /// event count, mean and rms of the plotted variable is added.; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `What(const char* whatstr)` <td> Controls what is printed: ""N"" = count, ""M"" is mean, ""R"" is RMS.; /// <tr><td> `Format(const char* optStr)` <td> \deprecated Classing parameter formatting options, provided for backward compatibility; ///; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown:; /// - ""N"" adds name; /// - ""E"" adds error; /// - ""A"" shows asymmetric error; /// - ""U"" shows unit; /// - ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `Label(const chat* label)` <td> Add header label to parameter box; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left,right side of box and top of box. Position of; /// bottom of box is calculated automatically from number lines in box; /// <tr><td> `Cut(const char* expression)` <td> Apply given cut expression to data when calculating statistics; /// <tr><td> `CutRange(const char* rangeName)` <td> Only consider events within given range when calculating statistics. Multiple; /// CutRange() argument may be specified to combine ranges.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1149,Modifiability,variab,variable,1149,"////////////////////////////////////////////////////////////////////////////////; /// Add a box with statistics information to the specified frame. By default a box with the; /// event count, mean and rms of the plotted variable is added.; ///; /// The following optional named arguments are accepted; /// <table>; /// <tr><td> `What(const char* whatstr)` <td> Controls what is printed: ""N"" = count, ""M"" is mean, ""R"" is RMS.; /// <tr><td> `Format(const char* optStr)` <td> \deprecated Classing parameter formatting options, provided for backward compatibility; ///; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// <table>; /// <tr><td> const char* what <td> Controls what is shown:; /// - ""N"" adds name; /// - ""E"" adds error; /// - ""A"" shows asymmetric error; /// - ""U"" shows unit; /// - ""H"" hides the value; /// <tr><td> `FixedPrecision(int n)` <td> Controls precision, set fixed number of digits; /// <tr><td> `AutoPrecision(int n)` <td> Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `VerbatimName(bool flag)` <td> Put variable name in a \\verb+ + clause.; /// </table>; /// <tr><td> `Label(const chat* label)` <td> Add header label to parameter box; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left,right side of box and top of box. Position of; /// bottom of box is calculated automatically from number lines in box; /// <tr><td> `Cut(const char* expression)` <td> Apply given cut expression to data when calculating statistics; /// <tr><td> `CutRange(const char* rangeName)` <td> Only consider events within given range when calculating statistics. Multiple; /// CutRange() argument may be specified to combine ranges.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:220,Availability,error,error,220,"////////////////////////////////////////////////////////////////////////////////; /// Loop over columns of our tree data and fill the input histogram. Returns a pointer to the; /// input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and; /// therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input; /// histogram according to the order in which they appear in the input plotVars list.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:315,Modifiability,Variab,Variables,315,"////////////////////////////////////////////////////////////////////////////////; /// Loop over columns of our tree data and fill the input histogram. Returns a pointer to the; /// input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and; /// therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input; /// histogram according to the order in which they appear in the input plotVars list.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:111,Integrability,depend,depend,111,"// Check that the plot variables are all actually RooAbsReal's and print a warning if we do not; // explicitly depend on one of them. Clone any variables that we do not contain directly and; // redirect them to use our event data.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:23,Modifiability,variab,variables,23,"// Check that the plot variables are all actually RooAbsReal's and print a warning if we do not; // explicitly depend on one of them. Clone any variables that we do not contain directly and; // redirect them to use our event data.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:144,Modifiability,variab,variables,144,"// Check that the plot variables are all actually RooAbsReal's and print a warning if we do not; // explicitly depend on one of them. Clone any variables that we do not contain directly and; // redirect them to use our event data.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:22,Modifiability,variab,variables,22,"// Lookup each of the variables we are binning in our tree variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:59,Modifiability,variab,variables,59,"// Lookup each of the variables we are binning in our tree variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:3,Safety,Sanity check,Sanity check,3,"// Sanity check",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:20,Modifiability,variab,variables,20,"// Construct set of variables to be included in split sets = full set - split category",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:14,Modifiability,variab,variable,14,"// Add weight variable explicitly if dataset has weights, but no top-level weight; // variable exists (can happen with composite datastores)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:86,Modifiability,variab,variable,86,"// Add weight variable explicitly if dataset has weights, but no top-level weight; // variable exists (can happen with composite datastores)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:28,Availability,error,errors,28,"// For datasets with weight errors or sumW2, the interface to fill; // RooDataHist and RooDataSet is not the same.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:49,Integrability,interface,interface,49,"// For datasets with weight errors or sumW2, the interface to fill; // RooDataHist and RooDataSet is not the same.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1045,Availability,error,error,1045,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:611,Integrability,depend,depends,611,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:92,Modifiability,variab,variable,92,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:555,Modifiability,variab,variables,555,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:780,Modifiability,variab,variable,780,"// namespace; /**; * \brief Split the dataset into subsets based on states of a categorical variable in this dataset.; *; * Returns a list of sub-datasets, which each dataset named after a given state; * name in the `splitCat`. The observables `splitCat` itself is no longer present; * in the sub-datasets.; *; * \note If you mean to split a dataset into sub-datasets that correspond to; * the individual channels of a RooSimultaneous, it is better to use; * RooAbsData::split(const RooSimultaneous &, bool), because then the; * sub-datasets only contain variables that the pdf for the corresponding; * channel depends on. This is much faster in case of many channels, and the; * resulting sub-datasets don't waste memory for unused columns.; *; * \param splitCat The categorical variable used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:695,Availability,error,error,695,"/**; * \brief Split the dataset into subsets based on the channels of a RooSimultaneous.; *; * Returns a list of sub-datasets, which each dataset named after the; * applicable state name of the RooSimultaneous index category. The index; * category itself is no longer present in the sub-datasets. The sub-datasets; * only contain variables that the pdf for the corresponding channel depends; * on.; *; * \param simPdf The simultaneous pdf used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:383,Integrability,depend,depends,383,"/**; * \brief Split the dataset into subsets based on the channels of a RooSimultaneous.; *; * Returns a list of sub-datasets, which each dataset named after the; * applicable state name of the RooSimultaneous index category. The index; * category itself is no longer present in the sub-datasets. The sub-datasets; * only contain variables that the pdf for the corresponding channel depends; * on.; *; * \param simPdf The simultaneous pdf used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:330,Modifiability,variab,variables,330,"/**; * \brief Split the dataset into subsets based on the channels of a RooSimultaneous.; *; * Returns a list of sub-datasets, which each dataset named after the; * applicable state name of the RooSimultaneous index category. The index; * category itself is no longer present in the sub-datasets. The sub-datasets; * only contain variables that the pdf for the corresponding channel depends; * on.; *; * \param simPdf The simultaneous pdf used for splitting the dataset.; * \param createEmptyDataSets Flag indicating whether to create empty datasets; * for missing categories (`false` by default).; *; * \return An owning pointer to a TList of subsets of the dataset.; * Returns `nullptr` if an error occurs.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1026,Availability,error,error,1026,"///////////////////////////////; /// Plot dataset on specified frame.; ///; /// By default:; /// - An unbinned dataset will use the default binning of the target frame.; /// - A binned dataset will retain its intrinsic binning.; ///; /// The following optional named arguments can be used to modify the behaviour:; /// \note Please follow the function links in the left column to learn about PyROOT specifics for a given option.; ///; /// <table>; ///; /// <tr><th> <th> Data representation options; /// <tr><td> RooFit::Asymmetry(const RooCategory& c); /// <td> Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; /// Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> RooFit::Efficiency(const RooCategory& c); /// <td> Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; /// <tr><td> RooFit::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn hist",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1239,Availability,error,error,1239,"; ///; /// <table>; ///; /// <tr><th> <th> Data representation options; /// <tr><td> RooFit::Asymmetry(const RooCategory& c); /// <td> Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; /// Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> RooFit::Efficiency(const RooCategory& c); /// <td> Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; /// <tr><td> RooFit::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state numbe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1327,Availability,error,error,1327,"; ///; /// <table>; ///; /// <tr><th> <th> Data representation options; /// <tr><td> RooFit::Asymmetry(const RooCategory& c); /// <td> Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; /// Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> RooFit::Efficiency(const RooCategory& c); /// <td> Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; /// <tr><td> RooFit::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state numbe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:4281,Availability,error,error,4281,"formly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1""));; /// ```; ///; /// <tr><th> <th> Histogram drawing options; /// <tr><td> RooFit::DrawOption(const char* opt); /// <td> Select ROOT draw option for resulting TGraph object; /// <tr><td> RooFit::LineStyle(Style_t style); /// <td> Select line style by ROOT line style code, default is solid; /// <tr><td> RooFit::LineColor(Color_t color); /// <td> Select line color by ROOT color code, default is black; /// <tr><td> RooFit::LineWidth(Width_t width); /// <td> Select line with in pixels, default is 3; /// <tr><td> RooFit::MarkerStyle(Style_t style); /// <td> Select the ROOT marker style, default is 21; /// <tr><td> RooFit::MarkerColor(Color_t color); /// <td> Select the ROOT marker color, default is black; /// <tr><td> RooFit::MarkerSize(Size_t size); /// <td> Select the ROOT marker size; /// <tr><td> RooFit::FillStyle(Style_t style); /// <td> Select fill style, default is filled.; /// <tr><td> RooFit::FillColor(Color_t color); /// <td> Select fill color by ROOT color code; /// <tr><td> RooFit::XErrorSize(double frac); /// <td> Select size of X error bar as fraction of the bin width, default is 1; ///; /// <tr><th> <th> Misc. other options; /// <tr><td> RooFit::Name(const char* name); /// <td> Give curve specified name in frame. Useful if curve is to be referenced later; /// <tr><td> RooFit::Invisible(); /// <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <tr><td> RooFit::AddTo(const char* name, double wgtSel, double wgtOther); /// <td> Add constructed histogram to already existing histogram with given name and relative weight factors; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:1944,Deployability,update,update,1944,"t::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2191,Deployability,continuous,continuous,2191,"um-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1"")",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2202,Modifiability,variab,variables,2202,"um-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1"")",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2856,Modifiability,variab,variables,2856,"on in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1""));; /// ```; ///; /// <tr><th> <th> Histogram drawing options; /// <tr><td> RooFit::DrawOption(const char* opt); /// <td> Select ROOT draw option for resulting TGraph object; /// <tr><td> RooFit::LineStyle(Style_t style); /// <td> Select line style by ROOT line style code, default is solid; /// <tr><td> RooFit::LineColor(Color_t color); /// <td> Select line color by ROOT color code, default is black; /// <tr><td> RooFit::LineWidth(Width_t width); /// <td> Select line with in pixels, default is 3; /// <tr><td> RooFit::Mar",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:429,Usability,learn,learn,429,"////////////////////////////////////////////////////////////////////////////////; /// Plot dataset on specified frame.; ///; /// By default:; /// - An unbinned dataset will use the default binning of the target frame.; /// - A binned dataset will retain its intrinsic binning.; ///; /// The following optional named arguments can be used to modify the behaviour:; /// \note Please follow the function links in the left column to learn about PyROOT specifics for a given option.; ///; /// <table>; ///; /// <tr><th> <th> Data representation options; /// <tr><td> RooFit::Asymmetry(const RooCategory& c); /// <td> Show the asymmetry of the data in given two-state category [F(+)-F(-)] / [F(+)+F(-)].; /// Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> RooFit::Efficiency(const RooCategory& c); /// <td> Show the efficiency F(acc)/[F(acc)+F(rej)]. Category must have two states with indices 0 and 1; /// <tr><td> RooFit::DataError(Int_t); /// <td> Select the type of error drawn:; /// - `Auto(default)` results in Poisson for unweighted data and SumW2 for weighted data; /// - `Poisson` draws asymmetric Poisson confidence intervals.; /// - `SumW2` draws symmetric sum-of-weights error ( \f$ \left( \sum w \right)^2 / \sum\left(w^2\right) \f$ ); /// - `None` draws no error bars; /// <tr><td> RooFit::Binning(int nbins, double xlo, double xhi); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const RooAbsBinning&); /// <td> Use specified binning to draw dataset; /// <tr><td> RooFit::Binning(const char* name); /// <td> Use binning with specified name to draw dataset; /// <tr><td> RooFit::RefreshNorm(); /// <td> Force refreshing for PDF normalization information in frame.; /// If set, any subsequent PDF will normalize to this dataset, even if it is; /// not the first one added to the frame. By default only the 1st dataset; /// added to a frame will update the normalization information; /// <tr><td> RooFit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:2990,Usability,clear,clear,2990,"the normalization information; /// <tr><td> RooFit::Rescale(double f); /// <td> Rescale drawn histogram by given factor.; /// <tr><td> RooFit::Cut(const char*); /// <td> Only plot entries that pass the given cut.; /// Apart from cutting in continuous variables `Cut(""x>5"")`, this can also be used to plot a specific; /// category state. Use something like `Cut(""myCategory == myCategory::stateA"")`, where; /// `myCategory` resolves to the state number for a given entry and; /// `myCategory::stateA` resolves to the state number of the state named ""stateA"".; ///; /// <tr><td> RooFit::CutRange(const char*); /// <td> Only plot data from given range. Separate multiple ranges with "","".; /// \note This often requires passing the normalisation when plotting the PDF because RooFit does not save; /// how many events were being plotted (it will only work for cutting slices out of uniformly distributed; /// variables).; /// ```; /// data->plotOn(frame01, CutRange(""SB1""));; /// const double nData = data->sumEntries("""", ""SB1"");; /// // Make clear that the target normalisation is nData. The enumerator NumEvent; /// // is needed to switch between relative and absolute scaling.; /// model.plotOn(frame01, Normalization(nData, RooAbsReal::NumEvent),; /// ProjectionRange(""SB1""));; /// ```; ///; /// <tr><th> <th> Histogram drawing options; /// <tr><td> RooFit::DrawOption(const char* opt); /// <td> Select ROOT draw option for resulting TGraph object; /// <tr><td> RooFit::LineStyle(Style_t style); /// <td> Select line style by ROOT line style code, default is solid; /// <tr><td> RooFit::LineColor(Color_t color); /// <td> Select line color by ROOT color code, default is black; /// <tr><td> RooFit::LineWidth(Width_t width); /// <td> Select line with in pixels, default is 3; /// <tr><td> RooFit::MarkerStyle(Style_t style); /// <td> Select the ROOT marker style, default is 21; /// <tr><td> RooFit::MarkerColor(Color_t color); /// <td> Select the ROOT marker color, default is black; /// <tr><td> Ro",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:56,Deployability,configurat,configuration,56,"// New experimental plotOn() with varargs...; // Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:56,Modifiability,config,configuration,56,"// New experimental plotOn() with varargs...; // Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:12,Availability,error,error,12,"// Map auto error type to actual type",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:129,Modifiability,variab,variable,129,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram of the frame's variable and append it to the frame.; /// The frame variable must be one of the data sets dimensions.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()).; ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set.; ///; /// The drawOptions are passed to the TH1::Draw() method.; /// \see RooAbsData::plotOn(RooPlot*,const RooLinkedList&) const",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:181,Modifiability,variab,variable,181,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram of the frame's variable and append it to the frame.; /// The frame variable must be one of the data sets dimensions.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()).; ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set.; ///; /// The drawOptions are passed to the TH1::Draw() method.; /// \see RooAbsData::plotOn(RooPlot*,const RooLinkedList&) const",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:333,Modifiability,variab,variable,333,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram of the frame's variable and append it to the frame.; /// The frame variable must be one of the data sets dimensions.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()).; ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set.; ///; /// The drawOptions are passed to the TH1::Draw() method.; /// \see RooAbsData::plotOn(RooPlot*,const RooLinkedList&) const",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:549,Modifiability,variab,variable,549,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram of the frame's variable and append it to the frame.; /// The frame variable must be one of the data sets dimensions.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()).; ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set.; ///; /// The drawOptions are passed to the TH1::Draw() method.; /// \see RooAbsData::plotOn(RooPlot*,const RooLinkedList&) const",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:49,Modifiability,variab,variable,49,"// create and fill a temporary histogram of this variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:32,Availability,error,error,32,"// Keep track of sum-of-weights error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:18,Modifiability,variab,variable,18,"// If the dataset variable has a wide range than the plot variable,; // calculate the number of entries in the dataset in the plot variable fit range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:58,Modifiability,variab,variable,58,"// If the dataset variable has a wide range than the plot variable,; // calculate the number of entries in the dataset in the plot variable fit range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:131,Modifiability,variab,variable,131,"// If the dataset variable has a wide range than the plot variable,; // calculate the number of entries in the dataset in the plot variable fit range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:273,Modifiability,variab,variable,273,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the asymmetry N[+] - N[-] / ( N[+] + N[-] ),; /// where N(+/-) is the number of data points with asymCat=+1 and asymCat=-1; /// as function of the frames variable. The asymmetry category 'asymCat' must; /// have exactly 2 (or 3) states defined with index values +1,-1 (and 0); ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:497,Modifiability,variab,variable,497,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the asymmetry N[+] - N[-] / ( N[+] + N[-] ),; /// where N(+/-) is the number of data points with asymCat=+1 and asymCat=-1; /// as function of the frames variable. The asymmetry category 'asymCat' must; /// have exactly 2 (or 3) states defined with index values +1,-1 (and 0); ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:712,Modifiability,variab,variable,712,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the asymmetry N[+] - N[-] / ( N[+] + N[-] ),; /// where N(+/-) is the number of data points with asymCat=+1 and asymCat=-1; /// as function of the frames variable. The asymmetry category 'asymCat' must; /// have exactly 2 (or 3) states defined with index values +1,-1 (and 0); ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:48,Modifiability,variab,variable,48,"// create and fill temporary histograms of this variable for each state",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:263,Modifiability,variab,variable,263,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the efficiency N[1] / ( N[1] + N[0] ),; /// where N(1/0) is the number of data points with effCat=1 and effCat=0; /// as function of the frames variable. The efficiency category 'effCat' must; /// have exactly 2 +1 and 0.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:443,Modifiability,variab,variable,443,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the efficiency N[1] / ( N[1] + N[0] ),; /// where N(1/0) is the number of data points with effCat=1 and effCat=0; /// as function of the frames variable. The efficiency category 'effCat' must; /// have exactly 2 +1 and 0.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:658,Modifiability,variab,variable,658,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a histogram with the efficiency N[1] / ( N[1] + N[0] ),; /// where N(1/0) is the number of data points with effCat=1 and effCat=0; /// as function of the frames variable. The efficiency category 'effCat' must; /// have exactly 2 +1 and 0.; ///; /// The plot range and the number of plot bins is determined by the parameters; /// of the plot variable of the frame (RooAbsReal::setPlotRange(), RooAbsReal::setPlotBins()); ///; /// The optional cut string expression can be used to select the events to be plotted.; /// The cut specification may refer to any variable contained in the data set; ///; /// The drawOptions are passed to the TH1::Draw() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:48,Modifiability,variab,variable,48,"// create and fill temporary histograms of this variable for each state",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:363,Modifiability,variab,variable,363,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a 1-dimensional table for given category column; /// This functions is the equivalent of plotOn() for category dimensions.; ///; /// The optional cut string expression can be used to select the events to be tabulated; /// The cut specification may refer to any variable contained in the data set; ///; /// The option string is currently not used",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,variab,variable,17,"// Clone derived variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:230,Availability,error,error,230,"////////////////////////////////////////////////////////////////////////////////; /// Fill Doubles 'lowest' and 'highest' with the lowest and highest value of; /// observable 'var' in this dataset. If the return value is true and error; /// occurred",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:10,Modifiability,variab,variable,10,"// Lookup variable in dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:18,Modifiability,variab,variable,18,"// Check if found variable is of type RooRealVar",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:115,Performance,cache,cached,115,"////////////////////////////////////////////////////////////////////////////////; /// Prepare dataset for use with cached constant terms listed in; /// 'cacheList' of expression 'arg'. Deactivate tree branches; /// for any dataset observable that is either not used at all,; /// or is used exclusively by cached branch nodes.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:153,Performance,cache,cacheList,153,"////////////////////////////////////////////////////////////////////////////////; /// Prepare dataset for use with cached constant terms listed in; /// 'cacheList' of expression 'arg'. Deactivate tree branches; /// for any dataset observable that is either not used at all,; /// or is used exclusively by cached branch nodes.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:305,Performance,cache,cached,305,"////////////////////////////////////////////////////////////////////////////////; /// Prepare dataset for use with cached constant terms listed in; /// 'cacheList' of expression 'arg'. Deactivate tree branches; /// for any dataset observable that is either not used at all,; /// or is used exclusively by cached branch nodes.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:49,Performance,cache,cached,49,"// Add observables exclusively used to calculate cached observables to pruneSet",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:62,Modifiability,parameteriz,parameterized,62,"// Go over all used observables and check if any of them have parameterized; // ranges in terms of pruned observables. If so, remove those observable; // from the pruning list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:179,Performance,cache,cached,179,"////////////////////////////////////////////////////////////////////////////////; /// Utility function that determines if all clients of object 'var'; /// appear in given list of cached nodes.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:20,Performance,cache,cached,20,"// If client is not cached recurse",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:180,Modifiability,variab,variables,180,"////////////////////////////////////////////////////////////////////////////////; /// Write information to retrieve data columns into `evalData.spans`.; /// All spans belonging to variables of this dataset are overwritten. Spans to other; /// variables remain intact.; /// \param begin Index of first event that ends up in the batch.; /// \param len Number of events in each batch.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:243,Modifiability,variab,variables,243,"////////////////////////////////////////////////////////////////////////////////; /// Write information to retrieve data columns into `evalData.spans`.; /// All spans belonging to variables of this dataset are overwritten. Spans to other; /// variables remain intact.; /// \param begin Index of first event that ends up in the batch.; /// \param len Number of events in each batch.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:147,Modifiability,variab,variable,147,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:238,Modifiability,variab,variable,238,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:345,Modifiability,variab,variables,345,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:147,Modifiability,variab,variable,147,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:238,Modifiability,variab,variable,238,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:345,Modifiability,variab,variables,345,"////////////////////////////////////////////////////////////////////////////////; /// Create a TH2F histogram of the distribution of the specified variable; /// using this dataset. Apply any cuts to select which events are used.; /// The variable being plotted can either be contained directly in this; /// dataset, or else be a function of the variables in this dataset.; /// The histogram will be created using RooAbsReal::createHistogram() with; /// the name provided (with our dataset name prepended).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,Modifiability,variab,variable,11,"// Is this variable in our dataset?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,Modifiability,variab,variable,11,"// Is this variable a client of our dataset?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,variab,variable,17,"// Clone derived variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,Modifiability,variab,variable,11,"// Is this variable in our dataset?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:11,Modifiability,variab,variable,11,"// Is this variable a client of our dataset?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx:17,Modifiability,variab,variable,17,"// Clone derived variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsData.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsData.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:262,Modifiability,variab,variables,262,"/// Append all `events` to the internal RooDataSet or increment the bins of a RooDataHist at the given locations.; ///; /// \param events Events to fill into `data`. The layout is assumed to be `(x, y, z, ...) (x, y, z, ...), (...)`.; /// \note The order of the variables inside `events` must be consistent with the order given in the constructor.; /// No matching by name is performed.; /// \param eventSize Size of a single event.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:376,Performance,perform,performed,376,"/// Append all `events` to the internal RooDataSet or increment the bins of a RooDataHist at the given locations.; ///; /// \param events Events to fill into `data`. The layout is assumed to be `(x, y, z, ...) (x, y, z, ...), (...)`.; /// \note The order of the variables inside `events` must be consistent with the order given in the constructor.; /// No matching by name is performed.; /// \param eventSize Size of a single event.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:164,Modifiability,variab,variable,164,"// Creating a RooDataSet from an RDataFrame should be consistent with the; // creation from a TTree. The construction from a TTree discards entries; // outside the variable definition range, so we have to do that too (see; // also RooTreeDataStore::loadValues).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:249,Performance,load,loadValues,249,"// Creating a RooDataSet from an RDataFrame should be consistent with the; // creation from a TTree. The construction from a TTree discards entries; // outside the variable definition range, so we have to do that too (see; // also RooTreeDataStore::loadValues).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx:48,Testability,log,log,48,"// Unlike in the TreeVectorStore case, we don't log the event; // number here because we don't know it anyway, because of; // RDataFrame slots and multithreading.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataHelper.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataHelper.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataStore.cxx:104,Integrability,interface,interface,104,"////////////////////////////////////////////////////////////////////////////////; /// Detailed printing interface",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:771,Integrability,interface,interface,771,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:904,Integrability,interface,interface,904,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:1036,Integrability,interface,interface,1036,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:831,Modifiability,variab,variable,831,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:845,Performance,perform,performing,845,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx:1009,Usability,simpl,simple,1009,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsFunc.cxx; \class RooAbsFunc; \ingroup Roofitcore. Abstract interface for evaluating a real-valued function of one real variable; and performing numerical algorithms on it. The purpose of this interface is; to decouple RooAbsArg-specific implementations from numerical algorithms that; only need a simple function evaluation interface. The domain of the function; is assumed to be an n-dimensional box with edge coordinates specified by the; the getMinLimit() and getMaxLimit() methods.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsFunc.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsFunc.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:988,Integrability,interface,interface,988,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsGenContext.cxx; \class RooAbsGenContext; \ingroup Roofitcore. Abstract base class for generator contexts of; RooAbsPdf objects. A generator context is an object that controls; the generation of events from a given p.d.f in one or more sessions.; This class defines the common interface for all such contexts and organizes; storage of common components, such as the observables definition, the; prototype data etc..; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:13,Integrability,depend,dependents,13,"// Check PDF dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:36,Modifiability,variab,variables,36,"// Make a snapshot of the generated variables that we can overwrite.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:11,Modifiability,variab,variable,11,"// is this variable being generated or taken from the prototype?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to attach given parameters to object in this context",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:285,Availability,avail,available,285,"////////////////////////////////////////////////////////////////////////////////; /// Generate the specified number of events with nEvents>0 and; /// and return a dataset containing the generated events. With nEvents<=0,; /// generate the number of events in the prototype dataset, if available,; /// or else the expected number of events, if non-zero.; /// If extendedMode = true generate according to a Poisson(nEvents); /// The returned dataset belongs to the caller. Return zero in case of an error.; /// Generation of individual events is delegated to a virtual generateEvent(); /// method. A virtual initGenerator() method is also called just before the; /// first call to generateEvent().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:497,Availability,error,error,497,"////////////////////////////////////////////////////////////////////////////////; /// Generate the specified number of events with nEvents>0 and; /// and return a dataset containing the generated events. With nEvents<=0,; /// generate the number of events in the prototype dataset, if available,; /// or else the expected number of events, if non-zero.; /// If extendedMode = true generate according to a Poisson(nEvents); /// The returned dataset belongs to the caller. Return zero in case of an error.; /// Generation of individual events is delegated to a virtual generateEvent(); /// method. A virtual initGenerator() method is also called just before the; /// first call to generateEvent().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:361,Modifiability,extend,extendedMode,361,"////////////////////////////////////////////////////////////////////////////////; /// Generate the specified number of events with nEvents>0 and; /// and return a dataset containing the generated events. With nEvents<=0,; /// generate the number of events in the prototype dataset, if available,; /// or else the expected number of events, if non-zero.; /// If extendedMode = true generate according to a Poisson(nEvents); /// The returned dataset belongs to the caller. Return zero in case of an error.; /// Generation of individual events is delegated to a virtual generateEvent(); /// method. A virtual initGenerator() method is also called just before the; /// first call to generateEvent().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:54,Modifiability,variab,variables,54,"// check that any prototype dataset still defines the variables we need; // (this is necessary since we never make a private clone, for efficiency)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:119,Deployability,configurat,configuration,119,"// Perform any subclass implementation-specific initialization; // Can be skipped if this is a rerun with an identical configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:119,Modifiability,config,configuration,119,"// Perform any subclass implementation-specific initialization; // Can be skipped if this is a rerun with an identical configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:3,Performance,Perform,Perform,3,"// Perform any subclass implementation-specific initialization; // Can be skipped if this is a rerun with an identical configuration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:10,Performance,load,load,10,"// first, load values from the prototype dataset, if one was provided",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to initialize context for generation for given; /// set of observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for multi-line printing",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:797,Deployability,integrat,integrators,797,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsIntegrator.cxx; \class RooAbsIntegrator; \ingroup Roofitcore. Abstract interface for integrators of real-valued; functions that implement the RooAbsFunc interface.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:783,Integrability,interface,interface,783,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsIntegrator.cxx; \class RooAbsIntegrator; \ingroup Roofitcore. Abstract interface for integrators of real-valued; functions that implement the RooAbsFunc interface.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:797,Integrability,integrat,integrators,797,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsIntegrator.cxx; \class RooAbsIntegrator; \ingroup Roofitcore. Abstract interface for integrators of real-valued; functions that implement the RooAbsFunc interface.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:865,Integrability,interface,interface,865,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsIntegrator.cxx; \class RooAbsIntegrator; \ingroup Roofitcore. Abstract interface for integrators of real-valued; functions that implement the RooAbsFunc interface.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:113,Deployability,integrat,integration,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface to set limits on integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to set limits on integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:113,Integrability,integrat,integration,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface to set limits on integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function that allows to defer limit definition to integrand definition",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMCStudyModule.cxx:1077,Modifiability,variab,variables,1077,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsMCStudyModule.cxx; \class RooAbsMCStudyModule; \ingroup Roofitcore. Base class for add-on modules to RooMCStudy that; can perform additional calculations on each generate+fit cycle managed; by RooMCStudy. This class can insert code to be executed before each generation step,; between the generation and fitting step and after the fitting step.; Any summary output variables declared in the RooDataSet exported through; summaryData() is merged with the 'master' summary dataset in RooMCStudy. Look at RooDLLSignificanceMCSModule for an example of an implementation.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMCStudyModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMCStudyModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMCStudyModule.cxx:834,Performance,perform,perform,834,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsMCStudyModule.cxx; \class RooAbsMCStudyModule; \ingroup Roofitcore. Base class for add-on modules to RooMCStudy that; can perform additional calculations on each generate+fit cycle managed; by RooMCStudy. This class can insert code to be executed before each generation step,; between the generation and fitting step and after the fitting step.; Any summary output variables declared in the RooDataSet exported through; summaryData() is merged with the 'master' summary dataset in RooMCStudy. Look at RooDLLSignificanceMCSModule for an example of an implementation.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMCStudyModule.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMCStudyModule.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:701,Integrability,interface,interface,701,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * AL, Alfio Lazzaro, INFN Milan, alfio.lazzaro@mi.infn.it *; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl *; * *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; //; // RooAbsMinimizerFcn is an interface class to the ROOT::Math function; // for minimization. It contains only the ""logistics"" of synchronizing; // between Minuit and RooFit. Its subclasses implement actual interfacing; // to Minuit by subclassing IMultiGenFunction or IMultiGradFunction.; //",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:802,Integrability,synchroniz,synchronizing,802,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * AL, Alfio Lazzaro, INFN Milan, alfio.lazzaro@mi.infn.it *; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl *; * *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; //; // RooAbsMinimizerFcn is an interface class to the ROOT::Math function; // for minimization. It contains only the ""logistics"" of synchronizing; // between Minuit and RooFit. Its subclasses implement actual interfacing; // to Minuit by subclassing IMultiGenFunction or IMultiGradFunction.; //",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:788,Testability,log,logistics,788,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * AL, Alfio Lazzaro, INFN Milan, alfio.lazzaro@mi.infn.it *; * PB, Patrick Bos, Netherlands eScience Center, p.bos@esciencecenter.nl *; * *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; //; // RooAbsMinimizerFcn is an interface class to the ROOT::Math function; // for minimization. It contains only the ""logistics"" of synchronizing; // between Minuit and RooFit. Its subclasses implement actual interfacing; // to Minuit by subclassing IMultiGenFunction or IMultiGradFunction.; //",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:25,Integrability,synchroniz,synchronize,25,"/// Internal function to synchronize TMinimizer with current; /// information in RooAbsReal function parameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:3,Integrability,Synchroniz,Synchronize,3,"// Synchronize MINUIT with function state",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:30,Availability,error,error,30,"// Floating parameter without error estimate",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:26,Availability,error,error,26,"// Trim default choice of error if within 2 sigma of limit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:31,Availability,error,error,31,"// If trimming results in zero error, restore default",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:21,Availability,error,error,21,"// Set the parabolic error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:24,Availability,error,error,24,"// Store the asymmetric error, if it is available",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:40,Availability,avail,available,40,"// Store the asymmetric error, if it is available",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:24,Availability,error,error,24,"// Clear the asymmetric error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:3,Usability,Clear,Clear,3,"// Clear the asymmetric error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:29,Testability,log,logging,29,"/// Change the file name for logging of a RooMinimizer of all MINUIT steppings; /// through the parameter space. If inLogfile is null, the current log file; /// is closed and logging is stopped.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:147,Testability,log,log,147,"/// Change the file name for logging of a RooMinimizer of all MINUIT steppings; /// through the parameter space. If inLogfile is null, the current log file; /// is closed and logging is stopped.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:175,Testability,log,logging,175,"/// Change the file name for logging of a RooMinimizer of all MINUIT steppings; /// through the parameter space. If inLogfile is null, the current log file; /// is closed and logging is stopped.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:74,Availability,error,errors,74,"/// Apply results of given external covariance matrix. i.e. propagate its errors; /// to all RRV parameter representations and give this matrix instead of the; /// HESSE matrix at the next save() call",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:94,Availability,error,errors,94,"/// Print information about why evaluation failed.; /// Using _printEvalErrors, the number of errors printed can be steered.; /// Negative values disable printing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:39,Availability,error,errors,39,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:84,Availability,error,errors,84,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:216,Availability,error,errors,216,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:264,Deployability,update,updated,264,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx:198,Testability,log,logEvalError-type,198,"/// Apply corrections on the fvalue if errors were signaled.; ///; /// Two kinds of errors are possible: 1. infinite or nan values (the latter; /// can be a signaling nan, using RooNaNPacker) or 2. logEvalError-type errors.; /// Both are caught here and fvalue is updated so that Minuit in turn is nudged; /// to move the search outside of the problematic parameter space area.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:9,Integrability,synchroniz,synchronizeParameterSettings,9,"/// Like synchronizeParameterSettings, Synchronize informs Minuit through; /// its parameter_settings vector of RooFit parameter properties, but; /// Synchronize can be overridden to e.g. also include gradient strategy; /// synchronization in subclasses.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:39,Integrability,Synchroniz,Synchronize,39,"/// Like synchronizeParameterSettings, Synchronize informs Minuit through; /// its parameter_settings vector of RooFit parameter properties, but; /// Synchronize can be overridden to e.g. also include gradient strategy; /// synchronization in subclasses.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:150,Integrability,Synchroniz,Synchronize,150,"/// Like synchronizeParameterSettings, Synchronize informs Minuit through; /// its parameter_settings vector of RooFit parameter properties, but; /// Synchronize can be overridden to e.g. also include gradient strategy; /// synchronization in subclasses.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:224,Integrability,synchroniz,synchronization,224,"/// Like synchronizeParameterSettings, Synchronize informs Minuit through; /// its parameter_settings vector of RooFit parameter properties, but; /// Synchronize can be overridden to e.g. also include gradient strategy; /// synchronization in subclasses.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:72,Modifiability,enhance,enhances,72,"/// Enable or disable offsetting on the function to be minimized, which enhances numerical precision.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:96,Deployability,configurat,configuration,96,"/// This function must be overridden in the derived class to pass on constant term optimization configuration; /// to the function to be minimized. For a RooAbsArg, this would be RooAbsArg::constOptimizeTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:96,Modifiability,config,configuration,96,"/// This function must be overridden in the derived class to pass on constant term optimization configuration; /// to the function to be minimized. For a RooAbsArg, this would be RooAbsArg::constOptimizeTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:83,Performance,optimiz,optimization,83,"/// This function must be overridden in the derived class to pass on constant term optimization configuration; /// to the function to be minimized. For a RooAbsArg, this would be RooAbsArg::constOptimizeTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:110,Testability,log,log-likelihood,110,"// the following four are mutable because DoEval is const (in child classes); // Reset the *largest* negative log-likelihood value we have seen so far:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:61,Availability,error,error,61,"// PB: these mutables signal a suboptimal design. A separate error handling; // object containing all this would clean up this class. It would allow const; // functions to be actually const (even though state still changes in the; // error handling object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h:234,Availability,error,error,234,"// PB: these mutables signal a suboptimal design. A separate error handling; // object containing all this would clean up this class. It would allow const; // functions to be actually const (even though state still changes in the; // error handling object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsMinimizerFcn.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsMinimizerFcn.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:303,Integrability,depend,dependents,303,"////////////////////////////////////////////////////////////////////////////////; /// Initialize an accept-reject generator for the specified distribution function,; /// which must be non-negative but does not need to be normalized over the; /// variables to be generated, genVars. The function and its dependents are; /// cloned and so will not be disturbed during the generation process.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:246,Modifiability,variab,variables,246,"////////////////////////////////////////////////////////////////////////////////; /// Initialize an accept-reject generator for the specified distribution function,; /// which must be non-negative but does not need to be normalized over the; /// variables to be generated, genVars. The function and its dependents are; /// cloned and so will not be disturbed during the generation process.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:44,Integrability,depend,depends,44,"// Clone the function and all nodes that it depends on so that this generator; // is independent of any existing objects.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:55,Integrability,depend,dependents,55,"// look for this argument in the generating function's dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:13,Modifiability,variab,variables,13,"// clone any variables we generate that we haven't cloned already",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:27,Performance,cache,cache,27,"// create a new dataset to cache trial events and function values",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:36,Performance,cache,cache,36,"// attach our function clone to the cache dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:3,Deployability,update,update,3,"// update ours sets of category and real args to refer to the cache dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx:62,Performance,cache,cache,62,"// update ours sets of category and real args to refer to the cache dataset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsNumGenerator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsNumGenerator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:930,Performance,optimiz,optimizations,930,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsOptTestStatistic.cxx; \class RooAbsOptTestStatistic; \ingroup Roofitcore. Abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities. Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result. Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:810,Testability,test,test,810,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsOptTestStatistic.cxx; \class RooAbsOptTestStatistic; \ingroup Roofitcore. Abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities. Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result. Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1468,Testability,test,test,1468,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsOptTestStatistic.cxx; \class RooAbsOptTestStatistic; \ingroup Roofitcore. Abstract base class for test; statistics objects that evaluate a function or PDF at each point of a given; dataset. This class provides generic optimizations, such as; caching and precalculation of constant terms that can be made for; all such quantities. Implementations should define evaluatePartition(), which calculates the; value of a (sub)range of the dataset and optionally combinedValue(),; which combines the values calculated for each partition. If combinedValue(); is not overloaded, the default implementation will add the partition results; to obtain the combined result. Support for calculation in partitions is needed to allow multi-core; parallelized calculation of test statistics.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:435,Deployability,configurat,configuration,435,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1645,Deployability,integrat,integrateOverBinsPrecision,1645,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1703,Deployability,integrat,integrated,1703,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1809,Deployability,integrat,integrated,1809,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1844,Deployability,integrat,integrated,1844,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1645,Integrability,integrat,integrateOverBinsPrecision,1645,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1703,Integrability,integrat,integrated,1703,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1809,Integrability,integrat,integrated,1809,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:1844,Integrability,integrat,integrated,1844,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:435,Modifiability,config,configuration,435,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:95,Testability,test,test,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:328,Testability,test,test,328,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:567,Testability,test,test,567,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:780,Testability,test,test,780,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic, and optimise its calculation.; /// \param[in] name Name of the instance.; /// \param[in] title Title (for e.g. plotting).; /// \param[in] real Function to evaluate.; /// \param[in] indata Dataset for which to compute test statistic.; /// \param[in] projDeps A set of projected observables.; /// \param[in] cfg the statistic configuration; ///; /// cfg contains:; /// - rangeName If not null, only events in the dataset inside the range will be used in the test; /// statistic calculation.; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be; /// instructed to fix their fraction definitions to the given named range.; /// - nCPU If > 1, the test statistic calculation will be parallelised over multiple processes. By default, the data; /// is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data, this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block may vary greatly; thereby distributing the workload rather unevenly.; /// - interleave Strategy how to distribute events among workers. If an interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i), an even distribution of work is more likely.; /// - splitCutRange If true, a different rangeName constructed as `rangeName_{catName}` will be used; /// as range definition for each index state of a RooSimultaneous.; /// - cloneInputData Not used. Data is always cloned.; /// - integrateOverBinsPrecision If > 0, PDF in binned fits are integrated over the bins. This sets the precision. If = 0,; /// only unbinned PDFs fit to RooDataHist are integrated. If < 0, PDFs are never integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:22,Integrability,depend,dependents,22,"// Mark all projected dependents as such",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:182,Testability,test,test,182,"// If PDF is a RooProdPdf (with possible constraint terms); // analyze pdf for actual parameters (i.e those in unconnected constraint terms should be; // ignored as here so that the test statistic will not be recalculated if those; // are changed",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:59,Modifiability,parameteriz,parameterized,59,"// Expand list of observables with any observables used in parameterized ranges.; // This NEEDS to be a counting loop since we are inserting during the loop.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:243,Integrability,depend,dependents,243,"// ******************************************************************; // *** PART 2 *** Clone and adjust incoming data, attach to PDF *; // ******************************************************************; // Check if the fit ranges of the dependents in the data and in the FUNC are consistent",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:50,Availability,avail,available,50,"// Print warnings if the requested ranges are not available for the observable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:24,Integrability,depend,dependents,24,"// WVE Remove projected dependents from normalization",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:117,Performance,cache,cacheValidEntries,117,"// This is deferred from part 2 - but must happen after part 3 - otherwise invalid bins cannot be properly marked in cacheValidEntries",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:242,Integrability,depend,dependents,242,"// *********************************************************************; // *** PART 4 *** Adjust normalization range for projected observables *; // *********************************************************************; // Remove projected dependents from normalization set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:22,Integrability,depend,dependents,22,"// Mark all projected dependents as such",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:123,Performance,optimiz,optimization,123,"// *********************************************************************; // *** PART 4 *** Finalization and activation of optimization *; // *********************************************************************; // Redirect pointers of base class to clone",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:105,Testability,test,test,105,"////////////////////////////////////////////////////////////////////////////////; /// Method to combined test statistic results calculated into partitions into; /// the global result. This default implementation adds the partition return; /// values",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:345,Modifiability,Config,ConfigChange,345,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:129,Performance,optimiz,optimizations,129,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:207,Performance,optimiz,optimization,207,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:298,Performance,optimiz,optimizations,298,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:415,Performance,optimiz,optimizations,415,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:146,Testability,test,test,146,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to propagate constant term optimizations in test statistic.; /// If code Activate is sent, constant term optimization will be executed.; /// If code Deactivate is sent, any existing constant term optimizations will; /// be abandoned. If codes ConfigChange or ValueChange are sent, any existing; /// constant term optimizations will be redone.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:28,Deployability,update,update,28,"// Request a forcible cache update of all cached nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:22,Performance,cache,cache,22,"// Request a forcible cache update of all cached nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:42,Performance,cache,cached,42,"// Request a forcible cache update of all cached nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:149,Integrability,depend,depends,149,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:470,Integrability,depend,dependent,470,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:539,Integrability,depend,dependent,539,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:690,Integrability,message,messages,690,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:124,Testability,log,logic,124,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:239,Testability,test,test,239,"////////////////////////////////////////////////////////////////////////////////; /// This method changes the value caching logic for all nodes that depends on any of the observables; /// as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; /// with a dataset the observables are guaranteed to change with every call, thus there is no point; /// in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; /// the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; /// On the dataset side, the observables objects are modified to no longer send valueDirty messages; /// to their client",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:36,Performance,optimiz,optimizeCaching,36,"// cout << ""RooAbsOptTestStatistic::optimizeCaching("" << GetName() << "","" << this << "")"" << endl ;; // Trigger create of all object caches now in nodes that have deferred object creation; // so that cache contents can be processed immediately",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:132,Performance,cache,caches,132,"// cout << ""RooAbsOptTestStatistic::optimizeCaching("" << GetName() << "","" << this << "")"" << endl ;; // Trigger create of all object caches now in nodes that have deferred object creation; // so that cache contents can be processed immediately",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:199,Performance,cache,cache,199,"// cout << ""RooAbsOptTestStatistic::optimizeCaching("" << GetName() << "","" << this << "")"" << endl ;; // Trigger create of all object caches now in nodes that have deferred object creation; // so that cache contents can be processed immediately",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:45,Integrability,depend,depend,45,"// Set value caching mode for all nodes that depend on any of the observables to ADirty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:135,Performance,optimiz,optimization,135,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to activate global constant term optimization.; /// If activated, constant terms are found and cached with the dataset.; /// The operation mode of cached nodes is set to AClean meaning that; /// their getVal() call will never result in an evaluate call.; /// Finally the branches in the dataset that correspond to observables; /// that are exclusively used in constant terms are disabled as; /// they serve no more purpose",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:197,Performance,cache,cached,197,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to activate global constant term optimization.; /// If activated, constant terms are found and cached with the dataset.; /// The operation mode of cached nodes is set to AClean meaning that; /// their getVal() call will never result in an evaluate call.; /// Finally the branches in the dataset that correspond to observables; /// that are exclusively used in constant terms are disabled as; /// they serve no more purpose",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:249,Performance,cache,cached,249,"////////////////////////////////////////////////////////////////////////////////; /// Driver function to activate global constant term optimization.; /// If activated, constant terms are found and cached with the dataset.; /// The operation mode of cached nodes is set to AClean meaning that; /// their getVal() call will never result in an evaluate call.; /// Finally the branches in the dataset that correspond to observables; /// that are exclusively used in constant terms are disabled as; /// they serve no more purpose",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:32,Performance,cache,caches,32,"// Trigger create of all object caches now in nodes that have deferred object creation; // so that cache contents can be processed immediately",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:99,Performance,cache,cache,99,"// Trigger create of all object caches now in nodes that have deferred object creation; // so that cache contents can be processed immediately",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:9,Deployability,Patch,Patch,9,"// WVE - Patch to allow customization of optimization level per component pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:41,Performance,optimiz,optimization,41,"// WVE - Patch to allow customization of optimization level per component pdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:18,Performance,optimiz,optimization,18,"// Apply tracking optimization here. Default strategy is to track components; // of RooAddPdfs and RooRealSumPdfs. If these components are a RooProdPdf; // or a RooProduct respectively, track the components of these products instead; // of the product term",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:7,Safety,safe,safety,7,"// Add safety check here - applyTrackingOpt will only be applied if present; // dataset is constructed in terms of a RooVectorDataStore",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:14,Performance,Cache,CacheAndTrack,14,"// Do not set CacheAndTrack on constant expressions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:7,Performance,Cache,CacheAndTrack,7,"// Set CacheAndTrack flag on all remaining nodes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:23,Integrability,depend,depend,23,"// Find all nodes that depend exclusively on constant parameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:3,Performance,Cache,Cache,3,"// Cache constant nodes with dataset - also cache entries corresponding to zero-weights in data when using BinnedLikelihood",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:44,Performance,cache,cache,44,"// Cache constant nodes with dataset - also cache entries corresponding to zero-weights in data when using BinnedLikelihood",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:11,Performance,cache,cached,11,"// Put all cached nodes in AClean value caching mode so that their evaluate() is never called",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:14,Performance,cache,cache,14,"// Delete the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:203,Testability,test,test,203,"////////////////////////////////////////////////////////////////////////////////; /// Change dataset that is used to given one. If cloneData is true, a clone of; /// in the input dataset is made. If the test statistic was constructed with; /// a range specification on the data, the cloneData argument is ignored and; /// the data is always cloned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:33,Availability,ERROR,ERROR,33,"//cout << ""ROATS::setDataSlave() ERROR this is SimMaster _funcClone = "" << _funcClone << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx:231,Integrability,wrap,wrapping,231,"////////////////////////////////////////////////////////////////////////////////; /// Inspect PDF to find out if we are doing a binned fit to a 1-dimensional unbinned PDF.; /// If this is the case, enable finer sampling of bins by wrapping PDF into a RooBinSamplingPdf.; /// The member _integrateBinsPrecision decides how we act:; /// - < 0: Don't do anything.; /// - = 0: Only enable feature if fitting unbinned PDF to RooDataHist.; /// - > 0: Enable as requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h:41,Security,access,access,41,"///< Is test statistic sealed -- i.e. no access to data",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h:8,Testability,test,test,8,"///< Is test statistic sealed -- i.e. no access to data",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h:29,Performance,cache,cached,29,"///<! List of nodes that are cached as constant expressions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsOptTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsOptTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1087,Availability,error,error,1087,"********; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1387,Deployability,Integrat,Integration,1387,"ersity. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (wh",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2147,Deployability,integrat,integration,2147,"ce. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common,",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2399,Deployability,integrat,integrated,2399,"to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2716,Deployability,integrat,integration,2716," variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2827,Deployability,integrat,integration,2827," the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3457,Deployability,integrat,integration,3457,"n).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3555,Deployability,integrat,integrate,3555,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3631,Deployability,integrat,integration,3631,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3643,Deployability,configurat,configuration,3643,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3664,Deployability,integrat,integration,3664,"ject, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for ana",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3972,Deployability,integrat,integration,3972,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4015,Deployability,integrat,integrated,4015,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4186,Deployability,integrat,integration,4186,"plementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4305,Deployability,Integrat,Integrated,4305," ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the prox",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4527,Energy Efficiency,efficient,efficient,4527,"on should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. ### Batched function evaluations (Advanced usage). To speed up computations with large numbers of dat",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:834,Integrability,interface,interface,834,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; funct",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1131,Integrability,interface,interface,1131,"********; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1387,Integrability,Integrat,Integration,1387,"ersity. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (wh",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1815,Integrability,depend,dependents,1815,"f Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely nume",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2147,Integrability,integrat,integration,2147,"ce. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common,",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2369,Integrability,depend,dependents,2369,"to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2399,Integrability,integrat,integrated,2399,"to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2716,Integrability,integrat,integration,2716," variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2827,Integrability,integrat,integration,2827," the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2846,Integrability,depend,dependents,2846," the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3116,Integrability,depend,dependents,3116,"d up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` a",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3436,Integrability,depend,dependents,3436,"n).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3457,Integrability,integrat,integration,3457,"n).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3523,Integrability,depend,dependents,3523,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3555,Integrability,integrat,integrate,3555,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3631,Integrability,integrat,integration,3631,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3664,Integrability,integrat,integration,3664,"ject, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for ana",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3972,Integrability,integrat,integration,3972,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3999,Integrability,depend,dependent,3999,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4015,Integrability,integrat,integrated,4015,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4052,Integrability,depend,dependent,4052,", no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4168,Integrability,depend,dependent,4168,"plementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4186,Integrability,integrat,integration,4186,"plementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4305,Integrability,Integrat,Integrated,4305," ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the prox",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4325,Integrability,depend,dependents,4325," ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the prox",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5081,Integrability,depend,dependent,5081,"AnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. ### Batched function evaluations (Advanced usage). To speed up computations with large numbers of data events in unbinned fits,; it is beneficial to override `doEval()`. Like this, large spans of; computations can be done, without having to call `evaluate()` for each single data event.; `doEval()` should execute the same computation as `evaluate()`, but it; may choose an implementation that is capable of SIMD computations.; If doEval is not implemented, the classic and slower `evaluate()` will be; called for each data event.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5258,Integrability,depend,dependent,5258,"AnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. ### Batched function evaluations (Advanced usage). To speed up computations with large numbers of data events in unbinned fits,; it is beneficial to override `doEval()`. Like this, large spans of; computations can be done, without having to call `evaluate()` for each single data event.; `doEval()` should execute the same computation as `evaluate()`, but it; may choose an implementation that is capable of SIMD computations.; If doEval is not implemented, the classic and slower `evaluate()` will be; called for each data event.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1677,Modifiability,variab,variables,1677,"************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1712,Modifiability,variab,variables,1712,"************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsPdf; \ingroup Roofitcore; \brief Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2320,Modifiability,variab,variables,2320,"to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2355,Modifiability,variab,variables,2355,"to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3643,Modifiability,config,configuration,3643,"e getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; i",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2799,Performance,perform,perform,2799," the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3684,Performance,perform,performed,3684,"ject, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for ana",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3024,Safety,safe,safe,3024,"o explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2632,Testability,log,logic,2632," variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e., no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; common, etc). #### Implementing analytical integrals; To implement analytical integrals, two functions must be implemented. First,. ```; Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4297,Testability,assert,assert,4297,"_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet); ```; should return the analytical integrals that are supported. `integSet`; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to `anaIntSet`, and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. ```; double analyticalIntegral(Int_t code); ```. implements the actual analytical integral(s) advertised by; `getAnalyticalIntegral()`. This function will only be called with; codes returned by `getAnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; vi",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5385,Testability,assert,assert,5385,"AnalyticalIntegral()`, except code zero. The integration range for each dependent to be integrated can; be obtained from the dependent's proxy functions `min()` and; `max()`. Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g., in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. ### Direct generation of observables. Distributions for any PDF can be generated with the accept/reject method,; but for certain PDFs, more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. ```; Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars); ```; and; ```; void generateEvent(Int_t code); ```. The first function advertises observables, for which distributions can be generated,; similar to the way analytical integrals are advertised. The second; function implements the actual generator for the advertised observables. The generated dependent values should be stored in the proxy; objects. For this, the assignment operator can be used (i.e. `xProxy; = 3.0` ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. ### Batched function evaluations (Advanced usage). To speed up computations with large numbers of data events in unbinned fits,; it is beneficial to override `doEval()`. Like this, large spans of; computations can be done, without having to call `evaluate()` for each single data event.; `doEval()` should execute the same computation as `evaluate()`, but it; may choose an implementation that is capable of SIMD computations.; If doEval is not implemented, the classic and slower `evaluate()` will be; called for each data event.; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1786,Usability,simpl,simply,1786,"f Abstract interface for all probability density functions. ## RooAbsPdf, the base class of all PDFs. RooAbsPdf is the base class for all probability density; functions (PDFs). The class provides hybrid analytical/numerical; normalization for its implementations, error tracing, and a Monte Carlo; generator interface. ### A Minimal PDF Implementation. A minimal implementation of a PDF class derived from RooAbsPdf; should override the `evaluate()` function. This function should; return the PDF's value (which does not need to be normalised). #### Normalization/Integration. Although the normalization of a PDF is an integral part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex composite PDF; if any of its variables are functions instead of variables. In; such cases, the normalization of the composite PDF may not simply be; integral over the dependents of the top-level PDF: these are; functions with potentially non-trivial Jacobian terms themselves.; \note Therefore, no explicit attempt should be made to normalize the; function output in evaluate(). In particular, normalisation constants; can be omitted to speed up the function evaluations, and included later; in the integration of the PDF (see below), which is rarely called in; comparison to the `evaluate()` function. In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters, and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead, the choice of normalization is always specified each time a; normalized value is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; the help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform an entirely nume",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:54,Availability,toler,tolerated,54,"//Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:122,Deployability,integrat,integrating,122,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:508,Deployability,integrat,integration,508,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:122,Integrability,integrat,integrating,122,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:508,Integrability,integrat,integration,508,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:306,Performance,cache,cached,306,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:391,Performance,cache,cache,391,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:430,Performance,cache,cached,430,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:539,Performance,perform,performance,539,"////////////////////////////////////////////////////////////////////////////////; /// Return current value, normalized by integrating over; /// the observables in `nset`. If `nset` is 0, the unnormalized value; /// is returned. All elements of `nset` must be lvalues.; ///; /// Unnormalized values are not cached.; /// Doing so would be complicated as `_norm->getVal()` could; /// spoil the cache and interfere with returning the cached; /// return value. Since unnormalized calls are typically; /// done in integration calls, there is no performance hit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:71,Deployability,integrat,integration,71,"// Special handling of case without normalization set (used in numeric integration of pdfs)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:71,Integrability,integrat,integration,71,"// Special handling of case without normalization set (used in numeric integration of pdfs)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:58,Performance,cache,cached,58,"// Return value of object. Calculated if dirty, otherwise cached value is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// Check that passed value is positive and not 'not-a-number'. If; /// not, print an error, until the error counter reaches its set; /// maximum.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:185,Availability,error,error,185,"////////////////////////////////////////////////////////////////////////////////; /// Check that passed value is positive and not 'not-a-number'. If; /// not, print an error, until the error counter reaches its set; /// maximum.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:20,Availability,error,error,20,"// check for a math error or negative value",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:71,Availability,error,error,71,"// do nothing if we are no longer tracing evaluations and there was no error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:306,Modifiability,variab,variables,306,"////////////////////////////////////////////////////////////////////////////////; /// Get normalisation term needed to normalise the raw values returned by; /// getVal(). Note that `getVal(normalisationVariables)` will automatically; /// apply the normalisation term returned here.; /// \param nset Set of variables to normalise over.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:19,Performance,cache,cache,19,"// Store it in the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:125,Performance,cache,cached,125,"////////////////////////////////////////////////////////////////////////////////; /// Verify that the normalization integral cached with this PDF; /// is valid for given set of normalization observables.; ///; /// If not, the cached normalization integral (if any) is deleted; /// and a new integral is constructed for use with 'nset'.; /// Elements in 'nset' can be discrete and real, but must be lvalues.; ///; /// For functions that declare to be self-normalized by overloading the; /// selfNormalized() function, a unit normalization is always constructed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:226,Performance,cache,cached,226,"////////////////////////////////////////////////////////////////////////////////; /// Verify that the normalization integral cached with this PDF; /// is valid for given set of normalization observables.; ///; /// If not, the cached normalization integral (if any) is deleted; /// and a new integral is constructed for use with 'nset'.; /// Elements in 'nset' can be discrete and real, but must be lvalues.; ///; /// For functions that declare to be self-normalized by overloading the; /// selfNormalized() function, a unit normalization is always constructed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:90,Performance,cache,cache,90,"// In the past, this condition read `if (nintChanged && adjustProxies)`.; // However, the cache checks if the nset was already cached **by content**,; // and not by RooArgSet instance! So it can happen that the normalization; // set object is different, but the integral object is the same, in which; // case it would be wrong to not adjust the proxies. They always have to be; // adjusted when the nset changed, which is always the case when; // `syncNormalization()` is called.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:127,Performance,cache,cached,127,"// In the past, this condition read `if (nintChanged && adjustProxies)`.; // However, the cache checks if the nset was already cached **by content**,; // and not by RooArgSet instance! So it can happen that the normalization; // set object is different, but the integral object is the same, in which; // case it would be wrong to not adjust the proxies. They always have to be; // adjusted when the nset changed, which is always the case when; // `syncNormalization()` is called.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Deployability,Update,Update,3,"// Update dataset pointers of proxies",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Deployability,Update,Update,3,"// Update dataset pointers of proxies",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:92,Availability,error,error,92,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:157,Availability,error,error,157,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:163,Integrability,message,messages,163,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:163,Integrability,message,messages,163,"////////////////////////////////////////////////////////////////////////////////; /// Reset trace counter to given value, limiting the; /// number of future trace messages for this pdf to 'value'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:155,Availability,error,error,155,"////////////////////////////////////////////////////////////////////////////////; /// Return the log of the current value with given normalization; /// An error message is printed if the argument of the log is negative.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:161,Integrability,message,message,161,"////////////////////////////////////////////////////////////////////////////////; /// Return the log of the current value with given normalization; /// An error message is printed if the argument of the log is negative.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:97,Testability,log,log,97,"////////////////////////////////////////////////////////////////////////////////; /// Return the log of the current value with given normalization; /// An error message is printed if the argument of the log is negative.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:203,Testability,log,log,203,"////////////////////////////////////////////////////////////////////////////////; /// Return the log of the current value with given normalization; /// An error message is printed if the argument of the log is negative.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:20,Availability,error,error,20,"// check for a math error or negative value",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:311,Availability,error,error,311,"////////////////////////////////////////////////////////////////////////////////; /// Scan through outputs and fix+log all nans and negative values.; /// \param[in,out] outputs Array to be scanned & fixed.; /// \param[in] begin Begin of event range. Only needed to print the correct event number; /// where the error occurred.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:115,Testability,log,log,115,"////////////////////////////////////////////////////////////////////////////////; /// Scan through outputs and fix+log all nans and negative values.; /// \param[in,out] outputs Array to be scanned & fixed.; /// \param[in] begin Begin of event range. Only needed to print the correct event number; /// where the error occurred.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:750,Availability,error,error,750,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1270,Availability,error,error,1270," `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cd",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:97,Modifiability,extend,extended,97,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:348,Modifiability,extend,extendable,348,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:790,Modifiability,extend,extended,790,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:841,Modifiability,extend,extended,841,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2278,Modifiability,extend,extended,2278,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2936,Modifiability,extend,extendedTerm,2936,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1129,Safety,avoid,avoid,1129,"\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected ent",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:174,Testability,log,log,174,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] sumEntries The number of observed events.; /// \param[in] nset The normalization set when asking the pdf for the expected; /// number of events.; /// \param[in] observedSumW2 The number of observed events when weighting with; /// squared weights. If non-zero, the weight-squared error; /// correction is applied to the extended term.; /// \param[in] doOffset Offset the extended term by a counterterm where the; /// expected number of events equals the observed number of events.; /// This constant shift results in a term closer to zero that is; /// approximately chi-square distributed. It is useful to do this; /// also when summing multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2506,Testability,log,log,2506,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2736,Testability,log,log,2736,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2838,Testability,log,log,2838,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2879,Testability,log,log,2879,"g multiple NLL terms to avoid numeric precision; /// loss that happens if you sum multiple terms of different orders; /// of magnitude.; ///; /// The weight-squared error correction works as follows:; /// adjust poisson such that; /// estimate of \f$N_\mathrm{expect}\f$ stays at the same value, but has a different variance, rescale; /// both the observed and expected count of the Poisson with a factor \f$ \sum w_{i} / \sum w_{i}^2 \f$; /// (the effective weight of the Poisson term),; /// i.e., change \f$\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\f$; /// to \f$ \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \f$,; /// weighted by the effective weight \f$ \sum w_{i}^2 / \sum w_{i} \f$ in the likelihood.; /// Since here we compute the likelihood with the weight square, we need to multiply by the; /// square of the effective weight:; /// - \f$ W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective expected entries; /// - \f$ W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \f$ : effective observed entries; ///; /// The extended term for the likelihood weighted by the square of the weight will be then:; ///; /// \f$ \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \f$; ///; /// aund this is using the previous expressions for \f$ W_\mathrm{expect} \f$ and \f$ W_\mathrm{observed} \f$:; ///; /// \f$ \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \f$; ///; /// Since the weights are constants in the likelihood we can use \f$\log{N_\mathrm{expect}}\f$ instead of \f$\log{W_\mathrm{expect}}\f$.; ///; /// See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset),; /// which takes a dataset to extract \f$N_\mathrm{observed}\f$ and the; /// normalization set.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:30,Modifiability,extend,extended,30,"// check if this PDF supports extended maximum likelihood fits",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:13,Availability,error,errors,13,"// Check for errors in Nexpected",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:288,Integrability,wrap,wrapper,288,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:97,Modifiability,extend,extended,97,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:319,Modifiability,extend,extendedTerm,319,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:611,Modifiability,extend,extendable,611,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:877,Modifiability,extend,extended,877,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1279,Modifiability,extend,extendedTerm,1279,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:174,Testability,log,log,174,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1167,Usability,learn,learn,1167,"////////////////////////////////////////////////////////////////////////////////; /// Return the extended likelihood term (\f$ N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \f$); /// of this PDF for the given number of observed events.; ///; /// This function is a wrapper around; /// RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const,; /// where the number of observed events and observables to be used as the; /// normalization set for the pdf is extracted from a RooAbsData.; ///; /// For successful operation, the PDF implementation must indicate that; /// it is extendable by overloading `canBeExtended()`, and must; /// implement the `expectedEvents()` function.; ///; /// \param[in] data The RooAbsData to retrieve the set of observables and; /// number of expected events.; /// \param[in] weightSquared If set to `true`, the extended term will be scaled by; /// the ratio of squared event weights over event weights:; /// \f$ \sum w_{i}^2 / \sum w_{i} \f$.; /// Intended to be used by fits with the `SumW2Error()` option that; /// can be passed to RooAbsPdf::fitTo(); /// (see the documentation of said function to learn more about the; /// interpretation of fits with squared weights).; /// \param[in] doOffset See RooAbsPdf::extendedTerm(double, RooArgSet const*, double, bool) const.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:7113,Availability,avail,available,7113,"switches, different ranges could be set like this:; * ```; * myVariable.setRange(""range_pi0"", 135, 210);; * myVariable.setRange(""range_gamma"", 50, 210);; * ```; * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization observables to be used for the constraint terms.; * If none are specified the constrained parameters are used.; * <tr><td> `GlobalObservablesSource(const char* sourceName)` <td> Which source to prioritize for global observable values.; * Can be either:; * - `data`: to take the values from the dataset,; * falling back to the pdf value if a given global observable is not available.; * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; * of global observables will be automatically defined to be the set stored in the data.; * - `model`: to take all values from the pdf and completely ignore the set of global observables stored in the data; * (not even using it to automatically define the set of global observables; * if the `GlobalObservables` or `GlobalObservablesTag` command arguments are not given).; * The default option is `data`.; * <tr><td> `GlobalObservablesTag(const char* tagName)` <td> Define the set of normalization observables to be used for the constraint terms by; * a string attribute associated with pdf observables that match the given tagName.; * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; * \warning",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4087,Deployability,release,releases,4087,"d> Follow strategy 0 for all RooSimultaneous components, except those with less than; * 30 dataset entries, for which strategy 2 is followed.; * </table>; * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; * <table>; * <tr><th> Backend <th> Description; * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; * If all RooAbsArg objects in the model support vectorized evaluation,; * likelihood computations are 2 to 10 times faster than with the **legacy** backend; * - unless your dataset is so small that the vectorization is not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9031,Deployability,Integrat,IntegrateBins,9031," up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9085,Deployability,integrat,integrate,9085," up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9306,Deployability,integrat,integration,9306,"Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, sin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9482,Deployability,integrat,integrator,9482," can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9535,Deployability,integrat,integration,9535,"eous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change th",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9653,Deployability,integrat,integrator,9653,"od bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, c",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9732,Deployability,integrat,integration,9732,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9753,Deployability,continuous,continuous,9753,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9969,Deployability,release,release,9969,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8784,Energy Efficiency,reduce,reduces,8784," associated with pdf observables that match the given tagName.; * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDat",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9189,Energy Efficiency,reduce,reduce,9189,"Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Mod",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:885,Integrability,rout,routine,885,"/** @fn RooAbsPdf::createNLL(); *; * @brief Construct representation of -log(L) of PDF with given dataset.; *; * If dataset is unbinned, an unbinned likelihood is constructed.; * If the dataset is binned, a binned likelihood is constructed.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the NLL creation routine,; * you need to override the virtual RooAbsPdf::createNLLImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Effect on NLL; * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; * \f[; * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Paralleliz",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4905,Integrability,wrap,wraps,4905," not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; * this backend can't be used.; * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; * This is expected to be slower, but useful for debugging problems with the analytic gradient.; * </table>; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6385,Integrability,depend,depends,6385,"codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; * This is expected to be slower, but useful for debugging problems with the analytic gradient.; * </table>; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to; * be `rangeName_indexState`, where `indexState` is the state of the master index category of the simultaneous fit.; * Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; * ```; * myVariable.setRange(""range_pi0"", 135, 210);; * myVariable.setRange(""range_gamma"", 50, 210);; * ```; * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization observables to be used for the constraint terms.; * If none are specified the constrained parameters are used.; * <tr><td> `GlobalObservablesSource(const char* sourceName)` <td> Which source to prioritize for global observable values.; * Can be either:; * - `data`: to take the values from the dataset,; * falling back to the pdf value if a given global observable is not available.; * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; * of global observables will be automatically defined to be the set stored in the data.; * - `model`: to take all values from the pdf and completely ignore the set of g",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:7915,Integrability,message,messages,7915,"tize for global observable values.; * Can be either:; * - `data`: to take the values from the dataset,; * falling back to the pdf value if a given global observable is not available.; * If no `GlobalObservables` or `GlobalObservablesTag` command argument is given, the set; * of global observables will be automatically defined to be the set stored in the data.; * - `model`: to take all values from the pdf and completely ignore the set of global observables stored in the data; * (not even using it to automatically define the set of global observables; * if the `GlobalObservables` or `GlobalObservablesTag` command arguments are not given).; * The default option is `data`.; * <tr><td> `GlobalObservablesTag(const char* tagName)` <td> Define the set of normalization observables to be used for the constraint terms by; * a string attribute associated with pdf observables that match the given tagName.; * <tr><td> `Verbose(bool flag)` <td> Controls RooFit informational messages in likelihood construction; * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximat",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9031,Integrability,Integrat,IntegrateBins,9031," up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9085,Integrability,integrat,integrate,9085," up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9306,Integrability,integrat,integration,9306,"Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, sin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9368,Integrability,depend,depending,9368," **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9482,Integrability,integrat,integrator,9482," can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9535,Integrability,integrat,integration,9535,"eous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change th",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9653,Integrability,integrat,integrator,9653,"od bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, c",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:9732,Integrability,integrat,integration,9732,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:10446,Integrability,rout,routine,10446,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1290,Modifiability,Extend,Extended,1290," * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the NLL creation routine,; * you need to override the virtual RooAbsPdf::createNLLImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Effect on NLL; * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; * \f[; * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Parallelize NLL calculation on num CPUs; * <table>; * <tr><th> Strategy <th> Effect; * <tr><td> 0 = RooFit::BulkPartition - *default* <td> Divide events in N equal chunks; * <tr><td> 1 = RooFit::Interleave <td> Process event i%N in process N. Recommended for binned data with; * a substantial number of zero-bins, which will be ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1320,Modifiability,extend,extended,1320," * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the NLL creation routine,; * you need to override the virtual RooAbsPdf::createNLLImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Effect on NLL; * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; * \f[; * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Parallelize NLL calculation on num CPUs; * <table>; * <tr><th> Strategy <th> Effect; * <tr><td> 0 = RooFit::BulkPartition - *default* <td> Divide events in N equal chunks; * <tr><td> 1 = RooFit::Interleave <td> Process event i%N in process N. Recommended for binned data with; * a substantial number of zero-bins, which will be ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2715,Performance,perform,performed,2715,"f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Parallelize NLL calculation on num CPUs; * <table>; * <tr><th> Strategy <th> Effect; * <tr><td> 0 = RooFit::BulkPartition - *default* <td> Divide events in N equal chunks; * <tr><td> 1 = RooFit::Interleave <td> Process event i%N in process N. Recommended for binned data with; * a substantial number of zero-bins, which will be distributed across processes more equitably in this strategy; * <tr><td> 2 = RooFit::SimComponents <td> Process each component likelihood of a RooSimultaneous fully in a single process; * and distribute components over processes. This approach can be beneficial if normalization calculation time; * dominates the total computation time of a component (since the normalization calculation must be performed; * in each process in strategies 0 and 1. However beware that if the RooSimultaneous components do not share many; * parameters this strategy is inefficient: as most minuit-induced likelihood calculations involve changing; * a single parameter, only 1 of the N processes will be active most of the time if RooSimultaneous components; * do not share many parameters; * <tr><td> 3 = RooFit::Hybrid <td> Follow strategy 0 for all RooSimultaneous components, except those with less than; * 30 dataset entries, for which strategy 2 is followed.; * </table>; * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; * <table>; * <tr><th> Backend <th> Description; * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; * If all R",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5673,Performance,Optimiz,Optimize,5673," before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; * this backend can't be used.; * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; * This is expected to be slower, but useful for debugging problems with the analytic gradient.; * </table>; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to; * be `rangeName_indexState`, where `indexState` is the state of the master index category of the simultaneous fit.; * Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; * ```; * myVariable.setRange(""range_pi0"", 135, 210);; * myVariable.setRange(""range_gamma"", 50, 210);; * ```; * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization ob",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5722,Performance,optimiz,optimization,5722," before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; * this backend can't be used.; * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; * This is expected to be slower, but useful for debugging problems with the analytic gradient.; * </table>; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); * <tr><td> `SplitRange(bool flag)` <td> Use separate fit ranges in a simultaneous fit. Actual range name for each subsample is assumed to; * be `rangeName_indexState`, where `indexState` is the state of the master index category of the simultaneous fit.; * Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; * ```; * myVariable.setRange(""range_pi0"", 135, 210);; * myVariable.setRange(""range_gamma"", 50, 210);; * ```; * <tr><td> `Constrain(const RooArgSet&pars)` <td> For p.d.f.s that contain internal parameter constraint terms (that is usually product PDFs, where one; * term of the product depends on parameters but not on the observable(s),), only apply constraints to the given subset of parameters.; * <tr><td> `ExternalConstraints(const RooArgSet& )` <td> Include given external constraints to likelihood by multiplying them with the original likelihood.; * <tr><td> `GlobalObservables(const RooArgSet&)` <td> Define the set of normalization ob",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:73,Testability,log,log,73,"/** @fn RooAbsPdf::createNLL(); *; * @brief Construct representation of -log(L) of PDF with given dataset.; *; * If dataset is unbinned, an unbinned likelihood is constructed.; * If the dataset is binned, a binned likelihood is constructed.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the NLL creation routine,; * you need to override the virtual RooAbsPdf::createNLLImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Effect on NLL; * <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalize PDF over listed observables.; * Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; * <tr><td> `Extended(bool flag)` <td> Add extended likelihood term, off by default.; * <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name. Multiple comma-separated range names can be specified.; * In this case, the unnormalized PDF \f$f(x)\f$ is normalized by the integral over all ranges \f$r_i\f$:; * \f[; * p(x) = \frac{f(x)}{\sum_i \int_{r_i} f(x) dx}.; * \f]; * <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; * <tr><td> `SumCoefRange(const char* name)` <td> Set the range in which to interpret the coefficients of RooAddPdf components; * <tr><td> `NumCPU(int num, int istrat)` <td> Paralleliz",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3921,Testability,log,log-likelihoods,3921," of the N processes will be active most of the time if RooSimultaneous components; * do not share many parameters; * <tr><td> 3 = RooFit::Hybrid <td> Follow strategy 0 for all RooSimultaneous components, except those with less than; * 30 dataset entries, for which strategy 2 is followed.; * </table>; * <tr><td> `EvalBackend(std::string const&)` <td> Choose a likelihood evaluation backend:; * <table>; * <tr><th> Backend <th> Description; * <tr><td> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; * If all RooAbsArg objects in the model support vectorized evaluation,; * likelihood computations are 2 to 10 times faster than with the **legacy** backend; * - unless your dataset is so small that the vectorization is not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4497,Testability,log,log,4497,"> **cpu** - *default* <td> New vectorized evaluation mode, using faster math functions and auto-vectorisation.; * Since ROOT 6.23, this is the default if `EvalBackend()` is not passed, succeeding the **legacy** backend.; * If all RooAbsArg objects in the model support vectorized evaluation,; * likelihood computations are 2 to 10 times faster than with the **legacy** backend; * - unless your dataset is so small that the vectorization is not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; * this backend can't be used.; * <tr><td> **codegen_no_grad** <td> **Experimental** - Sa",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4771,Testability,log,log,4771,"utations are 2 to 10 times faster than with the **legacy** backend; * - unless your dataset is so small that the vectorization is not worth it.; * The relative difference of the single log-likelihoods with respect to the legacy mode is usually better than \f$10^{-12}\f$,; * and for fit parameters it's usually better than \f$10^{-6}\f$. In past ROOT releases, this backend could be activated with the now deprecated `BatchMode()` option.; * <tr><td> **cuda** <td> Evaluate the likelihood on a GPU that supports CUDA.; * This backend re-uses code from the **cpu** backend, but compiled in CUDA kernels.; * Hence, the results are expected to be identical, modulo some numerical differences that can arise from the different order in which the GPU is summing the log probabilities.; * This backend can drastically speed up the fit if all RooAbsArg object in the model support it.; * <tr><td> **legacy** <td> The original likelihood evaluation method.; * Evaluates the PDF for each single data entry at a time before summing the negative log probabilities.; * <tr><td> **codegen** <td> **Experimental** - Generates and compiles minimal C++ code for the NLL on-the-fly and wraps it in the returned RooAbsReal.; * Also generates and compiles the code for the gradient using Automatic Differentiation (AD) with [Clad](https://github.com/vgvassilev/clad).; * This analytic gradient is passed to the minimizer, which can result in significant speedups for many-parameter fits,; * even compared to the **cpu** backend. However, if one of the RooAbsArg objects in the model does not support the code generation,; * this backend can't be used.; * <tr><td> **codegen_no_grad** <td> **Experimental** - Same as **codegen**, but doesn't generate and compile the gradient code and use the regular numerical differentiation instead.; * This is expected to be slower, but useful for debugging problems with the analytic gradient.; * </table>; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (o",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8999,Testability,test,tests,8999," construction; * <tr><td> `CloneData(bool flag)` <td> Use clone of dataset in NLL (default is true).; * \warning Deprecated option that is ignored. It is up to the implementation of the NLL creation method if the data is cloned or not.; * <tr><td> `Offset(std::string const& mode)` <td> Likelihood offsetting mode. Can be either:; * <table>; * <tr><th> Mode <th> Description; * <tr><td> **none** - *default* <td> No offsetting.; * <tr><td> **initial** <td> Offset likelihood by initial value (so that starting value of FCN in minuit is zero).; * This can improve numeric stability in simultaneous fits with components with large likelihood values.; * <tr><td> **bin** <td> Offset likelihood bin-by-bin with a template histogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:10545,Testability,log,logic,10545,"istogram model based on the obersved data.; * This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum,; * which can drastically improve numeric stability.; * Furthermore, \f$2\cdot \text{NLL}\f$ defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests.; * </table>; * <tr><td> `IntegrateBins(double precision)` <td> In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre.; * This can reduce the bias observed when fitting functions with high curvature to binned data.; * - precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning.; * Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first; * integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator; * has to be manipulated directly.; * - precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; * - precision < 0: Deactivate.; * \see RooBinSamplingPdf; * <tr><td> `ModularL(bool flag)` <td> Enable or disable modular likelihoods, which will become the default in a future release.; * This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this; * should be set to true for parallel minimization of likelihoods!; * Note that it is currently not recommended to use Modular likelihoods without any parallelization enabled in the minimization, since; * some features such as offsetting might not yet work in this case.; * </table>; */; /** @brief Protected implementation of the NLL creation routine.; *; * This virtual function can be overridden in case you want to change the NLL creation logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::createNLL().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3233,Availability,Recover,RecoverFromUndefinedRegions,3233,"during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3586,Availability,error,errors,3586,"arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3733,Availability,error,errors,3733,"* <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * e",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4090,Availability,error,errors,4090,"hat the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `Asymptot",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4178,Availability,error,errors,4178,"hat the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `Asymptot",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4311,Availability,avail,available,4311,"F is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Erro",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4427,Availability,error,errors,4427,"eaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4505,Availability,error,errors,4505,"r><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complement",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4524,Availability,error,errors,4524,"r><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complement",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4633,Availability,error,errors,4633," weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4793,Availability,error,errors,4793,"d, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning P",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5206,Availability,error,errors,5206,"errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; *; * **Example**: Simulation with 1000 events, the average weight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6532,Availability,error,errors,6532,"ed before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient para",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6657,Availability,error,error,6657,"refit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the inte",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6737,Availability,error,error,6737,"od starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:7147,Availability,avail,available,7147,"on of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argu",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6094,Energy Efficiency,consumption,consumption,6094,"ulated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimiz",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1099,Integrability,rout,routine,1099,"ximum likelihood is performed.; * If the dataset is binned, a binned maximum likelihood is performed.; * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Fl",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1661,Integrability,interface,interface,1661,"turn RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returne",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1725,Integrability,interface,interface,1725,"turn RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returne",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6258,Integrability,message,messages,6258," but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6758,Integrability,message,messages,6758,"od starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); * <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation.; * A negative value suppresses output completely, a zero value will only print the error count per p.d.f component,; * a positive value will print details of each error up to `numErr` messages per p.d.f component.; * <tr><td> `Parallelize(Int_t nWorkers)` <td> Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization; * backend and uses the number given as the number of workers to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8794,Integrability,rout,routine,8794,"rs to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argument this disables or enables likelihood; * parallelization. The second argument determines whether to split the task batches; * per event or per likelihood component. And the third argument how many events or; * respectively components to include in each batch.; * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; * and outputs the timings at the end of a run to json log files, which can be analyzed with the; * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; * </table>; */; /** @brief Protected implementation of the likelihood fitting routine.; *; * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5391,Modifiability,extend,extended,5391,"ight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disab",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5439,Modifiability,extend,extended,5439,"ight is 0.1.; * The errors are as big as if one fitted to 1000 events.; * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; * Use this if you want to know what statistical errors you would get if you had a dataset with as many; * events as the (weighted) Monte Carlo simulation represents.; *; * **Example** (Data as above):; * The errors are as big as if one fitted to 100 events.; * </table>; * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; * object will be the minimum of the original covariance matrix quality and the quality of the covariance; * matrix calculated with the squared weights.; * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; This option even correctly implements the case of extended likelihood fits; (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; * <tr><td> `PrefitDataFraction(double fraction)`; * <td> Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits; * by finding good starting values for the parameters for the actual fit.; * \warning Prefitting may give bad results when used in binned analysis.; *; * <tr><th><th> Options to control informational output; * <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit).; * <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default.; * <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well.; * See RooMinimizer::PrintLevel for the meaning of the levels.; * <tr><td> `Warnings(bool flag)` <td> Enable or disab",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:130,Performance,perform,performed,130,"/** @fn RooAbsPdf::fitTo(); *; * @brief Fit PDF to given dataset.; *; * If dataset is unbinned, an unbinned maximum likelihood is performed.; * If the dataset is binned, a binned maximum likelihood is performed.; * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, b",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:201,Performance,perform,performed,201,"/** @fn RooAbsPdf::fitTo(); *; * @brief Fit PDF to given dataset.; *; * If dataset is unbinned, an unbinned maximum likelihood is performed.; * If the dataset is binned, a binned maximum likelihood is performed.; * By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, b",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2183,Performance,Optimiz,Optimize,2183,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2232,Performance,optimiz,optimization,2232,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3233,Safety,Recover,RecoverFromUndefinedRegions,3233,"during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region.; * `strength` controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with `strength = 0.`.; *; * <tr><td> `SumW2Error(bool flag)` <td> Apply correction to errors and covariance matrix.; * This uses two covariance matrices, one with the weights, the other with squared weights,; * to obtain the correct errors for weighted likelihood fits. If this option is activated, the; * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; * squared weights. This allows to switch between two interpretations of errors:; * <table>; * <tr><th> SumW2Error <th> Interpretation; * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; * Use this if you want",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1308,Testability,log,log,1308,"n succession.; *; * @param data Reference to a RooAbsData object representing the dataset.; * @param cmdArgs Variadic template arguments representing optional command arguments.; * You can pass either an arbitrary number of RooCmdArg instances; * or a single RooLinkedList that points to the RooCmdArg objects.; * @return An owning pointer to the created RooAbsReal NLL object.; * @return RooFitResult with fit status and parameters if option Save() is used, `nullptr` otherwise. The user takes ownership of the fit result.; *; * @tparam CmdArgs_t Template types for optional command arguments.; * Can either be an arbitrary number of RooCmdArg or a single RooLinkedList.; *; * \note This front-end function should not be re-implemented in derived PDF types.; * If you mean to customize the likelihood fitting routine,; * you need to override the virtual RooAbsPdf::fitToImpl() method.; *; * The following named arguments are supported:; *; * <table>; * <tr><th> Type of CmdArg <th> Options to control construction of -log(L); * <tr><td> <td> All command arguments that can also be passed to the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2248,Testability,test,test,2248,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8430,Testability,Log,Log,8430,"rs to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argument this disables or enables likelihood; * parallelization. The second argument determines whether to split the task batches; * per event or per likelihood component. And the third argument how many events or; * respectively components to include in each batch.; * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; * and outputs the timings at the end of a run to json log files, which can be analyzed with the; * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; * </table>; */; /** @brief Protected implementation of the likelihood fitting routine.; *; * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8456,Testability,log,logs,8456,"rs to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argument this disables or enables likelihood; * parallelization. The second argument determines whether to split the task batches; * per event or per likelihood component. And the third argument how many events or; * respectively components to include in each batch.; * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; * and outputs the timings at the end of a run to json log files, which can be analyzed with the; * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; * </table>; */; /** @brief Protected implementation of the likelihood fitting routine.; *; * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8587,Testability,log,log,8587,"rs to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argument this disables or enables likelihood; * parallelization. The second argument determines whether to split the task batches; * per event or per likelihood component. And the third argument how many events or; * respectively components to include in each batch.; * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; * and outputs the timings at the end of a run to json log files, which can be analyzed with the; * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; * </table>; */; /** @brief Protected implementation of the likelihood fitting routine.; *; * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8899,Testability,log,logic,8899,"rs to use in the parallelization. -1 also enables; * RooFit's parallel minimization backend, and sets the number of workers to the number of available processes.; * 0 disables this feature.; * In case parallelization is requested, this option implies `ModularL(true)` in the internal call to the NLL creation method.; * <tr><td> `ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1)` <td> **Experimental** - Control gradient parallelization settings. The first argument; * only disables or enables gradient parallelization, this is on by default.; * The second argument determines the internal partial derivative calculation; * ordering strategy. The third argument determines the number of partial; * derivatives that are executed per task package on each worker.; * <tr><td> `ParallelDescentOptions(bool enable=false, int splitStrategy=0, int numSplits=4)` <td> **Experimental** - Control settings related to the parallelization of likelihoods; * outside of the gradient calculation but in the minimization, most prominently; * in the linesearch step. The first argument this disables or enables likelihood; * parallelization. The second argument determines whether to split the task batches; * per event or per likelihood component. And the third argument how many events or; * respectively components to include in each batch.; * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; * and outputs the timings at the end of a run to json log files, which can be analyzed with the; * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; * </table>; */; /** @brief Protected implementation of the likelihood fitting routine.; *; * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; *; * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1812,Usability,simpl,simplex,1812,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1839,Usability,simpl,simplex,1839,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1915,Usability,simpl,simplex,1915,"o the NLL creation method.; * \see RooAbsPdf::createNLL(); *; * <tr><th><th> Options to control flow of fit procedure; * <tr><td> `Minimizer(""<type>"", ""<algo>"")` <td> Choose minimization package and optionally the algorithm to use. Default is MINUIT/MIGRAD through the RooMinimizer interface,; * but others can be specified (through RooMinimizer interface).; * <table>; * <tr><th> Type <th> Algorithm; * <tr><td> Minuit <td> migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); * <tr><td> Minuit2 <td> migrad, simplex, minimize, scan; * <tr><td> GSLMultiMin <td> conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; * <tr><td> GSLSimAn <td> -; * </table>; *; * <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; * <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization of test statistic during minimization (on by default); * <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; * <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, off by default; * <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; * <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; * <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 to 2, default is 1); * <tr><td> `MaxCalls(int n)` <td> Change maximum number of likelihood function calls from MINUIT (if `n <= 0`, the default of 500 * #%parameters is used); * <tr><td> `EvalErrorWall(bool flag=true)` <td> When parameters are in disallowed regions (e.g. PDF is negative), return very high value to fitter; * to force it out of that region. This can, however, mean that the fitter gets lost in this region. If; * this happens, try switching it off.; * <tr><td> `RecoverFromUndefinedRegions(double strength)` <td> When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:18,Integrability,message,messages,18,"// silent warning messages coming when evaluating a RooAddPdf without a normalization set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create a generator context from a p.d.f. This default; /// implementation returns a 'standard' context that works for any p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:741,Availability,error,error,741,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1441,Deployability,deploy,deploy,1441,"ain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:950,Integrability,message,messages,950,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3177,Integrability,Depend,Depending,3177,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:302,Modifiability,variab,variables,302,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:341,Modifiability,Variab,Variables,341,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:591,Modifiability,variab,variables,591,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1075,Modifiability,Extend,Extended,1075,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1181,Modifiability,extend,extended,1181,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// Generate the specified number of events or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1242,Modifiability,extend,extended,1242," or expectedEvents() if not specified.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation.; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg() to change behaviour of generate().; /// \return RooDataSet *, owned by caller.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error.; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on generate; /// <tr><td> `Name(const char* name)` <td> Name of the output dataset; /// <tr><td> `Verbose(bool flag)` <td> Print informational messages during event generation; /// <tr><td> `NumEvents(int nevt)` <td> Generate specified number of events; /// <tr><td> `Extended()` <td> If no number of events to be generated is given,; /// use expected number of events from extended likelihood term.; /// This evidently only works for extended PDFs.; /// <tr><td> `GenBinned(const char* tag)` <td> Use binned generation for all component pdfs that have 'setAttribute(tag)' set; /// <tr><td> `AutoBinned(bool flag)` <td> Automatically deploy binned generation for binned distributions (e.g. RooHistPdf, sums and products of; /// RooHistPdfs etc); /// \note Datasets that are generated in binned mode are returned as weighted unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If ran",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2668,Modifiability,variab,variables,2668," unbinned datasets. This means that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2951,Modifiability,variab,variables,2951,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2985,Modifiability,Variab,Variables,2985,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3557,Modifiability,config,config,3557,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3131,Security,Access,Accessing,3131,"eans that; /// for each bin, there will be one event in the dataset with a weight corresponding to the (possibly randomised) bin content.; ///; ///; /// <tr><td> `AllBinned()` <td> As above, but for all components.; /// \note The notion of components is only meaningful for simultaneous PDFs; /// as binned generation is always executed at the top-level node for a regular; /// PDF, so for those it only mattes that the top-level node is tagged.; ///; /// <tr><td> ProtoData(const RooDataSet& data, bool randOrder); /// <td> Use specified dataset as prototype dataset. If randOrder in ProtoData() is set to true,; /// the order of the events in the dataset will be read in a random order if the requested; /// number of events to be generated does not match the number of events in the prototype dataset.; /// \note If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; /// the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated event and also used to set our PDF parameters.; /// The user can specify a number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars randomized. Variables in whatVars that; /// are not in the prototype will be added as new columns to the generated dataset.; ///; /// </table>; ///; /// #### Accessing the underlying event generator; /// Depending on the fit model (if it is difficult to sample), it may be necessary to change generator settings.; /// For the default generator (RooFoamGenerator), the number of samples or cells could be increased by e.g. using; /// myPdf->specialGeneratorConfig()->getConfigSection(""RooFoamGenerator"").setRealValue(""nSample"",1e4);; ///; /// The foam generator e.g. has the following config options:; /// - nCell[123N]D; /// - nSample; /// - chatLevel; /// \see rf902_numgenconfig.C",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:113,Performance,perform,perform,113,"////////////////////////////////////////////////////////////////////////////////; /// \note This method does not perform any generation. To generate according to generations specification call RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; ///; /// Details copied from RooAbsPdf::generate():; /// --------------------------------------------; /// \copydetails RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:176,Energy Efficiency,efficient,efficient,176,"////////////////////////////////////////////////////////////////////////////////; /// If many identical generation requests; /// are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); /// combination than calling the standard generate() multiple times as; /// initialization overhead is only incurred once.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1047,Availability,error,error,1047,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:250,Modifiability,variab,variables,250,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:299,Modifiability,variab,variables,299,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:880,Modifiability,extend,extended,880,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:984,Modifiability,extend,extended,984,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Generate a dataset with the variables (and categories) in this set.; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \param[in] nEvents Generate the specified number of events or else try to use; /// expectedEvents() if nEvents <= 0 (default).; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] autoBinned If original distribution is binned, return bin centers and randomise weights; /// instead of generating single events.; /// \param[in] binnedTag; /// \param[in] expectedData Call setExpectedData on the genContext.; /// \param[in] extended Randomise number of events generated according to Poisson(nEvents). Only useful; /// if PDF is extended.; /// \return New dataset. Returns zero in case of an error. The caller takes ownership of the returned; /// dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1304,Availability,error,error,1304,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:171,Modifiability,variab,variables,171,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:275,Modifiability,variab,variables,275,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:459,Modifiability,variab,variables,459,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:747,Modifiability,variab,variables,747,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:786,Modifiability,Variab,Variables,786,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset using a prototype dataset as a model,; /// with values of the variables in `whatVars` sampled from our distribution.; ///; /// \param[in] whatVars Generate for these variables.; /// \param[in] prototype Use this dataset; /// as a prototype: the new dataset will contain the same number of; /// events as the prototype (by default), and any prototype variables not in; /// whatVars will be copied into the new dataset for each generated; /// event and also used to set our PDF parameters. The user can specify a; /// number of events to generate that will override the default. The result is a; /// copy of the prototype dataset with only variables in whatVars; /// randomized. Variables in whatVars that are not in the prototype; /// will be added as new columns to the generated dataset.; /// \param[in] nEvents Number of events to generate. Defaults to 0, which means number; /// of event in prototype dataset.; /// \param[in] verbose Show which generator strategies are being used.; /// \param[in] randProtoOrder Randomise order of retrieval of events from proto dataset.; /// \param[in] resampleProto Resample from the proto dataset.; /// \return The new dataset. Returns zero in case of an error. The caller takes ownership of the; /// returned dataset.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load generatedVars with the subset of directVars that we can generate events for,; /// and return a code that specifies the generator algorithm we will use. A code of; /// zero indicates that we cannot generate any of the directVars (in this case, nothing; /// should be added to generatedVars). Any non-zero codes will be passed to our generateEvent(); /// implementation, but otherwise its value is arbitrary. The default implementation of; /// this method returns zero. Subclasses will usually implement this method using the; /// matchArgs() methods to advertise the algorithms they provide.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for one-time initialization to setup the generator for the specified code.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for generation of an event using the algorithm; /// corresponding to the specified code. The meaning of each code is; /// defined by the getGenerator() implementation. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:236,Integrability,depend,depends,236,"////////////////////////////////////////////////////////////////////////////////; /// Check if given observable can be safely generated using the; /// pdfs internal generator mechanism (if that existsP). Observables; /// on which a PDF depends via more than route are not safe; /// for use with internal generators because they introduce; /// correlations not known to the internal generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:258,Integrability,rout,route,258,"////////////////////////////////////////////////////////////////////////////////; /// Check if given observable can be safely generated using the; /// pdfs internal generator mechanism (if that existsP). Observables; /// on which a PDF depends via more than route are not safe; /// for use with internal generators because they introduce; /// correlations not known to the internal generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:119,Safety,safe,safely,119,"////////////////////////////////////////////////////////////////////////////////; /// Check if given observable can be safely generated using the; /// pdfs internal generator mechanism (if that existsP). Observables; /// on which a PDF depends via more than route are not safe; /// for use with internal generators because they introduce; /// correlations not known to the internal generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:272,Safety,safe,safe,272,"////////////////////////////////////////////////////////////////////////////////; /// Check if given observable can be safely generated using the; /// pdfs internal generator mechanism (if that existsP). Observables; /// on which a PDF depends via more than route are not safe; /// for use with internal generators because they introduce; /// correlations not known to the internal generator",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:26,Integrability,depend,dependency,26,"// There must be no other dependency routes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:37,Integrability,rout,routes,37,"// There must be no other dependency routes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:757,Availability,error,error,757,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1089,Integrability,message,messages,1089,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:219,Modifiability,variab,variables,219,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:258,Modifiability,Variab,Variables,258,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:607,Modifiability,variab,variables,607,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1197,Modifiability,Extend,Extended,1197,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with events sampled from our distribution.; /// \param[in] whatVars Choose variables in which to generate events. Variables not listed here will remain; /// constant and not be used for event generation; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6 Optional RooCmdArg to change behaviour of generateBinned(); /// \return RooDataHist *, to be managed by caller.; ///; /// Generate the specified number of events or expectedEvents() if not specified.; ///; /// Any variables of this PDF that are not in whatVars will use their; /// current values and be treated as fixed parameters. Returns zero; /// in case of an error. The caller takes ownership of the returned; /// dataset.; ///; /// The following named arguments are supported; /// | Type of CmdArg | Effect on generation; /// |---------------------------|-----------------------; /// | `Name(const char* name)` | Name of the output dataset; /// | `Verbose(bool flag)` | Print informational messages during event generation; /// | `NumEvents(int nevt)` | Generate specified number of events; /// | `Extended()` | The actual number of events generated will be sampled from a Poisson distribution with mu=nevt. This can be *much* faster for peaked PDFs, but the number of events is not exactly what was requested.; /// | `ExpectedData()` | Return a binned dataset _without_ statistical fluctuations (also aliased as Asimov()); ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1460,Availability,error,error,1460,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:134,Modifiability,variab,variables,134,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:222,Modifiability,Variab,Variables,222,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:584,Modifiability,extend,extended,584,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1093,Modifiability,variab,variables,1093,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:1261,Modifiability,variab,variables,1261,"////////////////////////////////////////////////////////////////////////////////; /// Generate a new dataset containing the specified variables with; /// events sampled from our distribution.; ///; /// \param[in] whatVars Variables that values should be generated for.; /// \param[in] nEvents How many events to generate. If `nEvents <=0`, use the value returned by expectedEvents() as target.; /// \param[in] expectedData If set to true (false by default), the returned histogram returns the 'expected'; /// data sample, i.e. no statistical fluctuations are present.; /// \param[in] extended For each bin, generate Poisson(x, mu) events, where `mu` is chosen such that *on average*,; /// one would obtain `nEvents` events. This means that the true number of events will fluctuate around the desired value,; /// but the generation happens a lot faster.; /// Especially if the PDF is sharply peaked, the multinomial event generation necessary to generate *exactly* `nEvents` events can; /// be very slow.; ///; /// The binning used for generation of events is the currently set binning for the variables.; /// It can e.g. be changed using; /// ```; /// x.setBins(15);; /// x.setRange(-5., 5.);; /// pdf.generateBinned(RooArgSet(x), 1000);; /// ```; ///; /// Any variables of this PDF that are not in `whatVars` will use their; /// current values and be treated as fixed parameters.; /// \return RooDataHist* owned by the caller. Returns `nullptr` in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:34,Modifiability,extend,extended,34,"// Don't round in expectedData or extended mode",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Modifiability,Extend,Extended,3,"// Extended mode, set contents to Poisson(pdf*nEvents)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:39,Modifiability,Extend,Extend,39,"// Second pass for regular mode - Trim/Extend dataset to exact number of entries; // Calculate difference between what is generated so far and what is requested",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Performance,Perform,Perform,3,"// Perform simple binned accept/reject procedure to get to exact event count",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:11,Usability,simpl,simple,11,"// Perform simple binned accept/reject procedure to get to exact event count",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:104,Integrability,interface,interface,104,"////////////////////////////////////////////////////////////////////////////////; /// Special generator interface for generation of 'global observables' -- for RooStats tools",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:22,Modifiability,extend,extend,22,"//Overlapping ranges, extend left one",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6011,Availability,down,downward,6011,"averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; /// An empty string """" or `nullptr` means to use the default range of the variable.; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; /// result in more and more densely spaced curve points. A negative precision value will disable; /// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; /// of the plotted observable (recommended for expensive functions such as profile likelihoods); /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:484,Deployability,integrat,integrated,484,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3697,Deployability,integrat,integrating,3697," +1 or three states with indices -1,0 and +1.; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; /// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; /// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4061,Deployability,integrat,integrating,4061,"stead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection th",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4662,Deployability,integrat,integration,4662,"by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection through data averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select lin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5211,Deployability,integrat,integrated,5211,".e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection through data averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensu",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6779,Energy Efficiency,adapt,adaptive,6779," <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; /// An empty string """" or `nullptr` means to use the default range of the variable.; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; /// result in more and more densely spaced curve points. A negative precision value will disable; /// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; /// of the plotted observable (recommended for expensive functions such as profile likelihoods); /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; /// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; /// \note To include the uncertainty from the expected number of events,; /// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; /// ``",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:484,Integrability,integrat,integrated,484,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:707,Integrability,message,message,707,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2149,Integrability,depend,depends,2149,"ooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range("""")`.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor.; /// Interpretation of number depends on code:; /// `RooAbsReal::Relative`: relative adjustment factor; /// `RooAbsReal::NumEvent`: scale to match given number of events.; ///; /// <tr><th> Type of argument <th> Misc control; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category; /// \f$ \frac{F(+)-F(-)}{F(+)+F(-)} \f$ rather than the PDF projection. Category must have two; /// states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; /// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; /// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Comp",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3697,Integrability,integrat,integrating,3697," +1 or three states with indices -1,0 and +1.; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; /// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; /// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4061,Integrability,integrat,integrating,4061,"stead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection th",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:4662,Integrability,integrat,integration,4662,"by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection through data averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select lin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5211,Integrability,integrat,integrated,5211,".e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection through data averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensu",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:226,Modifiability,variab,variable,226,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:504,Modifiability,variab,variables,504,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:5264,Modifiability,variab,variables,5264,".e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. Multiple Slice() commands can be given to specify slices; /// in multiple observables, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice(tagCategory, ""2tag""), Slice(jetCategory, ""3jet""));; /// ```; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting; /// over observables given in set, completely ignoring the default projection behavior. Advanced use only.; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables; /// present in given dataset projection of PDF is achieved by constructing an average over all observable; /// values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of; /// observables in dataset 'd' for projection through data averaging; /// <tr><td> `ProjectionRange(const char* rn)` <td> When projecting the PDF onto the plot axis, it is usually integrated; /// over the full range of the invisible variables. The ProjectionRange overrides this.; /// This is useful if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensu",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6362,Modifiability,variab,variable,6362,"ul if the PDF was fitted in a limited range in y, but it is now projected onto x. If; /// `ProjectionRange(""<name of fit range>"")` is passed, the projection is normalised correctly.; ///; /// <tr><th> Type of argument <th> Plotting control; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; /// An empty string """" or `nullptr` means to use the default range of the variable.; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; /// result in more and more densely spaced curve points. A negative precision value will disable; /// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; /// of the plotted observable (recommended for expensive functions such as profile likelihoods); /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; /// The linear method is fast but may not be accurate in the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:6779,Modifiability,adapt,adaptive,6779," <td> Select fill style, default is not filled. If a filled style is selected,; /// also use VLines() to add vertical downward lines at end of curve to ensure proper closure; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; /// An empty string """" or `nullptr` means to use the default range of the variable.; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; /// result in more and more densely spaced curve points. A negative precision value will disable; /// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; /// of the plotted observable (recommended for expensive functions such as profile likelihoods); /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; /// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; /// \note To include the uncertainty from the expected number of events,; /// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; /// ``",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:769,Performance,perform,performed,769,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame.; /// - If a PDF is plotted in an empty frame, it; /// will show a unit-normalized curve in the frame variable. When projecting a multi-; /// dimensional PDF onto the frame axis, hidden parameters are taken are taken at; /// their current value.; /// - If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projection integrated over all variables that were present in the shown; /// dataset (except for the one on the x-axis). The normalization of the curve will; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; /// - If a PDF is plotted in a frame showing a dataset *after* a fit, the above happens,; /// but the PDF will be drawn and normalised only in the fit range. If this is not desired,; /// plotting and normalisation range can be overridden using Range() and NormRange() as; /// documented in the table below.; ///; /// This function takes the following named arguments (for more arguments, see also; /// RooAbsReal::plotOn(RooPlot*,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,; /// const RooCmdArg&) const ); ///; ///; /// <table>; /// <tr><th> Type of argument <th> Controlling normalisation; /// <tr><td> `NormRange(const char* name)` <td> Calculate curve normalization w.r.t. specified range[s].; /// See the tutorial rf212_plottingInRanges_blinding.C; /// \note Setting a Range() by default also sets a NormRange() on the same range, meaning that the; /// PDF is plotted and normalised in the same range. Overriding this can be useful if the PDF was fit; /// in limited range[s] such as side bands, `NormRange(""sidebandLeft,sidebandRight"")`, but the PDF; /// should be drawn in the full range, `Range(""""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:7496,Performance,perform,perform,7496,"lor code; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name. Multiple comma-separated ranges can be given.; /// An empty string """" or `nullptr` means to use the default range of the variable.; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. A higher precision will; /// result in more and more densely spaced curve points. A negative precision value will disable; /// adaptive point spacing and restrict sampling to the grid point of points defined by the binning; /// of the plotted observable (recommended for expensive functions such as profile likelihoods); /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma.; /// The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made.; /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; /// \note To include the uncertainty from the expected number of events,; /// the Normalization() argument with `ScaleType` `RooAbsReal::RelativeExpected` has to be passed, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; /// ```; ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:2898,Testability,log,log,2898," `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor.; /// Interpretation of number depends on code:; /// `RooAbsReal::Relative`: relative adjustment factor; /// `RooAbsReal::NumEvent`: scale to match given number of events.; ///; /// <tr><th> Type of argument <th> Misc control; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category; /// \f$ \frac{F(+)-F(-)}{F(+)+F(-)} \f$ rather than the PDF projection. Category must have two; /// states with indices -1 and +1 or three states with indices -1,0 and +1.; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero.; /// Mostly useful when plotting -log(L) or \f$ \chi^2 \f$ distributions; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Create a projection of this PDF onto the x-axis, but; /// instead of plotting it directly, add it to an existing curve with given name (and relative weight factors).; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th> Type of argument <th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observab",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Safety,Sanity check,Sanity checks,3,"// Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8,Safety,sanity check,sanity checks,8,"// More sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:111,Safety,avoid,avoided,111,"// User gave overlapping ranges. This leads to double-counting events and integrals, and must; // therefore be avoided. If a NormRange has been given, the overlap is already gone.; // It's safe to plot even with overlap now.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:189,Safety,safe,safe,189,"// User gave overlapping ranges. This leads to double-counting events and integrals, and must; // therefore be avoided. If a NormRange has been given, the overlap is already gone.; // It's safe to plot even with overlap now.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:3,Safety,Sanity check,Sanity checks,3,"// Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:8,Safety,sanity check,sanity checks,8,"// More sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:718,Availability,error,error,718,"////////////////////////////////////////////////////////////////////////////////; /// The following named arguments are supported; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on parameter box; /// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; /// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// | Parameter | Format; /// | ---------------------- | --------------------------; /// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; /// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; /// Coordinates are given as position on the pad between 0 and 1.; /// The lower end of the box is calculated automatically from the number of lines in the box.; /// </table>; ///; ///; /// Example use:; /// ```; /// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; /// ```; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:746,Availability,error,error,746,"////////////////////////////////////////////////////////////////////////////////; /// The following named arguments are supported; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on parameter box; /// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; /// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// | Parameter | Format; /// | ---------------------- | --------------------------; /// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; /// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; /// Coordinates are given as position on the pad between 0 and 1.; /// The lower end of the box is calculated automatically from the number of lines in the box.; /// </table>; ///; ///; /// Example use:; /// ```; /// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; /// ```; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:962,Availability,error,error,962,"////////////////////////////////////////////////////////////////////////////////; /// The following named arguments are supported; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on parameter box; /// <tr><td> `Parameters(const RooArgSet& param)` <td> Only the specified subset of parameters will be shown. By default all non-constant parameters are shown.; /// <tr><td> `ShowConstants(bool flag)` <td> Also display constant parameters; /// <tr><td> `Format(const char* what,...)` <td> Parameter formatting options.; /// | Parameter | Format; /// | ---------------------- | --------------------------; /// | `const char* what` | Controls what is shown. ""N"" adds name (alternatively, ""T"" adds the title), ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value; /// | `FixedPrecision(int n)`| Controls precision, set fixed number of digits; /// | `AutoPrecision(int n)` | Controls precision. Number of shown digits is calculated from error + n specified additional digits (1 is sensible default); /// <tr><td> `Label(const chat* label)` <td> Add label to parameter box. Use `\n` for multi-line labels.; /// <tr><td> `Layout(double xmin, double xmax, double ymax)` <td> Specify relative position of left/right side of box and top of box.; /// Coordinates are given as position on the pad between 0 and 1.; /// The lower end of the box is calculated automatically from the number of lines in the box.; /// </table>; ///; ///; /// Example use:; /// ```; /// pdf.paramOn(frame, Label(""fit result""), Format(""NEU"",AutoPrecision(1)) ) ;; /// ```; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:145,Availability,error,errors,145,"////////////////////////////////////////////////////////////////////////////////; /// Add a text box with the current parameter values and their errors to the frame.; /// Observables of this PDF appearing in the 'data' dataset will be omitted.; ///; /// An optional label will be inserted if passed. Multi-line labels can be generated; /// by adding `\n` to the label string. Use 'sigDigits'; /// to modify the default number of significant digits printed. The 'xmin,xmax,ymax'; /// values specify the initial relative position of the text box in the plot frame.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:146,Modifiability,extend,extended,146,"////////////////////////////////////////////////////////////////////////////////; /// Return expected number of events from this p.d.f for use in extended; /// likelihood calculations. This default implementation returns zero",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:114,Performance,cache,cache,114,"////////////////////////////////////////////////////////////////////////////////; /// Destructor of normalization cache element. If this element; /// provides the 'current' normalization stored in RooAbsPdf::_norm; /// zero _norm pointer here before object pointed to is deleted here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:58,Performance,cache,cache,58,"// Zero _norm pointer in RooAbsPdf if it is points to our cache payload",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:143,Deployability,integrat,integrated,143,"////////////////////////////////////////////////////////////////////////////////; /// Return a p.d.f that represent a projection of this p.d.f integrated over given observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:143,Integrability,integrat,integrated,143,"////////////////////////////////////////////////////////////////////////////////; /// Return a p.d.f that represent a projection of this p.d.f integrated over given observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:273,Deployability,integrat,integrated,273,"////////////////////////////////////////////////////////////////////////////////; /// Create a cumulative distribution function of this p.d.f in terms; /// of the observables listed in iset. If no nset argument is given; /// the c.d.f normalization is constructed over the integrated; /// observables, so that its maximum value is precisely 1. It is also; /// possible to choose a different normalization for; /// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; /// construct a partial cdf c(x,y) that only when integrated itself; /// over z results in a maximum value of 1. To construct such a cdf pass; /// z as argument to the optional nset argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:523,Deployability,integrat,integrated,523,"////////////////////////////////////////////////////////////////////////////////; /// Create a cumulative distribution function of this p.d.f in terms; /// of the observables listed in iset. If no nset argument is given; /// the c.d.f normalization is constructed over the integrated; /// observables, so that its maximum value is precisely 1. It is also; /// possible to choose a different normalization for; /// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; /// construct a partial cdf c(x,y) that only when integrated itself; /// over z results in a maximum value of 1. To construct such a cdf pass; /// z as argument to the optional nset argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:273,Integrability,integrat,integrated,273,"////////////////////////////////////////////////////////////////////////////////; /// Create a cumulative distribution function of this p.d.f in terms; /// of the observables listed in iset. If no nset argument is given; /// the c.d.f normalization is constructed over the integrated; /// observables, so that its maximum value is precisely 1. It is also; /// possible to choose a different normalization for; /// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; /// construct a partial cdf c(x,y) that only when integrated itself; /// over z results in a maximum value of 1. To construct such a cdf pass; /// z as argument to the optional nset argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:523,Integrability,integrat,integrated,523,"////////////////////////////////////////////////////////////////////////////////; /// Create a cumulative distribution function of this p.d.f in terms; /// of the observables listed in iset. If no nset argument is given; /// the c.d.f normalization is constructed over the integrated; /// observables, so that its maximum value is precisely 1. It is also; /// possible to choose a different normalization for; /// multi-dimensional p.d.f.s: eg. for a pdf f(x,y,z) one can; /// construct a partial cdf c(x,y) that only when integrated itself; /// over z results in a maximum value of 1. To construct such a cdf pass; /// z as argument to the optional nset argument",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:211,Deployability,integrat,integration,211,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:415,Deployability,integrat,integrates,415,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:440,Deployability,integrat,integrates,440,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:699,Deployability,integrat,integration,699,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:803,Deployability,integrat,integration,803,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:211,Integrability,integrat,integration,211,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:415,Integrability,integrat,integrates,415,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:440,Integrability,integrat,integrates,440,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:699,Integrability,integrat,integration,699,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:803,Integrability,integrat,integration,803,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:397,Modifiability,variab,variables,397,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:243,Performance,perform,performed,243,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over; ///; /// The following named arguments are accepted; /// | Type of CmdArg | Effect on CDF; /// | ---------------------|-------------------; /// | SupNormSet(const RooArgSet&) | Observables over which should be normalized _in addition_ to the integration observables; /// | ScanNumCdf() | Apply scanning technique if cdf integral involves numeric integration [ default ]; /// | ScanAllCdf() | Always apply scanning technique; /// | ScanNoCdf() | Never apply scanning technique; /// | ScanParameters(Int_t nbins, Int_t intOrder) | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:127,Deployability,configurat,configuration,127,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric MC generator configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:127,Modifiability,config,configuration,127,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric MC generator configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:110,Deployability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:121,Deployability,configurat,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:197,Deployability,configurat,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:110,Integrability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:121,Modifiability,config,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:197,Modifiability,config,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:110,Deployability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:121,Deployability,configurat,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:197,Deployability,configurat,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:312,Deployability,integrat,integrator,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:328,Deployability,configurat,configuration,328,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:354,Deployability,install,installed,354,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:379,Deployability,configurat,configuration,379,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:110,Integrability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:312,Integrability,integrat,integrator,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:121,Modifiability,config,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:197,Modifiability,config,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:328,Modifiability,config,configuration,328,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:379,Modifiability,config,configuration,379,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:118,Deployability,configurat,configuration,118,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:176,Deployability,configurat,configuration,176,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:228,Deployability,configurat,configuration,228,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:282,Deployability,configurat,configuration,282,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:118,Modifiability,config,configuration,118,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:176,Modifiability,config,configuration,176,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:228,Modifiability,config,configuration,228,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:282,Modifiability,config,configuration,282,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric MC generator configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:100,Deployability,configurat,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// Set the given configuration as default numeric MC generator; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:151,Deployability,configurat,configuration,151,"////////////////////////////////////////////////////////////////////////////////; /// Set the given configuration as default numeric MC generator; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:100,Modifiability,config,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// Set the given configuration as default numeric MC generator; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:151,Modifiability,config,configuration,151,"////////////////////////////////////////////////////////////////////////////////; /// Set the given configuration as default numeric MC generator; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:130,Deployability,configurat,configuration,130,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric MC generator configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:130,Modifiability,config,configuration,130,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric MC generator configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:34,Performance,cache,cached,34,"// It can happen that the objects cached by the client are also clients of; // the arg itself! In that case, the position of the client in the client; // list might have changed, and we need to find the new index.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:46,Integrability,depend,depend,46,"// the stuff that the clients have cached may depend on the normalization range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:35,Performance,cache,cached,35,"// the stuff that the clients have cached may depend on the normalization range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:46,Integrability,depend,depend,46,"// the stuff that the clients have cached may depend on the normalization range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:35,Performance,cache,cached,35,"// the stuff that the clients have cached may depend on the normalization range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:34,Performance,cache,cached,34,"// If servers are redirected, the cached normalization integrals and; // normalization sets are most likely invalid.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:73,Performance,cache,cache,73,"// Object is own by _normCacheManager that will delete object as soon as cache; // is sterilized by server redirect",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx:102,Performance,cache,cached,102,"// Similar to the situation with the normalization integral above: if a; // server is redirected, the cached normalization set might not point to; // the right observables anymore. We need to reset it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsProxy.cxx:230,Deployability,update,updated,230,/**; \file RooAbsProxy.cxx; \class RooAbsProxy; \ingroup Roofitcore. Abstract interface for proxy classes.; Proxy classes hold pointers to other Roofit objects; and process serverRedirect changes so that the proxied; pointers are updated accordingly on a clone or copy of; of the owning class; **/,MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsProxy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsProxy.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsProxy.cxx:78,Integrability,interface,interface,78,/**; \file RooAbsProxy.cxx; \class RooAbsProxy; \ingroup Roofitcore. Abstract interface for proxy classes.; Proxy classes hold pointers to other Roofit objects; and process serverRedirect changes so that the proxied; pointers are updated accordingly on a clone or copy of; of the owning class; **/,MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsProxy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsProxy.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1104,Integrability,interface,interface,1104,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAbsReal. Abstract base class for objects that represent a; real value and implements functionality common to all real-valued objects; such as the ability to plot them, to construct integrals of them, the; ability to advertise (partial) analytical integrals etc. Implementation of RooAbsReal may be derived, thus no interface; is provided to modify the contents. \ingroup Roofitcore; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:38,Availability,error,errors,38,"// To print stack traces when caching errors are detected",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:49,Safety,detect,detected,49,"// To print stack traces when caching errors are detected",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:128,Modifiability,variab,variable,128,"// Internal helper RooAbsFunc that evaluates the scaled data-weighted average of; // given RooAbsReal as a function of a single variable using the RooFit::Evaluator.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:98,Modifiability,variab,variable,98,"////////////////////////////////////////////////////////////////////////////////; /// Return this variable's title string. If appendUnit is true and; /// this variable has units, also append a string "" (<unit>)"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:159,Modifiability,variab,variable,159,"////////////////////////////////////////////////////////////////////////////////; /// Return this variable's title string. If appendUnit is true and; /// this variable has units, also append a string "" (<unit>)"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Performance,cache,cache,117,"////////////////////////////////////////////////////////////////////////////////; /// Return value of object. If the cache is clean, return the; /// cached value, otherwise recalculate on the fly and refill; /// the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:149,Performance,cache,cached,149,"////////////////////////////////////////////////////////////////////////////////; /// Return value of object. If the cache is clean, return the; /// cached value, otherwise recalculate on the fly and refill; /// the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:216,Performance,cache,cache,216,"////////////////////////////////////////////////////////////////////////////////; /// Return value of object. If the cache is clean, return the; /// cached value, otherwise recalculate on the fly and refill; /// the cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Usability,clear,clearValueDirty,3,"// clearValueDirty() ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:126,Availability,error,error,126,"////////////////////////////////////////////////////////////////////////////////; /// Calculate current value of object, with error tracing wrapper",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:140,Integrability,wrap,wrapper,140,"////////////////////////////////////////////////////////////////////////////////; /// Calculate current value of object, with error tracing wrapper",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:438,Energy Efficiency,efficient,efficient,438,"////////////////////////////////////////////////////////////////////////////////; /// Variant of getAnalyticalIntegral that is also passed the normalization set; /// that should be applied to the integrand of which the integral is requested.; /// For certain operator p.d.f it is useful to overload this function rather; /// than analyticalIntegralWN() as the additional normalization information; /// may be useful in determining a more efficient decomposition of the; /// requested integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:240,Deployability,integrat,integration,240,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:346,Deployability,integrat,integrate,346,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:423,Deployability,integrat,integration,423,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:435,Deployability,configurat,configuration,435,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:456,Deployability,integrat,integration,456,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:219,Integrability,depend,dependents,219,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:240,Integrability,integrat,integration,240,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:310,Integrability,depend,dependents,310,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:346,Integrability,integrat,integrate,346,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:423,Integrability,integrat,integration,423,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:456,Integrability,integrat,integration,456,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:435,Modifiability,config,configuration,435,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:480,Performance,perform,performed,480,"////////////////////////////////////////////////////////////////////////////////; /// Interface function getAnalyticalIntergral advertises the; /// analytical integrals that are supported. 'integSet'; /// is the set of dependents for which integration is requested. The; /// function should copy the subset of dependents it can analytically; /// integrate to anaIntSet and return a unique identification code for; /// this integration configuration. If no integration can be; /// performed, zero should be returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:120,Modifiability,variab,variable,120,"////////////////////////////////////////////////////////////////////////////////; /// Get the label associated with the variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Modifiability,variab,variable,121,"////////////////////////////////////////////////////////////////////////////////; /// Set the label associated with this variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:211,Deployability,integrat,integration,211,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:417,Deployability,integrat,integrates,417,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:442,Deployability,integrat,integrates,442,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:564,Deployability,integrat,integrating,564,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1070,Deployability,configurat,configuration,1070,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1100,Deployability,integrat,integration,1100,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1161,Deployability,Integrat,Integrate,1161,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:211,Integrability,integrat,integration,211,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:417,Integrability,integrat,integrates,417,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:442,Integrability,integrat,integrates,442,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:564,Integrability,integrat,integrating,564,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1100,Integrability,integrat,integration,1100,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1161,Integrability,Integrat,Integrate,1161,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:399,Modifiability,variab,variables,399,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1070,Modifiability,config,configuration,1070,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:243,Performance,perform,performed,243,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in `iset`.; /// The actual integration calculation is only performed when the returned object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over.; ///; /// \note The integral over a PDF is usually not normalised (*i.e.*, it is usually not; /// 1 when integrating the PDF over the full range). In fact, this integral is used *to compute*; /// the normalisation of each PDF. See the [rf110 tutorial](group__tutorial__roofit.html); /// for details on PDF normalisation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |--|-------------------------------; /// | `NormSet(const RooArgSet&)` | Specify normalization set, mostly useful when working with PDFs; /// | `NumIntConfig(const RooNumIntConfig&)` | Use given configuration for any numeric integration, if necessary; /// | `Range(const char* name)` | Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:209,Deployability,integrat,integration,209,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:413,Deployability,integrat,integrates,413,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:438,Deployability,integrat,integrates,438,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:714,Deployability,integrat,integrated,714,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:798,Deployability,integrat,integration,798,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:209,Integrability,integrat,integration,209,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:413,Integrability,integrat,integrates,413,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:438,Integrability,integrat,integrates,438,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:714,Integrability,integrat,integrated,714,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:798,Integrability,integrat,integration,798,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:395,Modifiability,variab,variables,395,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:776,Modifiability,config,configure,776,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:241,Performance,perform,performed,241,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:627,Performance,perform,performed,627,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:675,Performance,perform,performed,675,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:876,Performance,perform,performed,876,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the integral of the function over one or more observables listed in iset.; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. If nset is specified the integrand is request; /// to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified; /// the integral is performed over the named range, otherwise it is performed over the domain of each; /// integrated observable. If cfg is specified it will be used to configure any numeric integration; /// aspect of the integral. It will not force the integral to be performed numerically, which is; /// decided automatically by RooRealIntegral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Usability,Simpl,Simple,3,"// Simple case: integral over full range or single limited range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:20,Modifiability,variab,variables,20,"// Initialize local variables perparing for recursive loop",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:29,Deployability,integrat,integration,29,"// Handle trivial case of no integration here explicitly",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:29,Integrability,integrat,integration,29,"// Handle trivial case of no integration here explicitly",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:11,Deployability,integrat,integration,11,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:38,Deployability,integrat,integration,38,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:11,Integrability,integrat,integration,11,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:38,Integrability,integrat,integration,38,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:50,Modifiability,variab,variables,50,"// Process integration over remaining integration variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:47,Deployability,integrat,integrated,47,"// Find largest set of observables that can be integrated in one go",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:47,Integrability,integrat,integrated,47,"// Find largest set of observables that can be integrated in one go",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,Availability,error,error,107,"// If largest set of observables that can be integrated is empty set, problem was ill defined; // Postpone error messaging and handling to end of function, exit loop here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:45,Deployability,integrat,integrated,45,"// If largest set of observables that can be integrated is empty set, problem was ill defined; // Postpone error messaging and handling to end of function, exit loop here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:45,Integrability,integrat,integrated,45,"// If largest set of observables that can be integrated is empty set, problem was ill defined; // Postpone error messaging and handling to end of function, exit loop here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Deployability,integrat,integrated,18,"// Remove already integrated observables from to-do list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Integrability,integrat,integrated,18,"// Remove already integrated observables from to-do list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:13,Integrability,message,message,13,"// Send info message on recursion if needed",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:47,Deployability,integrat,integrate,47,"// Prepare for recursion, next integral should integrate last integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:47,Integrability,integrat,integrate,47,"// Prepare for recursion, next integral should integrate last integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:44,Deployability,integrat,integration,44,"// Only need normalization set in innermost integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:44,Integrability,integrat,integration,44,"// Only need normalization set in innermost integration",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:37,Performance,cache,cache,37,"// After-burner: apply interpolating cache on (numeric) integral if requested by user",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2,Performance,cache,cachedIntegral,2,"//cachedIntegral->disableCache(true) ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:303,Deployability,integrat,integration,303,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:380,Deployability,integrat,integrated,380,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:583,Deployability,integrat,integrated,583,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:303,Integrability,integrat,integration,303,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:380,Integrability,integrat,integrated,380,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:545,Integrability,depend,depend,545,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:583,Integrability,integrat,integrated,583,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:223,Modifiability,parameteriz,parameterized,223,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:487,Modifiability,parameteriz,parameterized,487,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:519,Modifiability,parameteriz,parameterization,519,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createIntObj() that aids in the construct of recursive integrals; /// over functions with multiple observables with parameterized ranges. This function; /// finds in a given set allObs over which integration is requested the largeset subset; /// of observables that can be integrated simultaneously. This subset consists of; /// observables with fixed ranges and observables with parameterized ranges whose; /// parameterization does not depend on any observable that is also integrated.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Deployability,integrat,integrated,24,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:73,Deployability,integrat,integrated,73,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:141,Deployability,integrat,integrated,141,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:171,Deployability,integrat,integrated,171,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:244,Deployability,integrat,integrated,244,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Integrability,integrat,integrated,24,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:73,Integrability,integrat,integrated,73,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:122,Integrability,depend,depending,122,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:141,Integrability,integrat,integrated,141,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:171,Integrability,integrat,integrated,171,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:244,Integrability,integrat,integrated,244,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:101,Modifiability,parameteriz,parameterized,101,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:220,Modifiability,parameteriz,parameterized,220,"// Make lists of; // a) integrated observables with fixed ranges,; // b) integrated observables with parameterized ranges depending on other integrated observables; // c) integrated observables used in definition of any parameterized ranges of integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:17,Deployability,integrat,integrated,17,"// Loop over all integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:17,Integrability,integrat,integrated,17,"// Loop over all integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:21,Modifiability,parameteriz,parameterized,21,"// Check if range is parameterized",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,Deployability,integrat,integrated,52,"// Check if range parameterization depends on other integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:35,Integrability,depend,depends,35,"// Check if range parameterization depends on other integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,Integrability,integrat,integrated,52,"// Check if range parameterization depends on other integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Modifiability,parameteriz,parameterization,18,"// Check if range parameterization depends on other integrated observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:71,Modifiability,parameteriz,parameterization,71,"// Make list of fixed-range observables that are _not_ involved in the parameterization of ranges of other observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:71,Modifiability,parameteriz,parameterization,71,"// Make list of param-range observables that are _not_ involved in the parameterization of ranges of other observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Deployability,integrat,integration,24,"// Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Integrability,integrat,integration,24,"// Construct inner-most integration: over observables (with fixed or param range) not used in any other param range definitions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:172,Deployability,integrat,integrated,172,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix name to give to integral object that encodes; /// integrated observables, normalization observables and the integration range name",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:230,Deployability,integrat,integration,230,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix name to give to integral object that encodes; /// integrated observables, normalization observables and the integration range name",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:172,Integrability,integrat,integrated,172,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix name to give to integral object that encodes; /// integrated observables, normalization observables and the integration range name",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:230,Integrability,integrat,integration,230,"////////////////////////////////////////////////////////////////////////////////; /// Construct string with unique suffix name to give to integral object that encodes; /// integrated observables, normalization observables and the integration range name",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1247,Availability,error,error,1247,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1077,Deployability,integrat,integrated,1077,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:594,Integrability,depend,dependentVars,594,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:608,Integrability,Depend,Dependent,608,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1077,Integrability,integrat,integrated,1077,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1133,Integrability,depend,dependentVars,1133,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:547,Modifiability,variab,variables,547,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:618,Modifiability,variab,variables,618,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:698,Modifiability,Variab,Variables,698,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that creates a projection of a function or p.d.f; /// to be plotted on a RooPlot.; /// \anchor createPlotProjAnchor; ///; /// Create a new object \f$ G \f$ that represents the normalized projection:; /// \f[; /// G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; /// {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; /// \f]; /// where \f$ F[x,y,p] \f$ is the function we represent, and; /// \f$ \{ p \} \f$ are the remaining variables (""parameters"").; ///; /// \param[in] dependentVars Dependent variables over which to normalise, \f$ \{x\} \f$.; /// \param[in] projectedVars Variables to project out, \f$ \{ y \} \f$.; /// \param[out] cloneSet Will be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object.; /// The latter will also be returned. The caller takes ownership of this set.; /// \param[in] rangeName Optional range for projection integrals; /// \param[in] condObs Conditional observables, which are not integrated for normalisation, even if they; /// are in `dependentVars` or `projectedVars`.; /// \return A pointer to the newly created object, or zero in case of an; /// error. The caller is responsible for deleting the `cloneSet` (which includes the returned projection object).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Integrability,depend,dependents,18,"// Check that the dependents are all fundamental. Filter out any that we; // do not depend on, and make substitutions by name in our leaf list.; // Check for overlaps with the projection variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:84,Integrability,depend,depend,84,"// Check that the dependents are all fundamental. Filter out any that we; // do not depend on, and make substitutions by name in our leaf list.; // Check for overlaps with the projection variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:187,Modifiability,variab,variables,187,"// Check that the dependents are all fundamental. Filter out any that we; // do not depend on, and make substitutions by name in our leaf list.; // Check for overlaps with the projection variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:14,Integrability,depend,dependents,14,"// Remove any dependents of found, replace by dependents of LV node",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:46,Integrability,depend,dependents,46,"// Remove any dependents of found, replace by dependents of LV node",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Modifiability,variab,variables,24,"// Remove the projected variables from the list of leaf nodes, if necessary.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:125,Deployability,Patch,Patch,125,"// The remaining entries in our list of leaf nodes are the external; // dependents (x) and parameters (p) of the projection. Patch them back; // into the theClone. This orphans the nodes they replace, but the orphans; // are still in the cloneList and so will be cleaned up eventually.; //cout << ""redirection leafNodes : "" ; leafNodes.Print(""1"") ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:72,Integrability,depend,dependents,72,"// The remaining entries in our list of leaf nodes are the external; // dependents (x) and parameters (p) of the projection. Patch them back; // into the theClone. This orphans the nodes they replace, but the orphans; // are still in the cloneList and so will be cleaned up eventually.; //cout << ""redirection leafNodes : "" ; leafNodes.Print(""1"") ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:35,Modifiability,variab,variables,35,"// Create the set of normalization variables to use in the projection integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:154,Integrability,depend,dependents,154,"// Try to create a valid projection integral. If no variables are to be projected,; // create a null projection anyway to bind our normalization over the dependents; // consistently with the way they would be bound with a non-trivial projection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,Modifiability,variab,variables,52,"// Try to create a valid projection integral. If no variables are to be projected,; // create a null projection anyway to bind our normalization over the dependents; // consistently with the way they would be bound with a non-trivial projection.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:384,Availability,error,error,384,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:219,Deployability,integrat,integrating,219,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:219,Integrability,integrat,integrating,219,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:239,Modifiability,variab,variables,239,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:484,Modifiability,Variab,Variables,484,"////////////////////////////////////////////////////////////////////////////////; /// Fill the ROOT histogram 'hist' with values sampled from this; /// function at the bin centers. Our value is calculated by first; /// integrating out any variables in projectedVars and then scaling; /// the result by scaleFactor. Returns a pointer to the input; /// histogram, or zero in case of an error. The input histogram can; /// be any TH1 subclass, and therefore of arbitrary; /// dimension. Variables are matched with the (x,y,...) dimensions of; /// the input histogram according to the order in which they appear; /// in the input plotVars list. If scaleForDensity is true the; /// histogram is filled with a the functions density rather than; /// the functions value (i.e. the value at the bin center is multiplied; /// with bin volume)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Integrability,depend,depend,110,"// Check that the plot variables are all actually RooRealVars and print a warning if we do not; // explicitly depend on one of them. Fill a set (not list!) of cloned plot variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:23,Modifiability,variab,variables,23,"// Check that the plot variables are all actually RooRealVars and print a warning if we do not; // explicitly depend on one of them. Fill a set (not list!) of cloned plot variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:171,Modifiability,variab,variables,171,"// Check that the plot variables are all actually RooRealVars and print a warning if we do not; // explicitly depend on one of them. Fill a set (not list!) of cloned plot variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:97,Modifiability,parameteriz,parameterized,97,"// Reconnect all plotClones to each other, imported when plotting N-dim integrals with entangled parameterized ranges",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:423,Availability,error,error,423,"////////////////////////////////////////////////////////////////////////////////; /// Fill a RooDataHist with values sampled from this function at the; /// bin centers. If extendedMode is true, the p.d.f. values is multiplied; /// by the number of expected events in each bin; ///; /// An optional scaling by a given scaleFactor can be performed.; /// Returns a pointer to the input RooDataHist, or zero; /// in case of an error.; ///; /// If correctForBinSize is true the RooDataHist; /// is filled with the functions density (function value times the; /// bin volume) rather than function value.; ///; /// If showProgress is true; /// a process indicator is printed on stdout in steps of one percent,; /// which is mostly useful for the sampling of expensive functions; /// such as likelihoods",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:172,Modifiability,extend,extendedMode,172,"////////////////////////////////////////////////////////////////////////////////; /// Fill a RooDataHist with values sampled from this function at the; /// bin centers. If extendedMode is true, the p.d.f. values is multiplied; /// by the number of expected events in each bin; ///; /// An optional scaling by a given scaleFactor can be performed.; /// Returns a pointer to the input RooDataHist, or zero; /// in case of an error.; ///; /// If correctForBinSize is true the RooDataHist; /// is filled with the functions density (function value times the; /// bin volume) rather than function value.; ///; /// If showProgress is true; /// a process indicator is printed on stdout in steps of one percent,; /// which is mostly useful for the sampling of expensive functions; /// such as likelihoods",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:336,Performance,perform,performed,336,"////////////////////////////////////////////////////////////////////////////////; /// Fill a RooDataHist with values sampled from this function at the; /// bin centers. If extendedMode is true, the p.d.f. values is multiplied; /// by the number of expected events in each bin; ///; /// An optional scaling by a given scaleFactor can be performed.; /// Returns a pointer to the input RooDataHist, or zero; /// in case of an error.; ///; /// If correctForBinSize is true the RooDataHist; /// is filled with the functions density (function value times the; /// bin volume) rather than function value.; ///; /// If showProgress is true; /// a process indicator is printed on stdout in steps of one percent,; /// which is mostly useful for the sampling of expensive functions; /// such as likelihoods",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:176,Modifiability,variab,variables,176,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names.; /// \param[in] varNameList List of variables to use for x, y, z axis, separated by ':'; /// \param[in] xbins Number of bins for first variable; /// \param[in] ybins Number of bins for second variable; /// \param[in] zbins Number of bins for third variable; /// \return TH1*, which is one of TH[1-3]. The histogram is owned by the caller.; ///; /// For a greater degree of control use; /// RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:240,Modifiability,variab,variables,240,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names.; /// \param[in] varNameList List of variables to use for x, y, z axis, separated by ':'; /// \param[in] xbins Number of bins for first variable; /// \param[in] ybins Number of bins for second variable; /// \param[in] zbins Number of bins for third variable; /// \return TH1*, which is one of TH[1-3]. The histogram is owned by the caller.; ///; /// For a greater degree of control use; /// RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:339,Modifiability,variab,variable,339,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names.; /// \param[in] varNameList List of variables to use for x, y, z axis, separated by ':'; /// \param[in] xbins Number of bins for first variable; /// \param[in] ybins Number of bins for second variable; /// \param[in] zbins Number of bins for third variable; /// \return TH1*, which is one of TH[1-3]. The histogram is owned by the caller.; ///; /// For a greater degree of control use; /// RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:396,Modifiability,variab,variable,396,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names.; /// \param[in] varNameList List of variables to use for x, y, z axis, separated by ':'; /// \param[in] xbins Number of bins for first variable; /// \param[in] ybins Number of bins for second variable; /// \param[in] zbins Number of bins for third variable; /// \return TH1*, which is one of TH[1-3]. The histogram is owned by the caller.; ///; /// For a greater degree of control use; /// RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:452,Modifiability,variab,variable,452,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names.; /// \param[in] varNameList List of variables to use for x, y, z axis, separated by ':'; /// \param[in] xbins Number of bins for first variable; /// \param[in] ybins Number of bins for second variable; /// \param[in] zbins Number of bins for third variable; /// \return TH1*, which is one of TH[1-3]. The histogram is owned by the caller.; ///; /// For a greater degree of control use; /// RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1323,Modifiability,Extend,Extended,1323,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function.; ///; /// \param[in] name Name of the ROOT histogram; /// \param[in] xvar Observable to be std::mapped on x axis of ROOT histogram; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8 Arguments according to list below; /// \return TH1 *, one of TH{1,2,3}. The caller takes ownership.; ///; /// <table>; /// <tr><th><th> Effect on histogram creation; /// <tr><td> `IntrinsicBinning()` <td> Apply binning defined by function or pdf (as advertised via binBoundaries() method); /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, [double lo, double hi])` <td> Apply specified binning to x axis of histogram; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalise PDF over following observables when projecting PDF into histogram.; // Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; /// <tr><td> `Scaling(bool)` <td> Apply density-correction scaling (multiply by bin volume), default is true; /// <tr><td> `Extended(bool)` <td> Plot event yield instead of probability density (for extended pdfs only); ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be std::mapped on y axis of ROOT histogram.; /// The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g.; /// ```; /// createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); /// ```; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be std::mapped on z axis of ROOT histogram; /// </table>; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1397,Modifiability,extend,extended,1397,"////////////////////////////////////////////////////////////////////////////////; /// Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function.; ///; /// \param[in] name Name of the ROOT histogram; /// \param[in] xvar Observable to be std::mapped on x axis of ROOT histogram; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8 Arguments according to list below; /// \return TH1 *, one of TH{1,2,3}. The caller takes ownership.; ///; /// <table>; /// <tr><th><th> Effect on histogram creation; /// <tr><td> `IntrinsicBinning()` <td> Apply binning defined by function or pdf (as advertised via binBoundaries() method); /// <tr><td> `Binning(const char* name)` <td> Apply binning with given name to x axis of histogram; /// <tr><td> `Binning(RooAbsBinning& binning)` <td> Apply specified binning to x axis of histogram; /// <tr><td> `Binning(int nbins, [double lo, double hi])` <td> Apply specified binning to x axis of histogram; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Do not normalise PDF over following observables when projecting PDF into histogram.; // Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; /// <tr><td> `Scaling(bool)` <td> Apply density-correction scaling (multiply by bin volume), default is true; /// <tr><td> `Extended(bool)` <td> Plot event yield instead of probability density (for extended pdfs only); ///; /// <tr><td> `YVar(const RooAbsRealLValue& var,...)` <td> Observable to be std::mapped on y axis of ROOT histogram.; /// The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g.; /// ```; /// createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); /// ```; /// <tr><td> `ZVar(const RooAbsRealLValue& var,...)` <td> Observable to be std::mapped on z axis of ROOT histogram; /// </table>; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:68,Modifiability,extend,extended,68,"// If doExtended is two, selection is automatic, set to 1 of pdf is extended, to zero otherwise",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:238,Integrability,depend,depend,238,"////////////////////////////////////////////////////////////////////////////////; /// Helper function for plotting of composite p.d.fs. Given; /// a set of selected components that should be plotted,; /// find all nodes that (in)directly depend on these selected; /// nodes. Mark all directly and indirectly selected nodes; /// as 'selected' using the selectComp() method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:22,Integrability,depend,depend,22,"// Add all nodes that depend on selected nodes by value",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3325,Availability,error,errors,3325,"n _technique_ (integration). For observables present in given dataset; /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-stat",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3434,Availability,error,error,3434," /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projecti",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3519,Availability,error,error,3519,"; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projection. Category must have two states with indices -1 and +1 or three states with; /// indices -1,0 and +1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3666,Availability,error,errors,3666,"onst RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projection. Category must have two states with indices -1 and +1 or three states with; /// indices -1,0 and +1.; ///; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero. Mostly us",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:6324,Availability,down,downward,6324,"Currently supported options are ""F"" (fill), ""L"" (line), and ""P"" (points).; /// \note Option ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets.; ///; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; ///; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; ///; /// <tr><td> `LineWidth(Int_t width)` <td> Select line with in pixels, default is 3; ///; /// <tr><td> `MarkerStyle(Int_t style)` <td> Select the ROOT marker style, default is 21; ///; /// <tr><td> `MarkerColor(Int_t color)` <td> Select the ROOT marker color, default is black; ///; /// <tr><td> `MarkerSize(double size)` <td> Select the ROOT marker size; ///; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected, also use VLines(); /// to add vertical downward lines at end of curve to ensure proper closure. Add `DrawOption(""F"")` for filled drawing.; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; ///; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name; ///; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; ///; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; ///; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; /// will result in more and more densely spaced curve points; ///; /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may n",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:7861,Availability,error,error,7861,"lect the ROOT marker color, default is black; ///; /// <tr><td> `MarkerSize(double size)` <td> Select the ROOT marker size; ///; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected, also use VLines(); /// to add vertical downward lines at end of curve to ensure proper closure. Add `DrawOption(""F"")` for filled drawing.; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; ///; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name; ///; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; ///; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; ///; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; /// will result in more and more densely spaced curve points; ///; /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma'; /// </table>; ///; /// Details on error band visualization; /// -----------------------------------; /// *VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter:*; /// \see plotOnWithErrorBand()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:557,Deployability,integrat,integrated,557,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1129,Deployability,integrat,integrating,1129," plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by p",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1498,Deployability,integrat,integrating,1498,"ted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting over observables; /// given in the set, ignoring the default projection behavior. Advanced use only.; ///; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables present in given dataset; /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2346,Deployability,integrat,integration,2346,"e.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting over observables; /// given in the set, ignoring the default projection behavior. Advanced use only.; ///; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables present in given dataset; /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control numbe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:557,Integrability,integrat,integrated,557,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:783,Integrability,message,message,783,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1129,Integrability,integrat,integrating,1129," plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by p",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1498,Integrability,integrat,integrating,1498,"ted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting over observables; /// given in the set, ignoring the default projection behavior. Advanced use only.; ///; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables present in given dataset; /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2346,Integrability,integrat,integration,2346,"e.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});; /// ```; ///; /// <tr><td> `Project(const RooArgSet& set)` <td> Override default projection behaviour by projecting over observables; /// given in the set, ignoring the default projection behavior. Advanced use only.; ///; /// <tr><td> `ProjWData(const RooAbsData& d)` <td> Override default projection _technique_ (integration). For observables present in given dataset; /// projection of PDF is achieved by constructing an average over all observable values in given set.; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control numbe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3538,Integrability,message,messages,3538,"; /// Consult RooFit plotting tutorial for further explanation of meaning & use of this technique; ///; /// <tr><td> `ProjWData(const RooArgSet& s, const RooAbsData& d)` <td> As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; ///; /// <tr><td> `ProjectionRange(const char* rn)` <td> Override default range of projection integrals to a different range specified by given range name.; /// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projection. Category must have two states with indices -1 and +1 or three states with; /// indices -1,0 and +1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3885,Integrability,depend,depends,3885,"// This technique allows you to project a finite width slice in a real-valued observable; ///; /// <tr><td> `NumCPU(Int_t ncpu)` <td> Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData); ///; ///; /// <tr><th><th> Misc content control; /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per curve. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; ///; /// <tr><td> `EvalErrorValue(double value)` <td> Set curve points at which (pdf) evaluation errors occur to specified value. By default the; /// function value is plotted.; ///; /// <tr><td> `Normalization(double scale, ScaleType code)` <td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projection. Category must have two states with indices -1 and +1 or three states with; /// indices -1,0 and +1.; ///; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \f$ -\log(L) \f$ or \f$ \chi^2 \f$ distributions; ///; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Add constructed projection to already existing curve with given name and relative weight factors; /// <tr><td> `Components(const char* names)` <td> When plo",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:219,Modifiability,variab,variable,219,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:577,Modifiability,variab,variables,577,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:845,Performance,perform,performed,845,"////////////////////////////////////////////////////////////////////////////////; /// Plot (project) PDF on specified frame. If a PDF is plotted in an empty frame, it; /// will show a unit normalized curve in the frame variable, taken at the present value; /// of other observables defined for this PDF.; ///; /// \param[in] frame pointer to RooPlot; /// \param[in] arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10 Ordered arguments; ///; /// If a PDF is plotted in a frame in which a dataset has already been plotted, it will; /// show a projected curve integrated over all variables that were present in the shown; /// dataset except for the one on the x-axis. The normalization of the curve will also; /// be adjusted to the event count of the plotted dataset. An informational message; /// will be printed for each projection step that is performed.; ///; /// This function takes the following named arguments; /// <table>; /// <tr><th><th> Projection control; /// <tr><td> `Slice(const RooArgSet& set)` <td> Override default projection behaviour by omitting observables listed; /// in set from the projection, i.e. by not integrating over these.; /// Slicing is usually only sensible in discrete observables, by e.g. creating a slice; /// of the PDF at the current value of the category observable.; ///; /// <tr><td> `Slice(RooCategory& cat, const char* label)` <td> Override default projection behaviour by omitting the specified category; /// observable from the projection, i.e., by not integrating over all states of this category.; /// The slice is positioned at the given label value. To pass multiple Slice() commands, please use the; /// Slice(std::map<RooCategory*, std::string> const&) argument explained below.; ///; /// <tr><td> `Slice(std::map<RooCategory*, std::string> const&)` <td> Omits multiple categories from the projection, as explianed above.; /// Can be used with initializer lists for convenience, e.g.; /// ```{.cpp}; /// pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:7500,Performance,perform,perform,7500,"lect the ROOT marker color, default is black; ///; /// <tr><td> `MarkerSize(double size)` <td> Select the ROOT marker size; ///; /// <tr><td> `FillStyle(Int_t style)` <td> Select fill style, default is not filled. If a filled style is selected, also use VLines(); /// to add vertical downward lines at end of curve to ensure proper closure. Add `DrawOption(""F"")` for filled drawing.; /// <tr><td> `FillColor(Int_t color)` <td> Select fill color by ROOT color code; ///; /// <tr><td> `Range(const char* name)` <td> Only draw curve in range defined by given name; ///; /// <tr><td> `Range(double lo, double hi)` <td> Only draw curve in specified range; ///; /// <tr><td> `VLines()` <td> Add vertical lines to y=0 at end points of curve; ///; /// <tr><td> `Precision(double eps)` <td> Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; /// will result in more and more densely spaced curve points; ///; /// <tr><td> `Invisible(bool flag)` <td> Add curve to frame, but do not display. Useful in combination AddTo(); ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate; ///; /// <tr><td> `VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true)`; /// <td> Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma'; /// </table>; ///; /// Details on error band visualization; /// -----------------------------------; /// *VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter:*; /// \see plotOnWithErrorBand()",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:4658,Testability,log,log,4658,"<td> Adjust normalization by given scale factor. Interpretation of number depends on code:; /// - Relative: relative adjustment factor for a normalized function,; /// - NumEvent: scale to match given number of events.; /// - Raw: relative adjustment factor for an un-normalized function.; ///; /// <tr><td> `Name(const chat* name)` <td> Give curve specified name in frame. Useful if curve is to be referenced later; ///; /// <tr><td> `Asymmetry(const RooCategory& c)` <td> Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; /// the PDF projection. Category must have two states with indices -1 and +1 or three states with; /// indices -1,0 and +1.; ///; /// <tr><td> `ShiftToZero(bool flag)` <td> Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \f$ -\log(L) \f$ or \f$ \chi^2 \f$ distributions; ///; /// <tr><td> `AddTo(const char* name, double_t wgtSelf, double_t wgtOther)` <td> Add constructed projection to already existing curve with given name and relative weight factors; /// <tr><td> `Components(const char* names)` <td> When plotting sums of PDFs, plot only the named components (*e.g.* only; /// the signal of a signal+background model).; /// <tr><td> `Components(const RooArgSet& compSet)` <td> As above, but pass a RooArgSet of the components themselves.; ///; /// <tr><th><th> Plotting control; /// <tr><td> `DrawOption(const char* opt)` <td> Select ROOT draw option for resulting TGraph object. Currently supported options are ""F"" (fill), ""L"" (line), and ""P"" (points).; /// \note Option ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets.; ///; /// <tr><td> `LineStyle(Int_t style)` <td> Select line style by ROOT line style code, default is solid; ///; /// <tr><td> `LineColor(Int_t color)` <td> Select line color by ROOT color code, default is blue; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:198,Availability,ERROR,ERROR,198,"// This dummy is needed for plotOn to recognize the ""SliceCatMany"" command.; // It is not used directly, but the ""SliceCat"" commands are nested in it.; // Removing this dummy definition results in ""ERROR: unrecognized command: SliceCatMany"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:6,Modifiability,Extend,ExtendedWings,6,"// 2==ExtendedWings",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:23,Modifiability,variab,variables,23,"// Take out the sliced variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:521,Availability,error,errors,521,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:233,Deployability,integrat,integration,233,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:233,Integrability,integrat,integration,233,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:451,Integrability,depend,dependents,451,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:917,Integrability,depend,dependents,917,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:280,Performance,perform,performed,280,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:330,Performance,perform,performed,330,"/// Plotting engine function for internal use; ///; /// Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted; /// function that occur in the previously plotted dataset are projected via partial integration,; /// otherwise no projections are performed. Optionally, certain projections can be performed; /// by summing over the values present in a provided dataset ('projData'), to correctly; /// project out data dependents that are not properly described by the PDF (e.g. per-event errors).; ///; /// The functions value can be multiplied with an optional scale factor. The interpretation; /// of the scale factor is unique for generic real functions, for PDFs there are various interpretations; /// possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; ///; /// The default projection behaviour can be overridden by supplying an optional set of dependents; /// to project via RooFit command arguments.; //_____________________________________________________________________________; // coverity[PASS_BY_VALUE]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Safety,Sanity check,Sanity checks,3,"// Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:16,Modifiability,variab,variables,16,"// Make list of variables to be projected",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:31,Modifiability,variab,variables,31,"// Print list of non-projected variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:27,Integrability,depend,dependents,27,"// Take out data-projected dependents from projectedVars",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:16,Modifiability,variab,variable,16,"// Get the plot variable and remember its original value",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:37,Integrability,depend,dependents,37,"// Now that we have the final set of dependents, call checkObservables(); // WVE take out conditional observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,Energy Efficiency,reduce,reduced,52,"// If data set contains more rows than needed, make reduced copy first",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,Modifiability,variab,variables,36,"// Determine if there are any slice variables in the projection set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Modifiability,variab,variable,18,"// reset the plot variable value to not disturb the original state",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:400,Deployability,integrat,integration,400,"// Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); //; // Plot asymmetry of ourselves, defined as; //; // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); //; // on frame. If frame contains a histogram, all dimensions of the plotted; // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; // Otherwise no projections are performed,; //; // The asymmetry function can be multiplied with an optional scale factor. The default projection; // behaviour can be overridden by supplying an optional set of dependents to project.; // Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:400,Integrability,integrat,integration,400,"// Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); //; // Plot asymmetry of ourselves, defined as; //; // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); //; // on frame. If frame contains a histogram, all dimensions of the plotted; // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; // Otherwise no projections are performed,; //; // The asymmetry function can be multiplied with an optional scale factor. The default projection; // behaviour can be overridden by supplying an optional set of dependents to project.; // Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:624,Integrability,depend,dependents,624,"// Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); //; // Plot asymmetry of ourselves, defined as; //; // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); //; // on frame. If frame contains a histogram, all dimensions of the plotted; // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; // Otherwise no projections are performed,; //; // The asymmetry function can be multiplied with an optional scale factor. The default projection; // behaviour can be overridden by supplying an optional set of dependents to project.; // Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:446,Performance,perform,performed,446,"// Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); //; // Plot asymmetry of ourselves, defined as; //; // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); //; // on frame. If frame contains a histogram, all dimensions of the plotted; // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; // Otherwise no projections are performed,; //; // The asymmetry function can be multiplied with an optional scale factor. The default projection; // behaviour can be overridden by supplying an optional set of dependents to project.; // Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:651,Safety,Sanity check,Sanity checks,651,"// Plotting engine for asymmetries. Implements the functionality if plotOn(frame,Asymmetry(...))); //; // Plot asymmetry of ourselves, defined as; //; // asym = f(asymCat=-1) - f(asymCat=+1) / ( f(asymCat=-1) + f(asymCat=+1) ); //; // on frame. If frame contains a histogram, all dimensions of the plotted; // asymmetry function that occur in the previously plotted dataset are projected via partial integration.; // Otherwise no projections are performed,; //; // The asymmetry function can be multiplied with an optional scale factor. The default projection; // behaviour can be overridden by supplying an optional set of dependents to project.; // Sanity checks",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:8,Integrability,depend,depend,8,"// Must depend on asymCat",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:16,Modifiability,variab,variables,16,"// Make list of variables to be projected",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:31,Modifiability,variab,variables,31,"// Print list of non-projected variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:27,Integrability,depend,dependens,27,"// Take out data-projected dependens from projectedVars",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Modifiability,variab,variable,18,"// Clone the plot variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:34,Integrability,depend,dependents,34,"// Add projDataVars to normalized dependents of projection; // This is needed only for asymmetries (why?)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:52,Energy Efficiency,reduce,reduced,52,"// If data set contains more rows than needed, make reduced copy first",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,Modifiability,variab,variables,36,"// Determine if there are any slice variables in the projection set",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Availability,error,error,121,"// If this RooAbsReal is a RooRealVar in the fit result, we don't need to; // propagate anything and can just return the error in the fit result",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:34,Availability,error,error,34,"// Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:68,Integrability,depend,depend,68,"// Ignore parameters in the fit result that this RooAbsReal doesn't depend on",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:450,Availability,error,error,450,"// Re-evaluate this RooAbsReal with the central parameters just to be; // extra-safe that a call to `getPropagatedError()` doesn't change any state.; // It should not be necessary because thanks to the dirty flag propagation; // the RooAbsReal is re-evaluated anyway the next time getVal() is called.; // Still there are imaginable corner cases where it would not be triggered,; // for example if the user changes the RooFit operation more after the error; // propagation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:80,Safety,safe,safe,80,"// Re-evaluate this RooAbsReal with the central parameters just to be; // extra-safe that a call to `getPropagatedError()` doesn't change any state.; // It should not be necessary because thanks to the dirty flag propagation; // the RooAbsReal is re-evaluated anyway the next time getVal() is called.; // Still there are imaginable corner cases where it would not be triggered,; // for example if the user changes the RooFit operation more after the error; // propagation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:13,Availability,error,error,13,"// Calculate error in linear approximation from variations and correlation coefficient",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:286,Availability,error,errors,286,"////////////////////////////////////////////////////////////////////////////////; /// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:368,Availability,error,error,368,"////////////////////////////////////////////////////////////////////////////////; /// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:472,Availability,error,error,472,"////////////////////////////////////////////////////////////////////////////////; /// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:654,Availability,error,error,654,"////////////////////////////////////////////////////////////////////////////////; /// Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:781,Availability,error,error,781,"ion or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minim",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:835,Availability,error,error,835,"ion or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr.; /// \param[in] frame RooPlot to plot on; /// \param[in] fr The RooFitResult, where errors can be extracted; /// \param[in] Z The desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minim",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1530,Availability,robust,robust,1530,"desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); /// longer to calculate.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1537,Availability,error,error,1537,"desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); /// longer to calculate.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1791,Availability,error,error,1791,"desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); /// longer to calculate.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2231,Performance,perform,perform,2231,"desired significance (width) of the error band; /// \param[in] params If non-zero, consider only the subset of the parameters in fr for the error evaluation; /// \param[in] argList Optional `RooCmdArg` that can be applied to a regular plotOn() operation; /// \param[in] linMethod By default (linMethod=true), a linearized error is shown.; /// \return The RooPlot the band was plotted on (for chaining of plotting commands).; ///; /// The linearized error is calculated as follows:; /// \f[; /// \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; /// \f]; ///; /// where; /// \f[; /// F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; /// \f]; /// with \f$ f(x) \f$ the plotted curve and \f$ \mathrm{d}a \f$ taken from the fit result, and; /// \f$ \mathrm{Corr}(a,a') \f$ = the correlation matrix from the fit result, and \f$ Z \f$ = requested signifance (\f$ Z \sigma \f$ band); ///; /// The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may; /// not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; ///; /// Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves; /// is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed; /// from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations; /// for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such; /// that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111); /// Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much); /// longer to calculate.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Availability,error,errorParams,18,"// clear and fill errorParams only with parameters that both in params and cloneParams",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Usability,clear,clear,3,"// clear and fill errorParams only with parameters that both in params and cloneParams",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:58,Availability,down,down,58,"// *** Linear Method ***; //; // Make a one-sigma up- and down fluctation for each parameter and visualize; // a from a linearized calculation as follows; //; // error(x) = F(a) C_aa' F(a'); //; // Where F(a) = (f(x,a+da) - f(x,a-da))/2; // and C_aa' is the correlation matrix; // Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:162,Availability,error,error,162,"// *** Linear Method ***; //; // Make a one-sigma up- and down fluctation for each parameter and visualize; // a from a linearized calculation as follows; //; // error(x) = F(a) C_aa' F(a'); //; // Where F(a) = (f(x,a+da) - f(x,a-da))/2; // and C_aa' is the correlation matrix; // Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:312,Availability,error,error,312,"// *** Linear Method ***; //; // Make a one-sigma up- and down fluctation for each parameter and visualize; // a from a linearized calculation as follows; //; // error(x) = F(a) C_aa' F(a'); //; // Where F(a) = (f(x,a+da) - f(x,a-da))/2; // and C_aa' is the correlation matrix; // Strip out parameters with zero error",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:18,Availability,error,errorParams,18,"// clear and fill errorParams only with parameters that both in params and cloneParams",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Usability,clear,clear,3,"// clear and fill errorParams only with parameters that both in params and cloneParams",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:61,Availability,error,error,61,"// Make list of parameter instances of cloneFunc in order of error matrix",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Availability,error,error,10,"// Insert error band in plot frame",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Performance,perform,perform,117,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:133,Safety,sanity check,sanity check,133,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:165,Safety,safe,safe,165,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,Modifiability,variab,variable,36,"// check that this frame knows what variable to plot",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:23,Modifiability,variab,variable,23,"// check that the plot variable is not derived",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:24,Integrability,depend,depend,24,"// check if we actually depend on the plot variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:43,Modifiability,variab,variable,43,"// check if we actually depend on the plot variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:331,Integrability,depend,depend,331,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that constructs the set of; /// observables to project when plotting ourselves as function of; /// 'plotVar'. 'allVars' is the list of variables that must be; /// projected, but may contain variables that we do not depend on. If; /// 'silent' is cleared, warnings about inconsistent input parameters; /// will be printed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:251,Modifiability,variab,variables,251,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that constructs the set of; /// observables to project when plotting ourselves as function of; /// 'plotVar'. 'allVars' is the list of variables that must be; /// projected, but may contain variables that we do not depend on. If; /// 'silent' is cleared, warnings about inconsistent input parameters; /// will be printed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:306,Modifiability,variab,variables,306,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that constructs the set of; /// observables to project when plotting ourselves as function of; /// 'plotVar'. 'allVars' is the list of variables that must be; /// projected, but may contain variables that we do not depend on. If; /// 'silent' is cleared, warnings about inconsistent input parameters; /// will be printed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:362,Usability,clear,cleared,362,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for plotOn() that constructs the set of; /// observables to project when plotting ourselves as function of; /// 'plotVar'. 'allVars' is the list of variables that must be; /// projected, but may contain variables that we do not depend on. If; /// 'silent' is cleared, warnings about inconsistent input parameters; /// will be printed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:36,Modifiability,variab,variables,36,"// Start out with suggested list of variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:17,Modifiability,variab,variable,17,"// Take out plot variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:20,Integrability,depend,dependents,20,"// Take out all non-dependents of function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:106,Energy Efficiency,adapt,adaptor,106,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:394,Energy Efficiency,adapt,adaptor,394,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:96,Integrability,interface,interface,96,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:106,Modifiability,adapt,adaptor,106,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:153,Modifiability,variab,variables,153,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:394,Modifiability,adapt,adaptor,394,"////////////////////////////////////////////////////////////////////////////////; /// Create an interface adaptor f(vars) that binds us to the specified variables; /// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; /// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; /// current values of x2 and x4. The caller takes ownership of the returned adaptor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:95,Performance,cache,cached,95,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value of another RooAbsArg to our cache.; /// Warning: This function just copies the cached values of source,; /// it is the callers responsibility to make sure the cache is clean.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:136,Performance,cache,cache,136,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value of another RooAbsArg to our cache.; /// Warning: This function just copies the cached values of source,; /// it is the callers responsibility to make sure the cache is clean.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:187,Performance,cache,cached,187,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value of another RooAbsArg to our cache.; /// Warning: This function just copies the cached values of source,; /// it is the callers responsibility to make sure the cache is clean.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:267,Performance,cache,cache,267,"////////////////////////////////////////////////////////////////////////////////; /// Copy the cached value of another RooAbsArg to our cache.; /// Warning: This function just copies the cached values of source,; /// it is the callers responsibility to make sure the cache is clean.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:180,Performance,cache,cache,180,"////////////////////////////////////////////////////////////////////////////////; /// Attach object to a branch of given TTree. By default it will; /// register the internal value cache RooAbsReal::_value as branch; /// buffer for a double tree branch with the same name as this; /// object. If no double branch is found with the name of this; /// object, this method looks for a Float_t Int_t, UChar_t and UInt_t, etc; /// branch. If any of these are found, a TreeReadBuffer; /// that branch is created, and saved in _treeReadBuffer.; /// TreeReadBuffer::operator double() can be used to convert the values.; /// This is used by copyCache().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:114,Deployability,integrat,integration,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric integration configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:126,Deployability,configurat,configuration,126,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric integration configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:114,Integrability,integrat,integration,114,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric integration configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:126,Modifiability,config,configuration,126,"////////////////////////////////////////////////////////////////////////////////; /// Returns the default numeric integration configuration for all RooAbsReals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Deployability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Deployability,configurat,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:197,Deployability,configurat,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Integrability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Modifiability,config,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:197,Modifiability,config,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Deployability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Deployability,configurat,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:197,Deployability,configurat,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:312,Deployability,integrat,integrator,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:328,Deployability,configurat,configuration,328,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:354,Deployability,install,installed,354,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:379,Deployability,configurat,configuration,379,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Integrability,integrat,integrator,110,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:312,Integrability,integrat,integrator,312,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:121,Modifiability,config,configuration,121,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:197,Modifiability,config,configuration,197,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:328,Modifiability,config,configuration,328,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:379,Modifiability,config,configuration,379,"////////////////////////////////////////////////////////////////////////////////; /// Returns the specialized integrator configuration for _this_ RooAbsReal.; /// If this object has no specialized configuration, a null pointer is returned,; /// unless createOnTheFly is true in which case a clone of the default integrator; /// configuration is created, installed as specialized configuration, and returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:105,Deployability,integrat,integration,105,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Deployability,configurat,configuration,117,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:175,Deployability,configurat,configuration,175,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:227,Deployability,configurat,configuration,227,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:281,Deployability,configurat,configuration,281,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:105,Integrability,integrat,integration,105,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Modifiability,config,configuration,117,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:175,Modifiability,config,configuration,175,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:227,Modifiability,config,configuration,227,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:281,Modifiability,config,configuration,281,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:105,Deployability,integrat,integration,105,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Deployability,configurat,configuration,117,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:175,Deployability,configurat,configuration,175,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:227,Deployability,configurat,configuration,227,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:281,Deployability,configurat,configuration,281,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:105,Integrability,integrat,integration,105,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Modifiability,config,configuration,117,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:175,Modifiability,config,configuration,175,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:227,Modifiability,config,configuration,227,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:281,Modifiability,config,configuration,281,"////////////////////////////////////////////////////////////////////////////////; /// Return the numeric integration configuration used for this object. If; /// a specialized configuration was associated with this object, that configuration; /// is returned, otherwise the default configuration for all RooAbsReals is returned",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:100,Deployability,integrat,integrator,100,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:111,Deployability,configurat,configuration,111,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:144,Deployability,integrat,integration,144,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:161,Deployability,configurat,configuration,161,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:100,Integrability,integrat,integrator,100,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:144,Integrability,integrat,integration,144,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:111,Modifiability,config,configuration,111,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:161,Modifiability,config,configuration,161,"////////////////////////////////////////////////////////////////////////////////; /// Set the given integrator configuration as default numeric integration; /// configuration for this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Deployability,integrat,integration,117,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric integration configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:129,Deployability,configurat,configuration,129,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric integration configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:117,Integrability,integrat,integration,117,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric integration configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:129,Modifiability,config,configuration,129,"////////////////////////////////////////////////////////////////////////////////; /// Remove the specialized numeric integration configuration associated; /// with this object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to force use of a given set of observables; /// to interpret function value. Needed for functions or p.d.f.s; /// whose shape depends on the choice of normalization such as; /// RooAddPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:231,Integrability,depend,depends,231,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to force use of a given set of observables; /// to interpret function value. Needed for functions or p.d.f.s; /// whose shape depends on the choice of normalization such as; /// RooAddPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to force use of a given normalization range; /// to interpret function value. Needed for functions or p.d.f.s; /// whose shape depends on the choice of normalization such as; /// RooAddPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:232,Integrability,depend,depends,232,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to force use of a given normalization range; /// to interpret function value. Needed for functions or p.d.f.s; /// whose shape depends on the choice of normalization such as; /// RooAddPdf",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:302,Energy Efficiency,efficient,efficiently,302,"////////////////////////////////////////////////////////////////////////////////; /// Advertise capability to determine maximum value of function for given set of; /// observables. If no direct generator method is provided, this information; /// will assist the accept/reject generator to operate more efficiently as; /// it can skip the initial trial sampling phase to empirically find the function; /// maximum",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:113,Availability,error,error,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:173,Availability,error,error,173,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:127,Integrability,message,messages,127,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:119,Testability,log,logging,119,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:179,Testability,log,logging,179,"////////////////////////////////////////////////////////////////////////////////; /// Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:127,Availability,error,errors,127,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:284,Availability,error,errors,284,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:584,Availability,Error,Error,584,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:778,Availability,error,error,778,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:865,Availability,error,errors,865,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1039,Availability,error,error,1039,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,Integrability,message,message,107,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:141,Integrability,rout,routed,141,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:173,Integrability,protocol,protocol,173,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:210,Integrability,message,message,210,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:446,Integrability,message,messages,446,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:590,Integrability,message,messages,590,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Testability,Log,Log,86,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:369,Testability,log,logEvalError,369,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:599,Testability,log,logged,599,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:784,Testability,log,logging,784,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1045,Testability,log,logging,1045,"////////////////////////////////////////////////////////////////////////////////; /// Log evaluation error message. Evaluation errors may be routed through a different; /// protocol than generic RooFit warning message (which go straight through RooMsgService); /// because evaluation errors can occur in very large numbers in the use of likelihood; /// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); /// messages reported through this function are not printed but all stored in a list,; /// along with server values at the time of reporting. Error messages logged in this; /// way can be printed in a structured way, eliminating duplicates and with the ability; /// to truncate the list by printEvalErrors. This is the standard mode of error logging; /// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; /// reported through this method are passed for immediate printing through RooMsgService.; /// A string with server names and values is constructed automatically for error logging; /// purposes, unless a custom string with similar information is passed as argument.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:25,Availability,error,error,25,"// avoid overflowing the error list, so if there are very many, print; // the oldest one first, and pop it off the list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3,Safety,avoid,avoid,3,"// avoid overflowing the error list, so if there are very many, print; // the oldest one first, and pop it off the list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,Availability,error,error,107,"// print to debug stream, since these would normally be suppressed, and; // we do not want to increase the error count in the message service...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:126,Integrability,message,message,126,"// print to debug stream, since these would normally be suppressed, and; // we do not want to increase the error count in the message service...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:67,Integrability,message,message,67,"//coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:82,Integrability,message,message,82,"//coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:33,Testability,log,logEvalError,33,"//coutE(Tracing) << ""RooAbsReal::logEvalError("" << GetName() << "") message = "" << message << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:116,Availability,error,error,116,"////////////////////////////////////////////////////////////////////////////////; /// Clear the stack of evaluation error messages",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:122,Integrability,message,messages,122,"////////////////////////////////////////////////////////////////////////////////; /// Clear the stack of evaluation error messages",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the stack of evaluation error messages",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; /// \param[in] obs Observable to retrieve sampling hint for.; /// \param[in] xlo Beginning of range.; /// \param[in] xhi End of range.; /// \return The caller owns the returned std::list.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:126,Availability,error,error,126,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:201,Availability,error,errors,201,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:328,Availability,error,error,328,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:372,Availability,error,errors,372,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:429,Availability,error,errors,429,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:334,Integrability,message,messages,334,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:393,Integrability,message,message,393,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:108,Testability,log,logged,108,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:436,Testability,log,logged,436,"////////////////////////////////////////////////////////////////////////////////; /// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; /// is zero, only the number of errors for each source (object with unique name) is listed.; /// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; /// per source of errors. A truncation message is shown if there were more errors logged; /// than shown.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:45,Availability,error,errors,45,"// Only print node name with total number of errors",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:47,Availability,error,errors,47,"// Print node name and details of 'maxPerNode' errors",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:125,Availability,error,errors,125,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of logged evaluation errors since the last clearing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,Testability,log,logged,107,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of logged evaluation errors since the last clearing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:147,Usability,clear,clearing,147,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of logged evaluation errors since the last clearing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface method for function objects to indicate their preferred order of observables; /// for scanning their values into a (multi-dimensional) histogram or RooDataSet. The observables; /// to be ordered are offered in argument 'obs' and should be copied in their preferred; /// order into argument 'orderedObs', This default implementation indicates no preference; /// and copies the original order of 'obs' into 'orderedObs'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:295,Deployability,integrat,integration,295,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:499,Deployability,integrat,integrates,499,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:524,Deployability,integrat,integrates,524,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:663,Deployability,integrat,integration,663,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:908,Deployability,integrat,integration,908,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1046,Deployability,integrat,integrates,1046,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1186,Deployability,integrat,integration,1186,", i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1540,Deployability,integrat,integrate,1540,"name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2153,Deployability,integrat,integration,2153,"t strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; /// | `ScanAll()` | Always apply scanning technique; /// | `ScanNone()` | Never apply scanning technique",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2433,Deployability,integrat,integration,2433,"t strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; /// | `ScanAll()` | Always apply scanning technique; /// | `ScanNone()` | Never apply scanning technique",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:295,Integrability,integrat,integration,295,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:499,Integrability,integrat,integrates,499,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:524,Integrability,integrat,integrates,524,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:663,Integrability,integrat,integration,663,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:908,Integrability,integrat,integration,908,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1046,Integrability,integrat,integrates,1046,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1186,Integrability,integrat,integration,1186,", i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1540,Integrability,integrat,integrate,1540,"name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2153,Integrability,integrat,integration,2153,"t strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; /// | `ScanAll()` | Always apply scanning technique; /// | `ScanNone()` | Never apply scanning technique",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2433,Integrability,integrat,integration,2433,"t strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters(Int_t nbins, Int_t intOrder)` | Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf; /// | `ScanNum()` | Apply scanning technique if cdf integral involves numeric integration; /// | `ScanAll()` | Always apply scanning technique; /// | `ScanNone()` | Never apply scanning technique",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:481,Modifiability,variab,variables,481,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:327,Performance,perform,performed,327,"////////////////////////////////////////////////////////////////////////////////; /// Create an object that represents the running integral of the function over one or more observables listed in iset, i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral cr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1121,Performance,perform,performance,1121,", i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1161,Performance,perform,perform,1161,", i.e.; /// \f[; /// \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; /// \f]; ///; /// The actual integration calculation is only performed when the return object is evaluated. The name; /// of the integral object is automatically constructed from the name of the input function, the variables; /// it integrates and the range integrates over. The default strategy to calculate the running integrals is; ///; /// - If the integrand (this object) supports analytical integration, construct an integral object; /// that calculate the running integrals value by calculating the analytical integral each; /// time the running integral object is evaluated; ///; /// - If the integrand (this object) requires numeric integration to construct the running integral; /// create an object of class RooNumRunningInt which first samples the entire function and integrates; /// the sampled function numerically. This method has superior performance as there is no need to; /// perform a full (numeric) integration for each evaluation of the running integral object, but; /// only when one of its parameters has changed.; ///; /// The choice of strategy can be changed with the ScanAll() argument, which forces the use of the; /// scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone(); /// argument which forces the 'integrate each evaluation' technique for all use cases. The sampling; /// granularity for the scanning technique can be controlled with the ScanParameters technique; /// which allows to specify the number of samples to be taken, and to which order the resulting; /// running integral should be interpolated. The default values are 1000 samples and 2nd order; /// interpolation.; ///; /// The following named arguments are accepted; /// | | Effect on integral creation; /// |-|-------------------------------; /// | `SupNormSet(const RooArgSet&)` | Observables over which should be normalized _in addition_ to the integration observables; /// | `ScanParameters",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:195,Deployability,integrat,integration,195,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createRunningIntegral. It creates an; /// object implementing the standard (analytical) integration; /// technique for calculating the running integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:195,Integrability,integrat,integration,195,"////////////////////////////////////////////////////////////////////////////////; /// Utility function for createRunningIntegral. It creates an; /// object implementing the standard (analytical) integration; /// technique for calculating the running integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:8,Deployability,integrat,integration,8,"// Make integration observable x_prime for each observable x as well as an x_lowbound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:8,Integrability,integrat,integration,8,"// Make integration observable x_prime for each observable x as well as an x_lowbound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:8,Modifiability,parameteriz,parameterized,8,"// Make parameterized binning from [x_lowbound,x] for each x_prime",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:49,Deployability,integrat,integrated,49,"// Construct final normalization set for c.d.f = integrated observables + any extra specified by user",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:49,Integrability,integrat,integrated,49,"// Construct final normalization set for c.d.f = integrated observables + any extra specified by user",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:41,Modifiability,variab,variables,41,"// Check that specified input are indeed variables of this function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:573,Deployability,integrat,integrated,573,"////////////////////////////////////////////////////////////////////////////////; /// Return function representing moment of p.d.f (normalized w.r.t given observables) of given order.; /// \param[in] obs Observable to calculate the moments for; /// \param[in] normObs Normalise w.r.t. these observables; /// \param[in] order Order of the moment; /// \param[in] central If true, the central moment is given by \f$ \langle (x- \langle x \rangle )^2 \rangle \f$; /// \param[in] takeRoot Calculate the square root; /// \param[in] intNormObs If true, the moment of the function integrated over all normalization observables is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:573,Integrability,integrat,integrated,573,"////////////////////////////////////////////////////////////////////////////////; /// Return function representing moment of p.d.f (normalized w.r.t given observables) of given order.; /// \param[in] obs Observable to calculate the moments for; /// \param[in] normObs Normalise w.r.t. these observables; /// \param[in] order Order of the moment; /// \param[in] central If true, the central moment is given by \f$ \langle (x- \langle x \rangle )^2 \rangle \f$; /// \param[in] takeRoot Calculate the square root; /// \param[in] intNormObs If true, the moment of the function integrated over all normalization observables is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:182,Performance,perform,performed,182,"////////////////////////////////////////////////////////////////////////////////; ///; /// Return value of x (in range xmin,xmax) at which function equals yval.; /// (Calculation is performed with Brent root finding algorithm)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:984,Availability,error,error,984,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1436,Availability,error,error,1436,"cale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3364,Availability,error,errors,3364,"> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3489,Availability,error,error,3489,"> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3574,Availability,error,error,3574,"> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1985,Deployability,Integrat,IntegrateBins,1985,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2007,Deployability,Integrat,Integrate,2007,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2975,Energy Efficiency,consumption,consumption,2975,"ame; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:990,Integrability,message,messages,990,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1985,Integrability,Integrat,IntegrateBins,1985,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2007,Integrability,Integrat,Integrate,2007,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3150,Integrability,message,messages,3150,"> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:3593,Integrability,message,messages,3593,"> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:373,Modifiability,Extend,Extended,373,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:644,Modifiability,extend,extended,644,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:721,Modifiability,extend,extended,721,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:855,Modifiability,extend,extended,855,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:883,Modifiability,Extend,Extended,883,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1144,Modifiability,extend,extended,1144,"n histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1284,Modifiability,extend,extended,1284," to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1400,Modifiability,Extend,Extended,1400,"cale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1892,Performance,Optimiz,Optimize,1892,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1941,Performance,optimiz,optimization,1941,"kes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()` <td> Integrate PDF within each bin. This sets the desired precision.; ///; /// <tr><th> <th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th> <th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:494,Safety,predict,predicted,494,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:600,Safety,predict,predicted,600,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:777,Safety,predict,prediction,777,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:925,Safety,predict,prediction,925,"////////////////////////////////////////////////////////////////////////////////; /// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; /// commands MIGRAD, HESSE in succession; ///; /// The following named arguments are supported; ///; /// <table>; /// <tr><th> <th> Options to control construction of chi2; /// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; /// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; /// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; /// (in RooFit jargon, ""if the pdf can be extended"").; /// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; /// and the chi2 will fall back to the total data weight to scale the normalized pdf.; /// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; /// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; /// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; /// printed and you'll most likely get garbage results.; /// <tr><td> `Range(const char* name)` <td> Fit only data inside range with given name; /// <tr><td> `Range(double lo, double hi)` <td> Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; /// Multiple comma separated range names can be specified.; /// <tr><td> `NumCPU(int num)` <td> Parallelize NLL calculation on num CPUs; /// <tr><td> `Optimize(bool flag)` <td> Activate constant term optimization (on by default); /// <tr><td> `IntegrateBins()`",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:427,Availability,error,error,427,"////////////////////////////////////////////////////////////////////////////////; /// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; ///; /// List of possible commands in the `cmdList`:; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; /// <tr><td>; /// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRan",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:521,Availability,error,error,521,"////////////////////////////////////////////////////////////////////////////////; /// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; ///; /// List of possible commands in the `cmdList`:; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; /// <tr><td>; /// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRan",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:592,Availability,error,errors,592,"////////////////////////////////////////////////////////////////////////////////; /// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; ///; /// List of possible commands in the `cmdList`:; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; /// <tr><td>; /// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRan",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:704,Availability,error,errors,704,"////////////////////////////////////////////////////////////////////////////////; /// Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result.; ///; /// List of possible commands in the `cmdList`:; ///; /// <table>; /// <tr><th> Type of CmdArg <th> Effect on \f$ \chi^2 \f$; /// <tr><td>; /// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRan",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1634,Deployability,Integrat,IntegrateBins,1634,"- RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1655,Deployability,Integrat,Integrate,1655,"- RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1634,Integrability,Integrat,IntegrateBins,1634,"- RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1655,Integrability,Integrat,Integrate,1655,"- RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a single RooArgSet containing them.; ///; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1313,Modifiability,Extend,Extended,1313,"// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a si",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1366,Modifiability,extend,extended,1366,"// <tr><td> `DataError()` <td> Choose between:; /// - RooAbsData::Expected: Expected Poisson error (\f$ \sqrt{n_\text{expected}} \f$ from the PDF).; /// - RooAbsData::SumW2: The observed error from the square root of the sum of weights,; /// i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; /// - RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \f$ n_\text{observed} \f$.; /// If for a given bin \f$ n_\text{expected} \f$ is lower than the \f$ n_\text{observed} \f$, the lower uncertainty is taken; /// (e.g., the difference between the mean and the 16 % quantile).; /// If \f$ n_\text{expected} \f$ is higher than \f$ n_\text{observed} \f$, the higher uncertainty is taken; /// (e.g., the difference between the 84 % quantile and the mean).; /// - RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data.; /// <tr><td>; /// `Extended()` <td> Use expected number of events of an extended p.d.f as normalization; /// <tr><td>; /// NumCPU() <td> Activate parallel processing feature; /// <tr><td>; /// Range() <td> Calculate \f$ \chi^2 \f$ only in selected region; /// <tr><td>; /// Verbose() <td> Verbose output of GOF framework; /// <tr><td>; /// IntegrateBins() <td> Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits.; /// <tr><td> `SumCoefRange()` <td> Set the range in which to interpret the coefficients of RooAddPdf components; /// <tr><td> `SplitRange()` <td> Fit ranges used in different categories get named after the category.; /// Using `Range(""range""), SplitRange()` as switches, different ranges could be set like this:; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// <tr><td> `ConditionalObservables(Args_t &&... argsOrArgSet)` <td> Define projected observables.; /// Arguments can either be multiple RooRealVar or a si",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:110,Modifiability,variab,variable,110,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ variable from a histogram and this function.; ///; /// \param arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8 ordered arguments; ///; /// The list of supported command arguments is given in the documentation for; /// RooChi2Var::RooChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; ///; /// \param data Histogram with data; /// \return \f$ \chi^2 \f$ variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:644,Modifiability,variab,variable,644,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ variable from a histogram and this function.; ///; /// \param arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8 ordered arguments; ///; /// The list of supported command arguments is given in the documentation for; /// RooChi2Var::RooChi2Var(const char *name, const char* title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; ///; /// \param data Histogram with data; /// \return \f$ \chi^2 \f$ variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:322,Availability,error,errors,322,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:647,Availability,error,errors,647,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1988,Availability,error,errors,1988,"esignated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2113,Availability,error,error,2113,"esignated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2198,Availability,error,error,2198,"esignated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:575,Deployability,Integrat,Integrate,575,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:602,Deployability,Integrat,Integrate,602,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1599,Energy Efficiency,consumption,consumption,1599,"the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:575,Integrability,Integrat,Integrate,575,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:602,Integrability,Integrat,Integrate,602,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:1774,Integrability,message,messages,1774,"esignated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:2217,Integrability,message,messages,2217,"esignated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative; /// value suppress output completely, a zero value will only print the error count per p.d.f component,; /// a positive value is will print details of each error up to numErr messages per p.d.f component.; /// </table>",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform a 2-D \f$ \chi^2 \f$ fit using a series of x and y values stored in the dataset `xydata`.; /// The y values can either be the event weights, or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// <table>; /// <tr><th><th> Options to control construction of the chi-square; /// <tr><td> `YVar(RooRealVar& yvar)` <td> Designate given column in dataset as Y value; /// <tr><td> `Integrate(bool flag)` <td> Integrate function over range specified by X errors; /// rather than take value at bin center.; ///; /// <tr><th><th> Options to control flow of fit procedure; /// <tr><td> `InitialHesse(bool flag)` <td> Flag controls if HESSE before MIGRAD as well, off by default; /// <tr><td> `Hesse(bool flag)` <td> Flag controls if HESSE is run after MIGRAD, on by default; /// <tr><td> `Minos(bool flag)` <td> Flag controls if MINOS is run after HESSE, on by default; /// <tr><td> `Minos(const RooArgSet& set)` <td> Only run MINOS on given subset of arguments; /// <tr><td> `Save(bool flag)` <td> Flag controls if RooFitResult object is produced and returned, off by default; /// <tr><td> `Strategy(Int_t flag)` <td> Set Minuit strategy (0 through 2, default is 1); ///; /// <tr><th><th> Options to control informational output; /// <tr><td> `Verbose(bool flag)` <td> Flag controls if verbose output is printed (NLL, parameter changes during fit; /// <tr><td> `Timer(bool flag)` <td> Time CPU and wall clock consumption of fit steps, off by default; /// <tr><td> `PrintLevel(Int_t level)` <td> Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational; /// messages are suppressed as well; /// <tr><td> `Warnings(bool flag)` <td> Enable or disable MINUIT warnings (enabled by default); /// <tr><td> `PrintEvalErrors(Int_t numErr)` <td> Control number of p.d.f evaluation errors printe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:311,Availability,error,errors,311,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:702,Availability,error,errors,702,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:633,Deployability,Integrat,Integrate,633,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:657,Deployability,Integrat,Integrate,657,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:633,Integrability,Integrat,Integrate,633,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:657,Integrability,Integrat,Integrate,657,"////////////////////////////////////////////////////////////////////////////////; /// Create a \f$ \chi^2 \f$ from a series of x and y values stored in a dataset.; /// The y values can either be the event weights (default), or can be another column designated; /// by the YVar() argument. The y value must have errors defined for the \f$ \chi^2 \f$ to; /// be well defined.; ///; /// The following named arguments are supported; ///; /// | | Options to control construction of the \f$ \chi^2 \f$; /// |-|-----------------------------------------; /// | `YVar(RooRealVar& yvar)` | Designate given column in dataset as Y value; /// | `Integrate(bool flag)` | Integrate function over range specified by X errors rather than take value at bin center.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:112,Availability,error,error,112,"////////////////////////////////////////////////////////////////////////////////; /// Return current evaluation error logging mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:118,Testability,log,logging,118,"////////////////////////////////////////////////////////////////////////////////; /// Return current evaluation error logging mode.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:101,Availability,error,error,101,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:168,Availability,error,error,168,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:243,Availability,error,errors,243,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:369,Availability,error,error,369,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:107,Testability,log,logging,107,"////////////////////////////////////////////////////////////////////////////////; /// Set evaluation error logging mode. Options are; ///; /// PrintErrors - Print each error through RooMsgService() as it occurs; /// CollectErrors - Accumulate errors, but do not print them. A subsequent call; /// to printEvalErrors() will print a summary; /// CountErrors - Accumulate error count, but do not print them.; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:46,Usability,learn,learn,46,"// See note at the bottom of this function to learn why we can only set; // the operation mode to ""always clean"" if there are no other value; // clients.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:51,Performance,cache,cached,51,"// Prevent the server from evaluating; just return cached result, which we will side load:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:85,Performance,load,load,85,"// Prevent the server from evaluating; just return cached result, which we will side load:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:35,Integrability,interface,interface,35,"// Advising to implement the batch interface makes only sense if the batch was not a scalar.; // Otherwise, there would be no speedup benefit.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx:60,Performance,cache,caches,60,"// For each event, write temporary values into our servers' caches, and run a single-value computation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:1280,Deployability,integrat,integration,1280,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsRealLValue.cxx; \class RooAbsRealLValue; \ingroup Roofitcore. Abstract base class for objects that represent a; real value that may appear on the left hand side of an equation ('lvalue').; Each implementation must provide a setVal() member to allow direct modification; of the value. RooAbsRealLValue may be derived, but its functional relation; to other RooAbsArg must be invertible. This class has methods that export the defined range of the lvalue,; but doesn't hold its values because these limits may be derived; from limits of client object. The range serve as integration; range when interpreted as a observable and a boundaries when; interpreted as a parameter.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:1280,Integrability,integrat,integration,1280,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsRealLValue.cxx; \class RooAbsRealLValue; \ingroup Roofitcore. Abstract base class for objects that represent a; real value that may appear on the left hand side of an equation ('lvalue').; Each implementation must provide a setVal() member to allow direct modification; of the value. RooAbsRealLValue may be derived, but its functional relation; to other RooAbsArg must be invertible. This class has methods that export the defined range of the lvalue,; but doesn't hold its values because these limits may be derived; from limits of client object. The range serve as integration; range when interpreted as a observable and a boundaries when; interpreted as a parameter.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:3,Testability,test,test,3,"// test this value against our upper fit limit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:3,Testability,test,test,3,"// test this value against our lower fit limit",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:17,Modifiability,variab,variable,17,"// Plot range of variable may not be infinite or empty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:17,Modifiability,variab,variable,17,"// Plot range of variable may not be infinite or empty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:91,Performance,cache,cache,91,"////////////////////////////////////////////////////////////////////////////////; /// Copy cache of another RooAbsArg to our cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:125,Performance,cache,cache,125,"////////////////////////////////////////////////////////////////////////////////; /// Copy cache of another RooAbsArg to our cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:108,Usability,usab,usable,108,"////////////////////////////////////////////////////////////////////////////////; /// Check if fit range is usable as plot range, i.e. it is neither; /// open ended, nor empty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 1D-histogram with appropriate scale and labels for this variable.; /// This method uses the default plot range which can be changed using the; /// setPlotMin(),setPlotMax() methods, and the default binning which can be; /// changed with setPlotBins(). The caller takes ownership of the returned; /// object and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:29,Usability,usab,usable,29,"// Check if the fit range is usable as plot range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 1D-histogram with appropriate scale and labels for this variable.; /// This method uses the default plot range which can be changed using the; /// setPlotMin(),setPlotMax() methods, and the default binning which can be; /// changed with setPlotBins(). The caller takes ownership of the returned; /// object and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 1D-histogram with appropriate scale and labels for this variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 2D-histogram with appropriate scale and labels for this variable (x); /// and the specified y variable. This method uses the default plot ranges for x and y which; /// can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; /// can be changed with setPlotBins(). The caller takes ownership of the returned object; /// and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:196,Modifiability,variab,variable,196,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 2D-histogram with appropriate scale and labels for this variable (x); /// and the specified y variable. This method uses the default plot ranges for x and y which; /// can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; /// can be changed with setPlotBins(). The caller takes ownership of the returned object; /// and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 2D-histogram with appropriate scale and labels for this variable (x); /// and the specified y variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:196,Modifiability,variab,variable,196,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 2D-histogram with appropriate scale and labels for this variable (x); /// and the specified y variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:158,Modifiability,variab,variable,158,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 3D-histogram with appropriate scale and labels for this variable (x); /// and the specified y,z variables. This method uses the default plot ranges for x,y,z which; /// can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; /// can be changed with setPlotBins(). The caller takes ownership of the returned object; /// and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:198,Modifiability,variab,variables,198,"////////////////////////////////////////////////////////////////////////////////; /// Create an empty 3D-histogram with appropriate scale and labels for this variable (x); /// and the specified y,z variables. This method uses the default plot ranges for x,y,z which; /// can be changed using the setPlotMin(),setPlotMax() methods, and the default binning which; /// can be changed with setPlotBins(). The caller takes ownership of the returned object; /// and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:75,Modifiability,variab,variable,75,"// Create an empty 3D-histogram with appropriate scale and labels for this variable (x); // and the specified y,z variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:114,Modifiability,variab,variables,114,"// Create an empty 3D-histogram with appropriate scale and labels for this variable (x); // and the specified y,z variables.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:154,Modifiability,variab,variables,154,"////////////////////////////////////////////////////////////////////////////////; /// Create 1-, 2- or 3-d ROOT histogram with labels taken; /// from the variables in 'vars' and the with range and binning; /// specified in xlo,xhi and nBins. The dimensions of the arrays xlo,xhi,; /// nBins should match the number of objects in vars.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:194,Modifiability,variab,variables,194,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1,2, or 3D-histogram with appropriate scale and labels.; /// Binning and ranges are taken from the variables themselves and can be changed by; /// calling their setPlotMin/Max() and setPlotBins() methods. A histogram can be filled; /// using RooAbsReal::fillHistogram() or RooTreeData::fillHistogram().; /// The caller takes ownership of the returned object and is responsible for deleting it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:18,Modifiability,variab,variables,18,"// Check that all variables are AbsReals and prepare a name of the form <name>_<var1>_...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:68,Modifiability,variab,variable,68,"// Set the histogram coordinate axis labels from the titles of each variable, adding units if necessary.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx:3,Integrability,Interface,Interface,3,"// Interface function to indicate that this lvalue; // has a unit or constant jacobian terms with respect to; // the observable passed as argument. This default implementation; // always returns true (i.e. jacobian is constant)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsRealLValue.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsRealLValue.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:891,Modifiability,inherit,inherit,891,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:971,Performance,optimiz,optimizations,971,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:808,Testability,test,test,808,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:826,Testability,Test,Test,826,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:1029,Testability,test,test,1029,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:1080,Testability,test,test,1080,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:1147,Testability,test,test,1147,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:1272,Testability,test,test,1272,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:1316,Testability,test,test,1316,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAbsTestStatistic.cxx; \class RooAbsTestStatistic; \ingroup Roofitcore. Abstract base class for all test; statistics. Test statistics that evaluate the PDF at each data; point should inherit from the RooAbsOptTestStatistic class which; implements several generic optimizations that can be done for such; quantities. This test statistic base class organizes calculation of test; statistic values for RooSimultaneous PDF as a combination of test; statistic values for the PDF components of the simultaneous PDF and; organizes multi-processor parallel calculation of test statistic; values. For the latter, the test statistic value is calculated in; partitions in parallel executing processes and a posteriori; combined in the main thread.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:421,Deployability,configurat,configuration,421,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:421,Modifiability,config,configuration,421,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:95,Testability,test,test,95,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:181,Testability,test,test,181,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:284,Testability,test,tests,284,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:709,Testability,test,test,709,"////////////////////////////////////////////////////////////////////////////////; /// Create a test statistic from the given function and the data.; /// \param[in] name Name of the test statistic; /// \param[in] title Title (for plotting); /// \param[in] real Function to be used for tests; /// \param[in] data Data to fit function to; /// \param[in] projDeps A set of projected observables; /// \param[in] cfg statistic configuration object; ///; /// cfg contains:; /// - rangeName Fit data only in range with given name; /// - addCoefRangeName If not null, all RooAddPdf components of `real` will be instructed to fix their fraction definitions to the given named range.; /// - nCPU If larger than one, the test statistic calculation will be parallelized over multiple processes.; /// By default the data is split with 'bulk' partitioning (each process calculates a contiguous block of fraction 1/nCPU; /// of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; /// in each processing block many vary greatly thereby distributing the workload rather unevenly.; /// - interleave is set to true, the interleave partitioning strategy is used where each partition; /// i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; /// - verbose Be more verbose.; /// - splitCutRange If true, a different rangeName constructed as rangeName_{catName} will be used; /// as range definition for each index state of a RooSimultaneous. This means that a different range can be defined; /// for each category such as; /// ```; /// myVariable.setRange(""range_pi0"", 135, 210);; /// myVariable.setRange(""range_gamma"", 50, 210);; /// ```; /// if the categories are called ""pi0"" and ""gamma"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:236,Performance,perform,performed,236,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:116,Testability,test,test,116,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:139,Testability,test,test,139,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:201,Testability,test,test,201,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:346,Testability,test,test,346,"////////////////////////////////////////////////////////////////////////////////; /// Calculate and return value of test statistic. If the test statistic; /// is calculated from a RooSimultaneous, the test statistic calculation; /// is performed separately on each simultaneous p.d.f component and associated; /// data, and then combined. If the test statistic calculation is parallelized,; /// partitions are calculated in nCPU processes and combined a posteriori.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:117,Testability,test,test,117,"////////////////////////////////////////////////////////////////////////////////; /// One-time initialization of the test statistic. Setup; /// infrastructure for simultaneous p.d.f processing and/or; /// parallelized processing if requested",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:129,Testability,test,test,129,"////////////////////////////////////////////////////////////////////////////////; /// Forward server redirect calls to component test statistics",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:121,Testability,test,test,121,"////////////////////////////////////////////////////////////////////////////////; /// Add extra information on component test statistics when printing; /// itself as part of a tree structure",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:108,Performance,optimiz,optimization,108,"////////////////////////////////////////////////////////////////////////////////; /// Forward constant term optimization management calls to component; /// test statistics",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:156,Testability,test,test,156,"////////////////////////////////////////////////////////////////////////////////; /// Forward constant term optimization management calls to component; /// test statistics",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:148,Testability,test,test,148,"////////////////////////////////////////////////////////////////////////////////; /// Initialize multi-processor calculation mode. Create component test statistics in separate; /// processed that are connected to this process through a RooAbsRealMPFE front-end class.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:8,Deployability,configurat,configuration,8,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:8,Modifiability,config,configuration,8,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:123,Modifiability,variab,variable,123,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:169,Safety,avoid,avoid,169,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:265,Testability,test,test,265,"////////////////////////////////////////////////////////////////////////////////; /// Initialize simultaneous p.d.f processing mode. Strip simultaneous; /// p.d.f into individual components, split dataset in subset; /// matching each component and create component test statistics for; /// each of them.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:63,Modifiability,variab,variable,63,"// If the channel is not in the selected range of the category variable, we; // won't create a slave calculator for this channel.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:162,Energy Efficiency,reduce,reduces,162,"// WVE END HACK; // Below here directly pass binnedPdf instead of PROD(binnedPdf,constraints) as constraints are evaluated elsewhere anyway; // and omitting them reduces model complexity and associated handling/cloning times",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:8,Deployability,configurat,configuration,8,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:8,Modifiability,config,configuration,8,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:123,Modifiability,variab,variable,123,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:169,Safety,avoid,avoid,169,"// This configuration parameter is stored in the RooAbsOptTestStatistic.; // It would have been cleaner to move the member variable into RooAbsTestStatistic,; // but to avoid incrementing the class version we do the dynamic_cast trick.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:203,Testability,test,test,203,"////////////////////////////////////////////////////////////////////////////////; /// Change dataset that is used to given one. If cloneData is true, a clone of; /// in the input dataset is made. If the test statistic was constructed with; /// a range specification on the data, the cloneData argument is ignored and; /// the data is always cloned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:33,Usability,simpl,simply,33,"// For an unsplit empty dataset, simply assign empty dataset to each component",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx:3,Usability,Clear,Clear,3,"// Clear offset if feature is disabled to that it is recalculated next time it is enabled",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:15,Deployability,configurat,configuration,15,"/// Stores the configuration parameters for RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:15,Modifiability,config,configuration,15,"/// Stores the configuration parameters for RooAbsTestStatistic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:10,Testability,test,test,10,"// Return test statistic operation mode of this instance (SimMaster, MPMaster or Slave)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:17,Performance,cache,cache-optimized,17,"// Overridden in cache-optimized test statistic",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:33,Testability,test,test,33,"// Overridden in cache-optimized test statistic",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:82,Testability,test,test,82,"// Store total number of components p.d.f. of a RooSimultaneous in this component test statistic",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:50,Testability,test,test,50,"// Store total number of events in this component test statistic",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:23,Testability,test,test,23,"///< Parameters of the test statistic (=parameters of the input function); // Original arguments",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:41,Testability,test,test,41,"///< Name of range in which to calculate test statistic",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:23,Testability,test,test,23,"///< Operation mode of test statistic instance",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:31,Testability,test,test,31,"///< Total number of events in test statistic calculation",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:45,Modifiability,extend,extended,45,"///<! Number of designated set to calculated extended term; // Simultaneous mode data",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:62,Testability,test,test,62,"///<! Array of sub-contexts representing part of the combined test statistic; // Parallel mode data",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h:28,Safety,avoid,avoid,28,"///<! Offset as KahanSum to avoid loss of precision",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAbsTestStatistic.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAbsTestStatistic.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:303,Integrability,depend,dependents,303,"////////////////////////////////////////////////////////////////////////////////; /// Initialize an accept-reject generator for the specified distribution function,; /// which must be non-negative but does not need to be normalized over the; /// variables to be generated, genVars. The function and its dependents are; /// cloned and so will not be disturbed during the generation process.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:246,Modifiability,variab,variables,246,"////////////////////////////////////////////////////////////////////////////////; /// Initialize an accept-reject generator for the specified distribution function,; /// which must be non-negative but does not need to be normalized over the; /// variables to be generated, genVars. The function and its dependents are; /// cloned and so will not be disturbed during the generation process.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:34,Deployability,configurat,configuration,34,"// print a verbose summary of our configuration, if requested",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:34,Modifiability,config,configuration,34,"// print a verbose summary of our configuration, if requested",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:45,Performance,cache,cache,45,"// are we actually generating anything? (the cache always contains at least our function value)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:9,Performance,cache,cache,9,"// Limit cache size to 1M events",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:11,Performance,cache,cached,11,"// Use any cached events first",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:28,Performance,cache,cache,28,"// When we have used up the cache, start a new cache and add; // some more events to it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:47,Performance,cache,cache,47,"// When we have used up the cache, start a new cache and add; // some more events to it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:8,Performance,cache,cache,8,"// Trim cache here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:9,Performance,cache,cache,9,"// Limit cache size to 1M events",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:113,Performance,cache,cache,113,"////////////////////////////////////////////////////////////////////////////////; /// Scan through events in the cache which have not been used yet,; /// looking for the first accepted one which is added to the specified; /// container. Return a pointer to the accepted event, or else zero; /// if we use up the cache before we accept an event. The caller does; /// not own the event and it will be overwritten by a subsequent call.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:312,Performance,cache,cache,312,"////////////////////////////////////////////////////////////////////////////////; /// Scan through events in the cache which have not been used yet,; /// looking for the first accepted one which is added to the specified; /// container. Return a pointer to the accepted event, or else zero; /// if we use up the cache before we accept an event. The caller does; /// not own the event and it will be overwritten by a subsequent call.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:15,Performance,cache,cached,15,"// accept this cached event?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:121,Deployability,update,update,121,"////////////////////////////////////////////////////////////////////////////////; /// Add a trial event to our cache and update our estimates; /// of the function maximum value and integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:111,Performance,cache,cache,111,"////////////////////////////////////////////////////////////////////////////////; /// Add a trial event to our cache and update our estimates; /// of the function maximum value and integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:3,Deployability,Update,Update,3,"// Update the estimated integral and maximum value. Increase our; // maximum estimate slightly to give a safety margin with a; // corresponding loss of efficiency.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:105,Safety,safe,safety,105,"// Update the estimated integral and maximum value. Increase our; // maximum estimate slightly to give a safety margin with a; // corresponding loss of efficiency.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:27,Performance,cache,cache,27,"// fill a new entry in our cache dataset for this point",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:237,Availability,reliab,reliable,237,"// Empirically determine maximum value of function by taking a large number; // of samples. The actual number depends on the number of dimensions in which; // the sampling occurs; // Generate the minimum required number of samples for a reliable maximum estimate",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:110,Integrability,depend,depends,110,"// Empirically determine maximum value of function by taking a large number; // of samples. The actual number depends on the number of dimensions in which; // the sampling occurs; // Generate the minimum required number of samples for a reliable maximum estimate",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx:9,Performance,cache,cache,9,"// Limit cache size to 1M events",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAcceptReject.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAcceptReject.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:823,Deployability,integrat,integration,823,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveIntegratorND.cxx; \class RooAdaptiveIntegratorND; \ingroup Roofitcore. Adaptive one-dimensional numerical integration algorithm.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:788,Energy Efficiency,Adapt,Adaptive,788,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveIntegratorND.cxx; \class RooAdaptiveIntegratorND; \ingroup Roofitcore. Adaptive one-dimensional numerical integration algorithm.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:823,Integrability,integrat,integration,823,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveIntegratorND.cxx; \class RooAdaptiveIntegratorND; \ingroup Roofitcore. Adaptive one-dimensional numerical integration algorithm.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:788,Modifiability,Adapt,Adaptive,788,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAdaptiveIntegratorND.cxx; \class RooAdaptiveIntegratorND; \ingroup Roofitcore. Adaptive one-dimensional numerical integration algorithm.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:181,Integrability,depend,dependencies,181,"// Register this class with RooNumIntConfig; ////////////////////////////////////////////////////////////////////////////////; /// Register RooAdaptiveIntegratorND, its parameters, dependencies and capabilities with RooNumIntFactory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:151,Deployability,configurat,configuration,151,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of integral on given function binding and with given configuration. The; /// integration limits are taken from the definition in the function binding; ///_func = function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:175,Deployability,integrat,integration,175,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of integral on given function binding and with given configuration. The; /// integration limits are taken from the definition in the function binding; ///_func = function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:175,Integrability,integrat,integration,175,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of integral on given function binding and with given configuration. The; /// integration limits are taken from the definition in the function binding; ///_func = function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:151,Modifiability,config,configuration,151,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of integral on given function binding and with given configuration. The; /// integration limits are taken from the definition in the function binding; ///_func = function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:34,Availability,toler,tolerance,34,"// by default do not use absolute tolerance (see https://root.cern/phpBB3/viewtopic.php?f=15&t=20071 )",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:101,Deployability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:162,Deployability,Update,Update,162,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:101,Integrability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:97,Deployability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx:97,Integrability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.h:15,Availability,error,error,15,"///< Number of error occurrences",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAdaptiveIntegratorND.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAdaptiveIntegratorND.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx:774,Energy Efficiency,Efficient,Efficient,774,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAddGenContext.cxx; \class RooAddGenContext; \ingroup Roofitcore. Efficient implementation of the; generator context specific for RooAddPdf PDFs. The strategy; of RooAddGenContext is to defer generation of each component; to a dedicated generator context for that component and to; randomly choose one of those context to generate an event,; with a probability proportional to its associated coefficient.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx:106,Modifiability,variab,variables,106,"////////////////////////////////////////////////////////////////////////////////; /// Attach given set of variables to internal p.d.f. clone",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the cumulative threshold table from the current coefficient; /// values",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:169,Deployability,configurat,configuration,169,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooAddPdf cache element for a given normalization set and; /// projection configuration.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:169,Modifiability,config,configuration,169,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooAddPdf cache element for a given normalization set and; /// projection configuration.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:105,Performance,cache,cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Create a RooAddPdf cache element for a given normalization set and; /// projection configuration.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:92,Integrability,depend,dependents,92,"// *** PART 1 : Create supplemental normalization list ***; // Retrieve the combined set of dependents of this PDF ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce iset/nset to actual dependents of this PDF",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:30,Integrability,depend,dependents,30,"// Reduce iset/nset to actual dependents of this PDF",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:27,Integrability,depend,dependents,27,"// Start with full list of dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:14,Integrability,depend,dependents,14,"// Remove PDF dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:15,Integrability,depend,dependents,15,"// Remove coef dependents",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:130,Performance,cache,cache,130,"////////////////////////////////////////////////////////////////////////////////; /// List all RooAbsArg derived contents in this cache element",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the RooAddPdf coefficients for a given normalization set and; /// projection configuration. The `coefCache` argument should have the same; /// size as `pdfList`. It needs to be initialized with the raw values of the; /// coefficients, as obtained from the `_coefList` proxy in the RooAddPdf. If; /// the last coefficient is not given, the initial value of the last element of; /// `_coefCache` does not matter. After this function, the `_coefCache` will be; /// filled with the correctly scaled coefficients for each pdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:170,Deployability,configurat,configuration,170,"////////////////////////////////////////////////////////////////////////////////; /// Update the RooAddPdf coefficients for a given normalization set and; /// projection configuration. The `coefCache` argument should have the same; /// size as `pdfList`. It needs to be initialized with the raw values of the; /// coefficients, as obtained from the `_coefList` proxy in the RooAddPdf. If; /// the last coefficient is not given, the initial value of the last element of; /// `_coefCache` does not matter. After this function, the `_coefCache` will be; /// filled with the correctly scaled coefficients for each pdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx:170,Modifiability,config,configuration,170,"////////////////////////////////////////////////////////////////////////////////; /// Update the RooAddPdf coefficients for a given normalization set and; /// projection configuration. The `coefCache` argument should have the same; /// size as `pdfList`. It needs to be initialized with the raw values of the; /// coefficients, as obtained from the `_coefList` proxy in the RooAddPdf. If; /// the last coefficient is not given, the initial value of the last element of; /// `_coefCache` does not matter. After this function, the `_coefCache` will be; /// filled with the correctly scaled coefficients for each pdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddHelpers.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddHelpers.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:105,Availability,error,error,105,"////////////////////////////////////////////////////////////////////////////////; /// Return the default error level for MINUIT error analysis; /// If the addition contains one or more RooNLLVars and; /// no RooChi2Vars, return the defaultErrorLevel() of; /// RooNLLVar. If the addition contains one ore more RooChi2Vars; /// and no RooNLLVars, return the defaultErrorLevel() of; /// RooChi2Var. If the addition contains neither or both; /// issue a warning message and return a value of 1",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:128,Availability,error,error,128,"////////////////////////////////////////////////////////////////////////////////; /// Return the default error level for MINUIT error analysis; /// If the addition contains one or more RooNLLVars and; /// no RooChi2Vars, return the defaultErrorLevel() of; /// RooNLLVar. If the addition contains one ore more RooChi2Vars; /// and no RooNLLVars, return the defaultErrorLevel() of; /// RooChi2Var. If the addition contains neither or both; /// issue a warning message and return a value of 1",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:458,Integrability,message,message,458,"////////////////////////////////////////////////////////////////////////////////; /// Return the default error level for MINUIT error analysis; /// If the addition contains one or more RooNLLVars and; /// no RooChi2Vars, return the defaultErrorLevel() of; /// RooNLLVar. If the addition contains one ore more RooChi2Vars; /// and no RooNLLVars, return the defaultErrorLevel() of; /// RooChi2Var. If the addition contains neither or both; /// issue a warning message and return a value of 1",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:70,Availability,down,down,70,"// we always do things ourselves -- actually, always delegate further down the line ;-)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:142,Performance,cache,cache,142,"////////////////////////////////////////////////////////////////////////////////; /// Calculate integral internally from appropriate integral cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:3,Performance,cache,cache,3,"// cache got sterilized, trigger repopulation of this slot, then try again...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx:13,Performance,cache,cache,13,"// loop over cache, and sum...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddition.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddition.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:826,Energy Efficiency,efficient,efficient,826,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAddModel; ///; /// RooAddModel is an efficient implementation of a sum of PDFs of the form; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; /// \f]; /// or; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; /// \f]; /// The first form is for extended likelihood fits, where the; /// expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; /// can either be explicitly provided, or, if all components support; /// extended likelihood fits, they can be calculated from the contribution; /// of each PDF to the total number of expected events.; ///; /// In the second form, the sum of the coefficients is enforced to be one,; /// and the coefficient of the last PDF is calculated from that condition.; ///; /// RooAddModel relies on each component PDF to be normalized, and will perform; /// no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; /// An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent; /// of each coefficient \f$ i \f$.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:1165,Modifiability,extend,extended,1165,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAddModel; ///; /// RooAddModel is an efficient implementation of a sum of PDFs of the form; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; /// \f]; /// or; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; /// \f]; /// The first form is for extended likelihood fits, where the; /// expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; /// can either be explicitly provided, or, if all components support; /// extended likelihood fits, they can be calculated from the contribution; /// of each PDF to the total number of expected events.; ///; /// In the second form, the sum of the coefficients is enforced to be one,; /// and the coefficient of the last PDF is calculated from that condition.; ///; /// RooAddModel relies on each component PDF to be normalized, and will perform; /// no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; /// An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent; /// of each coefficient \f$ i \f$.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:1359,Modifiability,extend,extended,1359,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAddModel; ///; /// RooAddModel is an efficient implementation of a sum of PDFs of the form; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; /// \f]; /// or; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; /// \f]; /// The first form is for extended likelihood fits, where the; /// expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; /// can either be explicitly provided, or, if all components support; /// extended likelihood fits, they can be calculated from the contribution; /// of each PDF to the total number of expected events.; ///; /// In the second form, the sum of the coefficients is enforced to be one,; /// and the coefficient of the last PDF is calculated from that condition.; ///; /// RooAddModel relies on each component PDF to be normalized, and will perform; /// no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; /// An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent; /// of each coefficient \f$ i \f$.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:1722,Performance,perform,perform,1722,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooAddModel; ///; /// RooAddModel is an efficient implementation of a sum of PDFs of the form; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + c_n \cdot \mathrm{PDF}_n; /// \f]; /// or; /// \f[; /// c_1 \cdot \mathrm{PDF}_1 + c_2 \cdot \mathrm{PDF}_2 + ... + \left( 1-\sum_{i=1}^{n-1} c_i \right) \cdot \mathrm{PDF}_n; /// \f]; /// The first form is for extended likelihood fits, where the; /// expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; /// can either be explicitly provided, or, if all components support; /// extended likelihood fits, they can be calculated from the contribution; /// of each PDF to the total number of expected events.; ///; /// In the second form, the sum of the coefficients is enforced to be one,; /// and the coefficient of the last PDF is calculated from that condition.; ///; /// RooAddModel relies on each component PDF to be normalized, and will perform; /// no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; /// An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent; /// of each coefficient \f$ i \f$.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:321,Modifiability,extend,extended,321,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:394,Modifiability,inherit,inherit,394,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:440,Modifiability,inherit,inherit,440,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:254,Integrability,depend,dependent,254,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddModel to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:153,Performance,perform,performed,153,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddModel to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:238,Integrability,depend,dependent,238,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the default range. This make the shape of a RooAddModel; /// explicitly dependent on the range of the observables. To allow; /// a range independent definition of the fraction this function; /// instructs RooAddModel to freeze its interpretation in the given; /// named range. If the current normalization range is different; /// from the reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions using; /// ratios of integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:153,Performance,perform,performed,153,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the default range. This make the shape of a RooAddModel; /// explicitly dependent on the range of the observables. To allow; /// a range independent definition of the fraction this function; /// instructs RooAddModel to freeze its interpretation in the given; /// named range. If the current normalization range is different; /// from the reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions using; /// ratios of integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:256,Safety,avoid,avoid,256,"////////////////////////////////////////////////////////////////////////////////; /// Instantiate a clone of this resolution model representing a convolution with given; /// basis function. The owners object name is incorporated in the clones name; /// to avoid multiple convolution objects with the same name in complex PDF structures.; ///; /// RooAddModel will clone all the component models to create a composite convolution object",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:22,Modifiability,variab,variable,22,"// Check that primary variable of basis functions is our convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:69,Modifiability,variab,variable,69,"// Check that primary variable of basis functions is our convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:177,Deployability,integrat,integrated,177,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset; /// in range 'rangeName'. If cache element does not exist, create and fill it on the fly. The cache contains; /// suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection; /// integrals to calculated transformed fraction coefficients when a frozen reference frame is provided; /// and projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:177,Integrability,integrat,integrated,177,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset; /// in range 'rangeName'. If cache element does not exist, create and fill it on the fly. The cache contains; /// suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection; /// integrals to calculated transformed fraction coefficients when a frozen reference frame is provided; /// and projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset; /// in range 'rangeName'. If cache element does not exist, create and fill it on the fly. The cache contains; /// suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection; /// integrals to calculated transformed fraction coefficients when a frozen reference frame is provided; /// and projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:228,Performance,cache,cache,228,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset; /// in range 'rangeName'. If cache element does not exist, create and fill it on the fly. The cache contains; /// suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection; /// integrals to calculated transformed fraction coefficients when a frozen reference frame is provided; /// and projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:293,Performance,cache,cache,293,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset; /// in range 'rangeName'. If cache element does not exist, create and fill it on the fly. The cache contains; /// suplemental normalization terms (in case not all added p.d.f.s have the same observables), projection; /// integrals to calculated transformed fraction coefficients when a frozen reference frame is provided; /// and projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:12,Performance,cache,cache,12,"// Check if cache already exists",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:13,Performance,cache,cache,13,"//Create new cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:217,Modifiability,extend,extended,217,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:129,Performance,cache,cache,129,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:92,Availability,error,error,92,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:157,Availability,error,error,157,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:163,Integrability,message,messages,163,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:36,Deployability,integrat,integrate,36,"// Declare that we can analytically integrate all requested observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:36,Integrability,integrat,integrate,36,"// Declare that we can analytically integrate all requested observables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:100,Deployability,configurat,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// Check if this configuration was created before",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:100,Modifiability,config,configuration,100,"////////////////////////////////////////////////////////////////////////////////; /// Check if this configuration was created before",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:8,Performance,Cache,Cache,8,"// Fill Cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:6,Deployability,integrat,integration,6,"// No integration scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:6,Integrability,integrat,integration,6,"// No integration scenario",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:11,Deployability,integrat,integration,11,"// Partial integration scenarios",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:11,Integrability,integrat,integration,11,"// Partial integration scenarios",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:6,Performance,cache,cache,6,"// If cache has been sterilized, revive this slot",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:202,Modifiability,extend,extended,202,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of expected events, which is either the sum of all coefficients; /// or the sum of the components extended terms",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:14,Modifiability,extend,extended,14,"// Sum of the extended terms",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:113,Testability,test,test,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:113,Testability,test,test,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:116,Energy Efficiency,efficient,efficiently,116,"////////////////////////////////////////////////////////////////////////////////; /// Return specialized context to efficiently generate toy events from RooAddModels.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:107,Safety,safe,safe,107,"////////////////////////////////////////////////////////////////////////////////; /// Direct generation is safe if all components say so",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:130,Performance,cache,cache,130,"////////////////////////////////////////////////////////////////////////////////; /// List all RooAbsArg derived contents in this cache element",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx:144,Usability,intuit,intuitively,144,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddModel.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddModel.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:818,Energy Efficiency,Efficient,Efficient,818,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAddPdf; \ingroup Roofitcore. Efficient implementation of a sum of PDFs of the form. \f[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \f]. or; \f[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \f]. The first form is for extended likelihood fits, where the; expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated from the contribution; of each PDF to the total expected number of events. In the second form, the sum of the coefficients is required to be 1 or less,; and the coefficient of the last PDF is calculated automatically from the condition; that the sum of all coefficients has to be 1. ### Recursive coefficients; It is also possible to parameterise the coefficients recursively. \f[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \f]. In this form the sum of the coefficients is always less than 1.0; for all possib",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:1087,Modifiability,extend,extended,1087,"Core *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAddPdf; \ingroup Roofitcore. Efficient implementation of a sum of PDFs of the form. \f[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \f]. or; \f[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \f]. The first form is for extended likelihood fits, where the; expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated from the contribution; of each PDF to the total expected number of events. In the second form, the sum of the coefficients is required to be 1 or less,; and the coefficient of the last PDF is calculated automatically from the condition; that the sum of all coefficients has to be 1. ### Recursive coefficients; It is also possible to parameterise the coefficients recursively. \f[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \f]. In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1.; \note Don't pass the \f$ n^\mathrm{th} \f$ coefficient. It",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:1269,Modifiability,extend,extended,1269,"edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooAddPdf; \ingroup Roofitcore. Efficient implementation of a sum of PDFs of the form. \f[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \f]. or; \f[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \f]. The first form is for extended likelihood fits, where the; expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated from the contribution; of each PDF to the total expected number of events. In the second form, the sum of the coefficients is required to be 1 or less,; and the coefficient of the last PDF is calculated automatically from the condition; that the sum of all coefficients has to be 1. ### Recursive coefficients; It is also possible to parameterise the coefficients recursively. \f[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \f]. In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1.; \note Don't pass the \f$ n^\mathrm{th} \f$ coefficient. It is always 1, since the normalisation condition removes one degree of freedom. RooAddPdf relies on each component PDF to be normalized and will perform; no normaliz",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:2810,Modifiability,extend,extended,2810,"; \f[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \f]. The first form is for extended likelihood fits, where the; expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated from the contribution; of each PDF to the total expected number of events. In the second form, the sum of the coefficients is required to be 1 or less,; and the coefficient of the last PDF is calculated automatically from the condition; that the sum of all coefficients has to be 1. ### Recursive coefficients; It is also possible to parameterise the coefficients recursively. \f[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \f]. In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1.; \note Don't pass the \f$ n^\mathrm{th} \f$ coefficient. It is always 1, since the normalisation condition removes one degree of freedom. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent of each \f$ c_i \f$. ## Difference between RooAddPdf / RooRealSumFunc / RooRealSumPdf; - RooAddPdf is a PDF of PDFs, *i.e.* its components need to be normalised and non-negative.; - RooRealSumPdf is a PDF of functions, *i.e.*, its components can be negative, but their sum cannot be. The normalisation; is computed automatically, unless the PDF is extended (see above).; - RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:2262,Performance,perform,perform,2262,"; \f[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \f]. The first form is for extended likelihood fits, where the; expected number of events is \f$ \sum_i c_i \f$. The coefficients \f$ c_i \f$; can either be explicitly provided, or, if all components support; extended likelihood fits, they can be calculated from the contribution; of each PDF to the total expected number of events. In the second form, the sum of the coefficients is required to be 1 or less,; and the coefficient of the last PDF is calculated automatically from the condition; that the sum of all coefficients has to be 1. ### Recursive coefficients; It is also possible to parameterise the coefficients recursively. \f[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \f]. In this form the sum of the coefficients is always less than 1.0; for all possible values of the individual coefficients between 0 and 1.; \note Don't pass the \f$ n^\mathrm{th} \f$ coefficient. It is always 1, since the normalisation condition removes one degree of freedom. RooAddPdf relies on each component PDF to be normalized and will perform; no normalization other than calculating the proper last coefficient \f$ c_n \f$, if requested.; An (enforced) condition for this assumption is that each \f$ \mathrm{PDF}_i \f$ is independent of each \f$ c_i \f$. ## Difference between RooAddPdf / RooRealSumFunc / RooRealSumPdf; - RooAddPdf is a PDF of PDFs, *i.e.* its components need to be normalised and non-negative.; - RooRealSumPdf is a PDF of functions, *i.e.*, its components can be negative, but their sum cannot be. The normalisation; is computed automatically, unless the PDF is extended (see above).; - RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:321,Modifiability,extend,extended,321,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; ///; /// If the recursiveFraction flag is true, the coefficients are interpreted as recursive; /// coefficients as explained in the class description.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:394,Modifiability,inherit,inherit,394,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; ///; /// If the recursiveFraction flag is true, the coefficients are interpreted as recursive; /// coefficients as explained in the class description.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:440,Modifiability,inherit,inherit,440,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of PDFs and list of coefficients.; /// Each pdf list element (i) is paired with coefficient list element (i).; /// The number of coefficients must be either equal to the number of PDFs,; /// in which case extended MLL fitting is enabled, or be one less.; ///; /// All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; ///; /// If the recursiveFraction flag is true, the coefficients are interpreted as recursive; /// coefficients as explained in the class description.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:119,Modifiability,extend,extended,119,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of extended PDFs. There are no coefficients as the expected; /// number of events from each components determine the relative weight of the PDFs.; ///; /// All PDFs must inherit from RooAbsPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:286,Modifiability,inherit,inherit,286,"////////////////////////////////////////////////////////////////////////////////; /// Generic constructor from list of extended PDFs. There are no coefficients as the expected; /// number of events from each components determine the relative weight of the PDFs.; ///; /// All PDFs must inherit from RooAbsPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:254,Integrability,depend,dependent,254,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddPdf to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:153,Performance,perform,performed,153,"////////////////////////////////////////////////////////////////////////////////; /// By default the interpretation of the fraction coefficients is; /// performed in the contextual choice of observables. This makes the; /// shape of the p.d.f explicitly dependent on the choice of; /// observables. This method instructs RooAddPdf to freeze the; /// interpretation of the coefficients to be done in the given set of; /// observables. If frozen, fractions are automatically transformed; /// from the reference normalization set to the contextual normalization; /// set by ratios of integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:604,Deployability,integrat,integrating,604,"////////////////////////////////////////////////////////////////////////////////; /// By default, fraction coefficients are assumed to refer to the default; /// fit range. This makes the shape of a RooAddPdf; /// explicitly dependent on the range of the observables. Calling this function; /// allows for a range-independent definition of the fractions, because it; /// ties all coefficients to the given; /// named range. If the normalisation range is different; /// from this reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions by; /// integrating over the ranges, and comparing these integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:224,Integrability,depend,dependent,224,"////////////////////////////////////////////////////////////////////////////////; /// By default, fraction coefficients are assumed to refer to the default; /// fit range. This makes the shape of a RooAddPdf; /// explicitly dependent on the range of the observables. Calling this function; /// allows for a range-independent definition of the fractions, because it; /// ties all coefficients to the given; /// named range. If the normalisation range is different; /// from this reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions by; /// integrating over the ranges, and comparing these integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:604,Integrability,integrat,integrating,604,"////////////////////////////////////////////////////////////////////////////////; /// By default, fraction coefficients are assumed to refer to the default; /// fit range. This makes the shape of a RooAddPdf; /// explicitly dependent on the range of the observables. Calling this function; /// allows for a range-independent definition of the fractions, because it; /// ties all coefficients to the given; /// named range. If the normalisation range is different; /// from this reference range, the appropriate fraction coefficients; /// are automatically calculated from the reference fractions by; /// integrating over the ranges, and comparing these integrals.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:203,Deployability,integrat,integration,203,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:268,Deployability,Integrat,Integration,268,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:301,Deployability,integrat,integrated,301,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:321,Deployability,integrat,integrations,321,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:203,Integrability,integrat,integration,203,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:268,Integrability,Integrat,Integration,268,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:301,Integrability,integrat,integrated,301,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:321,Integrability,integrat,integrations,321,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:226,Modifiability,variab,variables,226,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:285,Modifiability,Variab,Variables,285,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:95,Performance,cache,cache,95,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:338,Performance,perform,performed,338,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:365,Performance,cache,cache,365,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:430,Performance,cache,cache,430,"////////////////////////////////////////////////////////////////////////////////; /// Retrieve cache element for the computation of the PDF normalisation.; /// \param[in] nset Current normalisation set (integration over these variables yields 1).; /// \param[in] iset Integration set. Variables to be integrated over (if integrations are performed).; ///; /// If a cache element does not exist, create and fill it on the fly. The cache also contains; /// - Supplemental normalization terms (in case not all added p.d.f.s have the same observables); /// - Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; /// - Projection integrals for similar transformations when a frozen reference range is provided.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:12,Performance,cache,cache,12,"// Check if cache already exists",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:13,Performance,cache,cache,13,"//Create new cache",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:217,Modifiability,extend,extended,217,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:549,Modifiability,variab,variables,549,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:129,Performance,cache,cache,129,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:369,Performance,cache,cache,369,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:379,Performance,cache,cache,379,"////////////////////////////////////////////////////////////////////////////////; /// Update the coefficient values in the given cache element: calculate new remainder; /// fraction, normalize fractions obtained from extended ML terms to unity, and; /// multiply the various range and dimensional corrections needed in the; /// current use context.; ///; /// param[in] cache The cache element for the given normalization set that; /// stores the supplementary normalization values and; /// projection-related objects.; /// param[in] nset The set of variables to normalize over.; /// param[in] syncCoefValues If the initial values of the coefficients still; /// need to be copied from the `_coefList` elements to; /// the `_coefCache`. True by default.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:105,Performance,cache,cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Look up projection cache and per-PDF norm sets. If a PDF doesn't have a special; /// norm set, use the `defaultNorm`. If `defaultNorm == nullptr`, use the member; /// _normSet.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:128,Integrability,depend,depends,128,"// A RooAddPdf needs to have a normalization set defined, otherwise its; // coefficient will not be uniquely defined. Its shape depends on the; // normalization provided. Un-normalized calls to RooAddPdf can happen in; // Roofit, when printing the pdf's or when computing integrals. In these case,; // if the pdf has a normalization set previously defined (i.e. stored as a; // datamember in _copyOfLastNormSet) it should use it by default when the pdf; // is evaluated without passing a normalizations set (in pdf->getVal(nullptr) ); // In the case of no pre-defined normalization set exists, a warning will be; // produced, since the obtained value will be arbitrary. Note that to avoid; // unnecessary warning messages, when calling RooAbsPdf::printValue or; // RooAbsPdf::graphVizTree, the printing of the warning messages for the; // RooFit::Eval topic is explicitly disabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:713,Integrability,message,messages,713,"// A RooAddPdf needs to have a normalization set defined, otherwise its; // coefficient will not be uniquely defined. Its shape depends on the; // normalization provided. Un-normalized calls to RooAddPdf can happen in; // Roofit, when printing the pdf's or when computing integrals. In these case,; // if the pdf has a normalization set previously defined (i.e. stored as a; // datamember in _copyOfLastNormSet) it should use it by default when the pdf; // is evaluated without passing a normalizations set (in pdf->getVal(nullptr) ); // In the case of no pre-defined normalization set exists, a warning will be; // produced, since the obtained value will be arbitrary. Note that to avoid; // unnecessary warning messages, when calling RooAbsPdf::printValue or; // RooAbsPdf::graphVizTree, the printing of the warning messages for the; // RooFit::Eval topic is explicitly disabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:818,Integrability,message,messages,818,"// A RooAddPdf needs to have a normalization set defined, otherwise its; // coefficient will not be uniquely defined. Its shape depends on the; // normalization provided. Un-normalized calls to RooAddPdf can happen in; // Roofit, when printing the pdf's or when computing integrals. In these case,; // if the pdf has a normalization set previously defined (i.e. stored as a; // datamember in _copyOfLastNormSet) it should use it by default when the pdf; // is evaluated without passing a normalizations set (in pdf->getVal(nullptr) ); // In the case of no pre-defined normalization set exists, a warning will be; // produced, since the obtained value will be arbitrary. Note that to avoid; // unnecessary warning messages, when calling RooAbsPdf::printValue or; // RooAbsPdf::graphVizTree, the printing of the warning messages for the; // RooFit::Eval topic is explicitly disabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:683,Safety,avoid,avoid,683,"// A RooAddPdf needs to have a normalization set defined, otherwise its; // coefficient will not be uniquely defined. Its shape depends on the; // normalization provided. Un-normalized calls to RooAddPdf can happen in; // Roofit, when printing the pdf's or when computing integrals. In these case,; // if the pdf has a normalization set previously defined (i.e. stored as a; // datamember in _copyOfLastNormSet) it should use it by default when the pdf; // is evaluated without passing a normalizations set (in pdf->getVal(nullptr) ); // In the case of no pre-defined normalization set exists, a warning will be; // produced, since the obtained value will be arbitrary. Note that to avoid; // unnecessary warning messages, when calling RooAbsPdf::printValue or; // RooAbsPdf::graphVizTree, the printing of the warning messages for the; // RooFit::Eval topic is explicitly disabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:190,Deployability,update,update,190,"// If nset is still nullptr, get the pointer to a copy of the last-used; // normalization set. It nset is not nullptr, check whether the copy of; // the last-used normalization set needs an update.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:92,Availability,error,error,92,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:157,Availability,error,error,157,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:163,Integrability,message,messages,163,"////////////////////////////////////////////////////////////////////////////////; /// Reset error counter to given value, limiting the number; /// of future error messages for this pdf to 'resetValue'",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:188,Deployability,integrat,integration,188,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:220,Deployability,integrat,integration,220,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:312,Deployability,integrat,integration,312,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:431,Deployability,integrat,integrated,431,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:554,Deployability,integrat,integrating,554,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:621,Deployability,integrat,integration,621,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:658,Deployability,integrat,integration,658,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:188,Integrability,integrat,integration,188,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:220,Integrability,integrat,integration,220,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:312,Integrability,integrat,integration,312,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:431,Integrability,integrat,integrated,431,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:554,Integrability,integrat,integrating,554,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:621,Integrability,integrat,integration,621,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:658,Integrability,integrat,integration,658,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:409,Modifiability,variab,variables,409,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:141,Performance,perform,performed,141,"////////////////////////////////////////////////////////////////////////////////; /// Determine which part (if any) of given integral can be performed analytically.; /// If any analytical integration is possible, return integration scenario code; ///; /// RooAddPdf queries each component PDF for its analytical integration capability of the requested; /// set ('allVars'). It finds the largest common set of variables that can be integrated; /// by all components. If such a set exists, it reconfirms that each component is capable of; /// analytically integrating the common set, and combines the components individual integration; /// codes into a single integration code valid for RooAddPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:54,Deployability,integrat,integrate,54,"// First iteration, determine what each component can integrate analytically",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:54,Integrability,integrat,integrate,54,"// First iteration, determine what each component can integrate analytically",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:30,Deployability,integrat,integrated,30,"// Observables that cannot be integrated analytically by this component are dropped from the common list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:30,Integrability,integrat,integrated,30,"// Observables that cannot be integrated analytically by this component are dropped from the common list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:28,Deployability,integrat,integrated,28,"// If no observables can be integrated analytically, return code 0 here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:28,Integrability,integrat,integrated,28,"// If no observables can be integrated analytically, return code 0 here",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:26,Deployability,integrat,integration,26,"// Now retrieve codes for integration over common set of analytically integrable observables for each component",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:26,Integrability,integrat,integration,26,"// Now retrieve codes for integration over common set of analytically integrable observables for each component",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:25,Deployability,integrat,integrated,25,"// Mare all analytically integrated observables as such",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:25,Integrability,integrat,integrated,25,"// Mare all analytically integrated observables as such",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:39,Deployability,integrat,integrated,39,"// Store set of variables analytically integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:39,Integrability,integrat,integrated,39,"// Store set of variables analytically integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:16,Modifiability,variab,variables,16,"// Store set of variables analytically integrated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:13,Energy Efficiency,adapt,adaptation,13,"// WVE needs adaptation to handle new rangeName feature",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:13,Modifiability,adapt,adaptation,13,"// WVE needs adaptation to handle new rangeName feature",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:23,Deployability,integrat,integration,23,"// Retrieve analytical integration subCodes and set of observabels integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:67,Deployability,integrat,integrated,67,"// Retrieve analytical integration subCodes and set of observabels integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:23,Integrability,integrat,integration,23,"// Retrieve analytical integration subCodes and set of observabels integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:67,Integrability,integrat,integrated,67,"// Retrieve analytical integration subCodes and set of observabels integrated over",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:16,Deployability,integrat,integration,16,"// cout << ""WVE integration of RooAddPdf without normalization, but have reference set, using ref set for normalization"" << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:16,Integrability,integrat,integration,16,"// cout << ""WVE integration of RooAddPdf without normalization, but have reference set, using ref set for normalization"" << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:21,Deployability,update,updateCoefCache,21,"//cout << ""ROP::aIWN updateCoefCache with rangeName = "" << (rangeName?rangeName:""<null>"") << std::endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:202,Modifiability,extend,extended,202,"////////////////////////////////////////////////////////////////////////////////; /// Return the number of expected events, which is either the sum of all coefficients; /// or the sum of the components extended terms, multiplied with the fraction that; /// is in the current range w.r.t the reference range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:222,Testability,log,logic,222,"// If the _refCoefNorm is empty or it's equal to normSet anyway, this is not; // a conditional pdf and we don't need to do any transformation. See also; // RooAddPdf::compileForNormSet() for more explanations on a similar logic.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:113,Testability,test,test,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of observables; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:113,Testability,test,test,113,"////////////////////////////////////////////////////////////////////////////////; /// Interface function used by test statistics to freeze choice of range; /// for interpretation of fraction coefficients",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:116,Energy Efficiency,efficient,efficiently,116,"////////////////////////////////////////////////////////////////////////////////; /// Return specialized context to efficiently generate toy events from RooAddPdfs; /// return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:109,Integrability,depend,depend,109,"////////////////////////////////////////////////////////////////////////////////; /// If all components that depend on obs are binned, so is their sum.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:129,Performance,cache,cache-and-track,129,"////////////////////////////////////////////////////////////////////////////////; /// Label OK'ed components of a RooAddPdf with cache-and-track",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:142,Usability,intuit,intuitively,142,"////////////////////////////////////////////////////////////////////////////////; /// Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the; /// product operator construction",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:34,Performance,cache,cached,34,"// If a server is redirected, the cached normalization set might not point; // to the right observables anymore. We need to reset it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:678,Performance,cache,caches,678,"// In the conditional case, things become more complicated. The original; // getValV() method is covering this case with very complicated logic,; // caching multiple new RooFit objects to scale the individual coefficients; // of the RooAddPdf.; //; // However, it's not complicated what we need to do mathematically:; //; // Since:; // 1. p(x, y) = p(x | y) * p(y); // 2. p(y) = Integral of p(x, y) over x; //; // We conclude:; // p(x, y); // p(x | y) = --------------------------; // Integral of p(x, y) over x; //; // What follows is the implementation of this formula in RooFit. By doing; // this here in compileForNormSet(), we don't invoke the old RooAddPdf; // projection caches (note that no conditional pdfs are on the right hand; // side of the equation).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx:138,Testability,log,logic,138,"// In the conditional case, things become more complicated. The original; // getValV() method is covering this case with very complicated logic,; // caching multiple new RooFit objects to scale the individual coefficients; // of the RooAddPdf.; //; // However, it's not complicated what we need to do mathematically:; //; // Since:; // 1. p(x, y) = p(x | y) * p(y); // 2. p(y) = Integral of p(x, y) over x; //; // We conclude:; // p(x, y); // p(x | y) = --------------------------; // Integral of p(x, y) over x; //; // What follows is the implementation of this formula in RooFit. By doing; // this here in compileForNormSet(), we don't invoke the old RooAddPdf; // projection caches (note that no conditional pdfs are on the right hand; // side of the equation).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAddPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAddPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:843,Deployability,integrat,integration,843,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAICRegistry.cxx; \class RooAICRegistry; \ingroup Roofitcore. Utility class for operator p.d.f; classes that keeps track of analytical integration codes and; associated normalization and integration sets.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:895,Deployability,integrat,integration,895,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAICRegistry.cxx; \class RooAICRegistry; \ingroup Roofitcore. Utility class for operator p.d.f; classes that keeps track of analytical integration codes and; associated normalization and integration sets.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:843,Integrability,integrat,integration,843,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAICRegistry.cxx; \class RooAICRegistry; \ingroup Roofitcore. Utility class for operator p.d.f; classes that keeps track of analytical integration codes and; associated normalization and integration sets.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:895,Integrability,integrat,integration,895,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooAICRegistry.cxx; \class RooAICRegistry; \ingroup Roofitcore. Utility class for operator p.d.f; classes that keeps track of analytical integration codes and; associated normalization and integration sets.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:30,Energy Efficiency,allocate,allocated,30,"// Delete code list array, if allocated",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:402,Deployability,configurat,configuration,402,"////////////////////////////////////////////////////////////////////////////////; /// Store given arrays of integer codes, and up to four RooArgSets in; /// the registry (each setX pointer may be null). The registry; /// clones all RooArgSets internally so the RooArgSets passed as; /// arguments do not need to live beyond the store() call. The return; /// value is a unique master code for the given configuration of; /// integers and RooArgSets. If an identical combination is; /// previously stored in the registry no objects are stored and the; /// unique code of the existing entry is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:402,Modifiability,config,configuration,402,"////////////////////////////////////////////////////////////////////////////////; /// Store given arrays of integer codes, and up to four RooArgSets in; /// the registry (each setX pointer may be null). The registry; /// clones all RooArgSets internally so the RooArgSets passed as; /// arguments do not need to live beyond the store() call. The return; /// value is a unique master code for the given configuration of; /// integers and RooArgSets. If an identical combination is; /// previously stored in the registry no objects are stored and the; /// unique code of the existing entry is returned.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:23,Deployability,configurat,configuration,23,"// Check that supplied configuration of lists is identical",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx:23,Modifiability,config,configuration,23,"// Check that supplied configuration of lists is identical",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooAICRegistry.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooAICRegistry.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx:1493,Availability,error,error,1493,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooArgList; /// RooArgList is a container object that can hold multiple RooAbsArg objects.; /// The container has list semantics which means that:; ///; /// - Contained objects are ordered, The iterator; /// follows the object insertion order.; ///; /// - Objects can be retrieved by name and index; ///; /// - Multiple objects with the same name are allowed; ///; /// Ownership of contents.; ///; /// Unowned objects are inserted with the add() method. Owned objects; /// are added with addOwned() or addClone(). A RooArgSet either owns all; /// of it contents, or none, which is determined by the first `<add>`; /// call. Once an ownership status is selected, inappropriate `<add>` calls; /// will return error status. Clearing the list via removeAll() resets the; /// ownership status. Arguments supplied in the constructor are always added; /// as unowned elements.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx:1507,Usability,Clear,Clearing,1507,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooArgList; /// RooArgList is a container object that can hold multiple RooAbsArg objects.; /// The container has list semantics which means that:; ///; /// - Contained objects are ordered, The iterator; /// follows the object insertion order.; ///; /// - Objects can be retrieved by name and index; ///; /// - Multiple objects with the same name are allowed; ///; /// Ownership of contents.; ///; /// Unowned objects are inserted with the add() method. Owned objects; /// are added with addOwned() or addClone(). A RooArgSet either owns all; /// of it contents, or none, which is determined by the first `<add>`; /// call. Once an ownership status is selected, inappropriate `<add>` calls; /// will return error status. Clearing the list via removeAll() resets the; /// ownership status. Arguments supplied in the constructor are always added; /// as unowned elements.; ///; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx:217,Integrability,message,message,217,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a root TCollection. Elements in the collection that; /// do not inherit from RooAbsArg will be skipped. A warning message; /// will be printed for every skipped item.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx:167,Modifiability,inherit,inherit,167,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a root TCollection. Elements in the collection that; /// do not inherit from RooAbsArg will be skipped. A warning message; /// will be printed for every skipped item.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgList.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgList.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx:78,Integrability,interface,interface,78,/**; \file RooArgProxy.cxx; \class RooArgProxy; \ingroup Roofitcore. Abstract interface for RooAbsArg proxy classes.; A RooArgProxy is the general mechanism to store references; to other RooAbsArgs inside a RooAbsArg. Creating a RooArgProxy adds the proxied object to the proxy owners; server list (thus receiving value/shape dirty flags from it) and; registers itself with the owning class. The latter allows the; owning class to change the proxied pointer when the server it; points to gets redirected (e.g. in a copy or clone operation).; **/,MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgProxy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx:121,Modifiability,variab,variable,121,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgProxy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx:121,Modifiability,variab,variable,121,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with owner and proxied variable. The valueServer and shapeServer booleans; /// control if the inserted client-server link in the owner propagates value and/or; /// shape dirty flags. If proxyOwnsArg is true, the proxy takes ownership of its component",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgProxy.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgProxy.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:1664,Availability,error,error,1664,"opyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooArgSet; /// RooArgSet is a container object that can hold multiple RooAbsArg objects.; /// The container has set semantics which means that:; ///; /// - Every object it contains must have a unique name returned by GetName().; ///; /// - Contained objects are not ordered, although the set can be traversed; /// using an iterator returned by createIterator(). The iterator does not; /// necessarily follow the object insertion order.; ///; /// - Objects can be retrieved by name only, and not by index.; ///; ///; /// Ownership of contents; /// -------------------------; /// Unowned objects are inserted with the add() method. Owned objects; /// are added with addOwned() or addClone(). A RooArgSet either owns all; /// of it contents, or none, which is determined by the first `add`; /// call. Once an ownership status is selected, inappropriate `add` calls; /// will return error status. Clearing the list via removeAll() resets the; /// ownership status. Arguments supplied in the constructor are always added; /// as unowned elements.; ///; ///; /// Uniquely identifying RooArgSet objects; /// ---------------------------------------; ///; /// \warning Before v6.28, it was ensured that no RooArgSet objects on the heap; /// were located at an address that had already been used for a RooArgSet before.; /// With v6.28, this is not guaranteed anymore. Hence, if your code uses pointer; /// comparisons to uniquely identify RooArgSet instances, please consider using; /// the new `RooArgSet::uniqueId()`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:1678,Usability,Clear,Clearing,1678,"opyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /// \class RooArgSet; /// RooArgSet is a container object that can hold multiple RooAbsArg objects.; /// The container has set semantics which means that:; ///; /// - Every object it contains must have a unique name returned by GetName().; ///; /// - Contained objects are not ordered, although the set can be traversed; /// using an iterator returned by createIterator(). The iterator does not; /// necessarily follow the object insertion order.; ///; /// - Objects can be retrieved by name only, and not by index.; ///; ///; /// Ownership of contents; /// -------------------------; /// Unowned objects are inserted with the add() method. Owned objects; /// are added with addOwned() or addClone(). A RooArgSet either owns all; /// of it contents, or none, which is determined by the first `add`; /// call. Once an ownership status is selected, inappropriate `add` calls; /// will return error status. Clearing the list via removeAll() resets the; /// ownership status. Arguments supplied in the constructor are always added; /// as unowned elements.; ///; ///; /// Uniquely identifying RooArgSet objects; /// ---------------------------------------; ///; /// \warning Before v6.28, it was ensured that no RooArgSet objects on the heap; /// were located at an address that had already been used for a RooArgSet before.; /// With v6.28, this is not guaranteed anymore. Hence, if your code uses pointer; /// comparisons to uniquely identify RooArgSet instances, please consider using; /// the new `RooArgSet::uniqueId()`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:229,Integrability,message,messages,229,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a RooArgList. If the list contains multiple; /// objects with the same name, only the first is store in the set.; /// Warning messages will be printed for dropped items.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:30,Availability,error,errors,30,"// verbose to catch duplicate errors",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:353,Integrability,message,messages,353,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a RooArgSet / RooArgList and a pointer to another RooFit object.; ///; /// \param[in] collection Collection of RooFit objects to be added. If a list contains multiple; /// objects with the same name, only the first is stored in the set.; /// Warning messages will be printed for dropped items.; /// \param[in] var1 Further object to be added. If it is already in `collection`,; /// nothing happens, and the warning message is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:518,Integrability,message,message,518,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a RooArgSet / RooArgList and a pointer to another RooFit object.; ///; /// \param[in] collection Collection of RooFit objects to be added. If a list contains multiple; /// objects with the same name, only the first is stored in the set.; /// Warning messages will be printed for dropped items.; /// \param[in] var1 Further object to be added. If it is already in `collection`,; /// nothing happens, and the warning message is suppressed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:30,Availability,error,errors,30,"// verbose to catch duplicate errors",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:217,Integrability,message,message,217,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a root TCollection. Elements in the collection that; /// do not inherit from RooAbsArg will be skipped. A warning message; /// will be printed for every skipped item.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:167,Modifiability,inherit,inherit,167,"////////////////////////////////////////////////////////////////////////////////; /// Constructor from a root TCollection. Elements in the collection that; /// do not inherit from RooAbsArg will be skipped. A warning message; /// will be printed for every skipped item.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:27,Modifiability,variab,variable,27,"// print a warning if this variable is not the same one we; // already have",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:582,Modifiability,variab,variable,582,"////////////////////////////////////////////////////////////////////////////////; /// Write the contents of the argset in ASCII form to given stream.; ///; /// A line is written for each element contained in the form; /// `<argName> = <argValue>`; ///; /// The `<argValue>` part of each element is written by the arguments'; /// writeToStream() function.; /// \param os The stream to write to.; /// \param compact Write only the bare values, separated by ' '.; /// \note In compact mode, the stream cannot be read back into a RooArgSet,; /// but only into a RooArgList, because the variable names are lost.; /// \param section If non-null, add a section header like `[<section>]`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:925,Availability,echo,echo,925,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:1088,Availability,error,error,1088,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:403,Integrability,message,message,403,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:931,Integrability,Message,Message,931,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:973,Integrability,message,message,973,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:898,Modifiability,variab,variables,898,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:1023,Safety,abort,abort,1023,"////////////////////////////////////////////////////////////////////////////////; /// Read the contents of the argset in ASCII form from given stream.; ///; /// The stream is read to end-of-file and each line is assumed to be; /// of the form; /// \code; /// <argName> = <argValue>; /// \endcode; /// Lines starting with argNames not matching any element in the list; /// will be ignored with a warning message. In addition limited C++ style; /// preprocessing and flow control is provided. The following constructions; /// are recognized:; /// \code; /// include ""include.file""; /// \endcode; /// Include given file, recursive inclusion OK; /// \code; /// if (<boolean_expression>); /// <name> = <value>; /// ....; /// else if (<boolean_expression>); /// ....; /// else; /// ....; /// endif; /// \endcode; ///; /// All expressions are evaluated by RooFormula, and may involve any of; /// the sets variables.; /// \code; /// echo <Message>; /// \endcode; /// Print console message while reading from stream; /// \code; /// abort; /// \endcode; /// Force termination of read sequence with error status; ///; /// The value of each argument is read by the arguments readFromStream; /// function.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:39,Modifiability,variab,variables,39,"// Conditional stack and related state variables; // coverity[UNINIT]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:3,Usability,simpl,simple,3,"// simple else: process if nothing else was true",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:11,Availability,echo,echo,11,"// Process echo statements",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx:11,Safety,abort,abort,11,"// Process abort statements",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooArgSet.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooArgSet.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:96,Deployability,integrat,integrator,96,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding binding",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:96,Integrability,integrat,integrator,96,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding binding",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate coordinate buffer size after number of function dimensions",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:16,Deployability,configurat,configuration,16,"// Retrieve bin configuration from integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:16,Modifiability,config,configuration,16,"// Retrieve bin configuration from integrand",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:96,Deployability,integrat,integrator,96,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding binding",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:96,Integrability,integrat,integrator,96,"////////////////////////////////////////////////////////////////////////////////; /// Construct integrator on given function binding binding",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:97,Deployability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:97,Integrability,integrat,integration,97,"////////////////////////////////////////////////////////////////////////////////; /// Change our integration limits. Return true if the new limits are; /// ok, or otherwise false. Always returns false and does nothing; /// if this object was constructed to always use our integrand's limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:101,Deployability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:162,Deployability,Update,Update,162,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx:101,Integrability,integrat,integration,101,"////////////////////////////////////////////////////////////////////////////////; /// Check that our integration range is finite and otherwise return false.; /// Update the limits from the integrand if requested.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:13,Deployability,integrat,integrator,13,"// Numerical integrator workspace",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:13,Integrability,integrat,integrator,13,"// Numerical integrator workspace",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:12,Deployability,integrat,integration,12,"///<! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:12,Integrability,integrat,integration,12,"///<! Lower integration bound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:12,Deployability,integrat,integration,12,"///<! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:12,Integrability,integrat,integration,12,"///<! Upper integration bound",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:14,Deployability,integrat,integration,14,"///<! Size of integration range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h:14,Integrability,integrat,integration,14,"///<! Size of integration range",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinIntegrator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinIntegrator.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:780,Energy Efficiency,Efficient,Efficient,780,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooBinnedGenContext.cxx; \class RooBinnedGenContext; \ingroup Roofitcore. Efficient implementation of the generator context specific for binned pdfs.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:106,Modifiability,variab,variables,106,"////////////////////////////////////////////////////////////////////////////////; /// Attach given set of variables to internal p.d.f. clone",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:3,Modifiability,Extend,Extended,3,"// Extended mode, set contents to Poisson(pdf*nEvents)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:39,Modifiability,Extend,Extend,39,"// Second pass for regular mode - Trim/Extend dataset to exact number of entries; // Calculate difference between what is generated so far and what is requested",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:3,Performance,Perform,Perform,3,"// Perform simple binned accept/reject procedure to get to exact event count",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx:11,Usability,simpl,simple,11,"// Perform simple binned accept/reject procedure to get to exact event count",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinnedGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinnedGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:894,Modifiability,variab,variable,894,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooBinning.cxx; \class RooBinning; \ingroup Roofitcore. Implements a RooAbsBinning in terms; of an array of boundary values, posing no constraints on the choice; of binning, thus allowing variable bin sizes. Various methods allow; the user to add single bin boundaries, mirrored pairs, or sets of; uniformly spaced boundaries.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:3,Modifiability,Variab,Variable,3,"// Variable bin size constructor",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:10,Availability,error,error,10,"// Return error status - no boundary found",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update the internal bin counter",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx:165,Availability,error,error,165,"////////////////////////////////////////////////////////////////////////////////; /// Return upper and lower bound of bin 'bin'. If the return value; /// is true an error occurred",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinning.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinning.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinningCategory.cxx:118,Modifiability,variab,variable,118,"////////////////////////////////////////////////////////////////////////////////; /// Iterator over all bins in input variable and define corresponding state labels",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinningCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinningCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:817,Deployability,continuous,continuous,817,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:920,Deployability,continuous,continuous,920,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1027,Deployability,integrat,integrated,1027,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1262,Deployability,integrat,integrates,1262,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1314,Deployability,integrat,integrator,1314,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1459,Deployability,integrat,integrator,1459,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1512,Deployability,integrat,integrator,1512,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1557,Deployability,integrat,integration,1557,"n LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `prec",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1656,Deployability,integrat,integrator,1656,"************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * -",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1911,Deployability,integrat,integrator,1911,"ontinuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2383,Deployability,Integrat,IntegrateBins,2383,"rom the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2681,Deployability,Continuous,Continuous,2681," it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2806,Deployability,integrat,integrator,2806,"* ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2896,Deployability,continuous,continuous,2896,"`; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional P",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3068,Deployability,integrat,integrators,3068,"e original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</sty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3438,Deployability,integrat,integration,3438," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3509,Deployability,integrat,integrate,3509," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3571,Deployability,Integrat,IntegrateBins,3571," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3811,Deployability,Integrat,IntegrateBins,3811," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3877,Deployability,Integrat,IntegrateBins,3877," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:799,Energy Efficiency,adapt,adapter,799,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1305,Energy Efficiency,adapt,adaptive,1305,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1405,Energy Efficiency,reduce,reduces,1405,"tanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, Integra",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2275,Energy Efficiency,adapt,adapt,2275," integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; *",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:799,Integrability,adapter,adapter,799,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1027,Integrability,integrat,integrated,1027,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1262,Integrability,integrat,integrates,1262,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1314,Integrability,integrat,integrator,1314,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1459,Integrability,integrat,integrator,1459,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1512,Integrability,integrat,integrator,1512,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1557,Integrability,integrat,integration,1557,"n LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `prec",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1656,Integrability,integrat,integrator,1656,"************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * -",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1780,Integrability,wrap,wrap,1780,"ontinuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1911,Integrability,integrat,integrator,1911,"ontinuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1977,Integrability,wrap,wrapped,1977,"veraged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next pa",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2333,Integrability,wrap,wrapping,2333,"his usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting wi",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2383,Integrability,Integrat,IntegrateBins,2383,"rom the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2533,Integrability,wrap,wrapped,2533,"rom the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2545,Integrability,depend,depending,2545,"rom the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that the",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2731,Integrability,wrap,wrapped,2731," it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2806,Integrability,integrat,integrator,2806,"* ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2930,Integrability,wrap,wrapped,2930,"`; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional P",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3068,Integrability,integrat,integrators,3068,"e original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</sty",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3438,Integrability,integrat,integration,3438," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3509,Integrability,integrat,integrate,3509," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3571,Integrability,Integrat,IntegrateBins,3571," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3811,Integrability,Integrat,IntegrateBins,3811," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3877,Integrability,Integrat,IntegrateBins,3877," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:799,Modifiability,adapt,adapter,799,"// Authors: Stephan Hageboeck, CERN; Andrea Sciandra, SCIPP-UCSC/Atlas; Nov 2020; /*****************************************************************************; * RooFit; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSam",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1305,Modifiability,adapt,adaptive,1305,"rkby@uci.edu *; * *; * Copyright (c) 2000-2020, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - In",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2275,Modifiability,adapt,adapt,2275," integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; *",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1617,Performance,perform,performed,1617,"n LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `prec",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:3389,Safety,detect,detect,3389," method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting with RooDataHist. In this case, however, RooFit cannot; * auto-detect that a binned fit is running, and that an integration over the bin is desired (note that there are no bins to; * integrate over in this kind of dataset).; *; * In this case, `IntegrateBins(>0.)` needs to be used, and the desired binning needs to be assigned to the observable; * of the dataset:; * ```; * RooRealVar x(""x"", ""x"", 0., 5.);; * x.setBins(10);; *; * // <create dataset and model>; *; * model.fitTo(data, IntegrateBins(>0.));; * ```; *; * \see RooAbsPdf::fitTo(); * \see IntegrateBins(); *; * \note This feature is currently limited to one-dimensional PDFs.; *; *; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_OFF.png""]{width:12cm;}</style> \endhtmlonly; * \htmlonly <style>div.image img[src=""RooBinSamplingPdf_ON.png"" ]{width:12cm;}</style> \endhtmlonly; * <table>; * <tr><th> Binned fit without %RooBinSamplingPdf <th> Binned fit with %RooBinSamplingPdf </td></tr>; * <tr><td> \image html RooBinSamplingPdf_OFF.png """"; * </td>; * <td> \image html RooBinSamplingPdf_ON.png """"; * </td></tr>; * </table>; *; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:1477,Security,access,accessed,1477,", *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooBinSamplingPdf; * The RooBinSamplingPdf is supposed to be used as an adapter between a continuous PDF; * and a binned distribution.; * When RooFit is used to fit binned data, and the PDF is continuous, it takes the probability density; * at the bin centre as a proxy for the probability averaged (integrated) over the entire bin. This is; * correct only if the second derivative of the function vanishes, though. This is shown in the plots; * below.; *; * For PDFs that have larger curvatures, the RooBinSamplingPdf can be used. It integrates the PDF in each; * bin using an adaptive integrator. This usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, ",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:2299,Testability,test,test,2299,"his usually requires 21 times more function evaluations, but significantly; * reduces biases due to better sampling of the PDF. The integrator can be accessed from the outside; * using integrator(). This can be used to change the integration rules, so less/more function evaluations are; * performed. The target precision of the integrator can be set in the constructor.; *; *; * ### How to use it; * There are two ways to use this class:; * - Manually wrap a PDF:; * ```; * RooBinSamplingPdf binSampler(""<name>"", ""title"", <binned observable of PDF>, <original PDF> [, <precision for integrator>]);; * binSampler.fitTo(data);; * ```; * When a PDF is wrapped with a RooBinSamplingPDF, just use the bin sampling PDF instead of the original one for fits; * or plotting etc.; * \note The binning will be taken from the observable. Make sure that this binning is the same as the one of the dataset that should be fit.; * Use RooRealVar::setBinning() to adapt it.; * - Instruct test statistics to carry out this wrapping automatically:; * ```; * pdf.fitTo(data, IntegrateBins(<precision>));; * ```; * This method is especially useful when used with a simultaneous PDF, since each component will automatically be wrapped,; * depending on the value of `precision`:; * - `precision < 0.`: None of the PDFs are touched, bin sampling is off.; * - `precision = 0.`: Continuous PDFs that are fit to a RooDataHist are wrapped into a RooBinSamplingPdf. The target precision; * forwarded to the integrator is 1.E-4 (the default argument of the constructor).; * - `precision > 0.`: All continuous PDFs are automatically wrapped into a RooBinSamplingPdf, regardless of what data they are; * fit to (see next paragraph). The same `'precision'` is used for all integrators.; *; * ### Simulating a binned fit using RooDataSet; * Some frameworks use unbinned data (RooDataSet) to simulate binned datasets. By adding one entry for each bin centre with the; * appropriate weight, one can achieve the same result as fitting wi",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:263,Deployability,integrat,integrate,263,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:438,Deployability,integrat,integrator,438,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:536,Deployability,integrat,integrator,536,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:527,Energy Efficiency,adapt,adaptive,527,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:263,Integrability,integrat,integrate,263,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:438,Integrability,integrat,integrator,438,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:536,Integrability,integrat,integrator,536,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:527,Modifiability,adapt,adaptive,527,"////////////////////////////////////////////////////////////////////////////////; /// Construct a new RooBinSamplingPdf.; /// \param[in] name A name to identify this object.; /// \param[in] title Title (for e.g. plotting); /// \param[in] observable Observable to integrate over (the one that is binned).; /// \param[in] inputPdf A PDF whose bins should be sampled with higher precision.; /// \param[in] epsilon Relative precision for the integrator, which is used to sample the bins.; /// Note that ROOT's default is to use an adaptive integrator, which in its first iteration usually reaches; /// relative precision of 1.E-4 or better. Therefore, asking for lower precision rarely has an effect.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Deployability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the PDF over the current bin of the observable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Integrability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the PDF over the current bin of the observable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:23,Deployability,integrat,integrator,23,"// Important: When the integrator samples x, caching of sub-tree values needs to be off.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:23,Integrability,integrat,integrator,23,"// Important: When the integrator samples x, caching of sub-tree values needs to be off.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Deployability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the PDF over all its bins, and return a batch with those values.; /// \param[in,out] evalData Struct with evaluation data.; /// \param[in] normSet Normalisation set that's used to evaluate the PDF.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Integrability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the PDF over all its bins, and return a batch with those values.; /// \param[in,out] evalData Struct with evaluation data.; /// \param[in] normSet Normalisation set that's used to evaluate the PDF.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:23,Deployability,integrat,integrator,23,"// Important: When the integrator samples x, caching of sub-tree values needs to be off.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:23,Integrability,integrat,integrator,23,"// Important: When the integrator samples x, caching of sub-tree values needs to be off.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:7,Deployability,integrat,integrate,7,"// Now integrate PDF in each bin:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:7,Integrability,integrat,integrate,7,"// Now integrate PDF in each bin:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:560,Availability,toler,tolerance,560,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:130,Deployability,integrat,integrator,130,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:267,Deployability,integrat,integrator,267,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:334,Deployability,integrat,integration,334,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:383,Deployability,Integrat,IntegratorOneDimOptions,383,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:424,Deployability,integrat,integrator,424,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:492,Deployability,integrat,integration,492,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:600,Deployability,integrat,integrator,600,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:669,Deployability,Integrat,IntegratorOneDim,669,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:718,Deployability,integrat,integration,718,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:795,Deployability,integrat,integrator,795,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:130,Integrability,integrat,integrator,130,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:267,Integrability,integrat,integrator,267,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:334,Integrability,integrat,integration,334,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:383,Integrability,Integrat,IntegratorOneDimOptions,383,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:424,Integrability,integrat,integrator,424,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:492,Integrability,integrat,integration,492,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:600,Integrability,integrat,integrator,600,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:669,Integrability,Integrat,IntegratorOneDim,669,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:718,Integrability,integrat,integration,718,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:795,Integrability,integrat,integrator,795,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:776,Performance,load,loaded,776,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:93,Security,access,access,93,"////////////////////////////////////////////////////////////////////////////////; /// Direct access to the unique_ptr holding the integrator that's used to sample the bins.; /// This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; ///; /// #### Example: Use the 61-point Gauss-Kronrod integration rule; /// ```{.cpp}; /// ROOT::Math::IntegratorOneDimOptions intOptions = pdf.integrator()->Options();; /// intOptions.SetNPoints(6); // 61-point integration rule; /// intOptions.SetRelTolerance(1.E-9); // Smaller tolerance -> more subdivisions; /// pdf.integrator()->SetOptions(intOptions);; /// ```; /// \see ROOT::Math::IntegratorOneDim::SetOptions for more details on integration options.; /// \note When RooBinSamplingPdf is loaded from files, integrator options will fall back to the default values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:7,Deployability,Integrat,Integrator,7,"// GSL Integrator. Will really get it only if MathMore enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:7,Integrability,Integrat,Integrator,7,"// GSL Integrator. Will really get it only if MathMore enabled.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:32,Deployability,Integrat,Integration,32,"// This should read ROOT::Math::Integration::kGAUSS21, but this is in MathMore, so we cannot include it here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:32,Integrability,Integrat,Integration,32,"// This should read ROOT::Math::Integration::kGAUSS21, but this is in MathMore, so we cannot include it here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:106,Deployability,integrat,integrator,106,"////////////////////////////////////////////////////////////////////////////////; /// Binding used by the integrator to evaluate the PDF.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:106,Integrability,integrat,integrator,106,"////////////////////////////////////////////////////////////////////////////////; /// Binding used by the integrator to evaluate the PDF.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Deployability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the wrapped PDF using our current integrator, with given norm set and limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:130,Deployability,integrat,integrator,130,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the wrapped PDF using our current integrator, with given norm set and limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:86,Integrability,Integrat,Integrate,86,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the wrapped PDF using our current integrator, with given norm set and limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:100,Integrability,wrap,wrapped,100,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the wrapped PDF using our current integrator, with given norm set and limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:130,Integrability,integrat,integrator,130,"////////////////////////////////////////////////////////////////////////////////; /// Integrate the wrapped PDF using our current integrator, with given norm set and limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:14,Integrability,wrap,wrapping,14,"/// Creates a wrapping RooBinSamplingPdf if appropriate.; /// \param[in] pdf The input pdf.; /// \param[in] data The dataset to be used in the fit, used to figure out the; /// observables and whether the dataset is binned.; /// \param[in] precision Precision argument for all created RooBinSamplingPdfs.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:15,Deployability,integrat,integration,15,"// User forced integration. Let just apply it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:15,Integrability,integrat,integration,15,"// User forced integration. Let just apply it.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:22,Deployability,integrat,integration,22,"// User didn't forbid integration, and it seems appropriate with a; // RooDataHist.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx:22,Integrability,integrat,integration,22,"// User didn't forbid integration, and it seems appropriate with a; // RooDataHist.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinSamplingPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinSamplingPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:360,Integrability,depend,depends,360,"// The RooHistFunc is only used to access this histogram observables in a; // convenient way. That's why this proxy is not ""serving"" this; // RooBinWidthFunction in any way (see proxy constructor arguments in the; // initializer list above).; //; // However, the variables of the histFunc **need to be** value servers,; // because the width of the current bin depends on the values of the; // observables:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:263,Modifiability,variab,variables,263,"// The RooHistFunc is only used to access this histogram observables in a; // convenient way. That's why this proxy is not ""serving"" this; // RooBinWidthFunction in any way (see proxy constructor arguments in the; // initializer list above).; //; // However, the variables of the histFunc **need to be** value servers,; // because the width of the current bin depends on the values of the; // observables:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:35,Security,access,access,35,"// The RooHistFunc is only used to access this histogram observables in a; // convenient way. That's why this proxy is not ""serving"" this; // RooBinWidthFunction in any way (see proxy constructor arguments in the; // initializer list above).; //; // However, the variables of the histFunc **need to be** value servers,; // because the width of the current bin depends on the values of the; // observables:",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:27,Usability,simpl,simply,27,"// The reason why we can't simply use the histFunc as an ""indirect proxy"" is; // the way HistFactory is implemented. The same RooBinWidthFunction is used; // for all samples (e.g. signal and backgrounds), but uses the RooHistFunc; // of only one of the samples (this is okay because the binnings for all; // samples in the template histogram stack is the same). This entangling of; // the computation graph for the different samples messes up the component; // selection when plotting only some samples with; // `plotOn(..., RooFit::Components(...))`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:98,Deployability,configurat,configuration,98,"/// Compute current bin of observable, and return its volume or inverse volume, depending; /// on configuration chosen in the constructor.; /// If the bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:80,Integrability,depend,depending,80,"/// Compute current bin of observable, and return its volume or inverse volume, depending; /// on configuration chosen in the constructor.; /// If the bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:98,Modifiability,config,configuration,98,"/// Compute current bin of observable, and return its volume or inverse volume, depending; /// on configuration chosen in the constructor.; /// If the bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:140,Deployability,configurat,configuration,140,"/// Compute bin index for all values of the observable(s) in `evalData`, and return their volumes or inverse volumes, depending; /// on the configuration chosen in the constructor.; /// If a bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:118,Integrability,depend,depending,118,"/// Compute bin index for all values of the observable(s) in `evalData`, and return their volumes or inverse volumes, depending; /// on the configuration chosen in the constructor.; /// If a bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx:140,Modifiability,config,configuration,140,"/// Compute bin index for all values of the observable(s) in `evalData`, and return their volumes or inverse volumes, depending; /// on the configuration chosen in the constructor.; /// If a bin is not valid, return a volume of 1.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBinWidthFunction.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBinWidthFunction.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBrentRootFinder.cxx:828,Integrability,interface,interface,828,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooBrentRootFinder.cxx; \class RooBrentRootFinder; \ingroup Roofitcore. Implement the abstract 1-dimensional root finding interface using; the Brent-Decker method. This implementation is based on the one; in the GNU scientific library (v0.99).; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBrentRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBrentRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBrentRootFinder.cxx:171,Performance,load,loads,171,"////////////////////////////////////////////////////////////////////////////////; /// Do the root finding using the Brent-Decker method. Returns a boolean status and; /// loads 'result' with our best guess at the root if true.; /// Prints a warning if the initial interval does not bracket a single; /// root or if the root is not found after a fixed number of iterations.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooBrentRootFinder.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooBrentRootFinder.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:621,Performance,cache,cache,621,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCachedPdf.cxx; \class RooCachedPdf; \ingroup Roofitcore. Implementation of RooAbsCachedPdf that can cache; any external RooAbsPdf input function provided in the constructor.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:554,Deployability,configurat,configurations,554,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:554,Modifiability,config,configurations,554,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:136,Performance,cache,cached,136,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:194,Performance,cache,cache,194,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:264,Performance,cache,cache,264,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:334,Performance,cache,cache,334,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:435,Performance,cache,cache,435,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:503,Performance,cache,cached,503,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function. The dimensions; /// of the cache are automatically matched to the number of observables used; /// in each use context. Multiple cache in different observable may exists; /// simultaneously if the cached p.d.f is used with multiple observable; /// configurations simultaneously",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:168,Modifiability,variab,variable,168,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:136,Performance,cache,cached,136,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:180,Performance,cache,cache,180,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:237,Performance,cache,cache,237,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:307,Performance,cache,cache,307,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:375,Performance,cache,cache,375,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:473,Performance,cache,cache,473,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:542,Performance,cache,cache,542,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:617,Performance,cache,cache,617,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:749,Performance,cache,cache,749,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input p.d.f. Note that; /// the cache is filled with normalized p.d.f values so that the RooHistPdf; /// that represents the cache contents can be explicitly declared as self normalized; /// eliminating the need for superfluous numeric calculations of unit normalization.s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:105,Performance,cache,cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input p.d.f. Note that; /// the cache is filled with normalized p.d.f values so that the RooHistPdf; /// that represents the cache contents can be explicitly declared as self normalized; /// eliminating the need for superfluous numeric calculations of unit normalization.s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:171,Performance,cache,cache,171,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input p.d.f. Note that; /// the cache is filled with normalized p.d.f values so that the RooHistPdf; /// that represents the cache contents can be explicitly declared as self normalized; /// eliminating the need for superfluous numeric calculations of unit normalization.s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:264,Performance,cache,cache,264,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input p.d.f. Note that; /// the cache is filled with normalized p.d.f values so that the RooHistPdf; /// that represents the cache contents can be explicitly declared as self normalized; /// eliminating the need for superfluous numeric calculations of unit normalization.s",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:3,Deployability,Update,Update,3,"// Update contents of histogram",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:116,Performance,cache,cached,116,"////////////////////////////////////////////////////////////////////////////////; /// Defer preferred scan order to cached pdf preference",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:207,Integrability,depend,dependents,207,"////////////////////////////////////////////////////////////////////////////////; /// If this pdf is operated with a fixed set of observables, return; /// the subset of the fixed observables that are actual dependents; /// of the external input p.d.f. If this p.d.f is operated without; /// a fixed set of cache observables, return the actual observables; /// of the external input p.d.f given the choice of observables defined; /// in nset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:306,Performance,cache,cache,306,"////////////////////////////////////////////////////////////////////////////////; /// If this pdf is operated with a fixed set of observables, return; /// the subset of the fixed observables that are actual dependents; /// of the external input p.d.f. If this p.d.f is operated without; /// a fixed set of cache observables, return the actual observables; /// of the external input p.d.f given the choice of observables defined; /// in nset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:161,Modifiability,variab,variables,161,"////////////////////////////////////////////////////////////////////////////////; /// If this p.d.f is operated with a fixed set of observables, return; /// all variables of the external input p.d.f that are not one of; /// the cache observables. If this p.d.f is operated in automatic mode,; /// return the parameters of the external input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx:228,Performance,cache,cache,228,"////////////////////////////////////////////////////////////////////////////////; /// If this p.d.f is operated with a fixed set of observables, return; /// all variables of the external input p.d.f that are not one of; /// the cache observables. If this p.d.f is operated in automatic mode,; /// return the parameters of the external input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedPdf.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedPdf.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:624,Performance,cache,cache,624,"/*****************************************************************************; * Project: RooFit *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCachedReal.cxx; \class RooCachedReal; \ingroup Roofitcore. Implementation of RooAbsCachedReal that can cache; any external RooAbsReal input function provided in the constructor.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:136,Performance,cache,cached,136,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:194,Performance,cache,cache,194,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:264,Performance,cache,cache,264,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached. To control; /// granularity of the binning of the cache histogram set the desired properties; /// in the binning named ""cache"" in the observables of the function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:32,Performance,cache,cache,32,"// Choose same expensive object cache as input function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:168,Modifiability,variab,variable,168,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:136,Performance,cache,cached,136,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:180,Performance,cache,cache,180,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:237,Performance,cache,cache,237,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:307,Performance,cache,cache,307,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:375,Performance,cache,cache,375,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:473,Performance,cache,cache,473,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:542,Performance,cache,cache,542,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:617,Performance,cache,cache,617,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:749,Performance,cache,cache,749,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking name, title and function to be cached and; /// fixed choice of variable to cache. To control granularity of the; /// binning of the cache histogram set the desired properties in the; /// binning named ""cache"" in the observables of the function.; /// If the fixed set of cache observables does not match the observables; /// defined in the use context of the p.d.f the cache is still filled; /// completely. Ee.g. when it is specified to cache x and p and only x; /// is a observable in the given use context the cache histogram will; /// store sampled values for all values of observable x and parameter p.; /// In such a mode of operation the cache will also not be recalculated; /// if the observable p changes",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:32,Performance,cache,cache,32,"// Choose same expensive object cache as input function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:181,Deployability,configurat,configuration,181,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:86,Integrability,Interface,Interface,86,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:201,Integrability,interface,interface,201,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:181,Modifiability,config,configuration,181,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:127,Performance,cache,cache,127,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:165,Performance,cache,cached,165,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:420,Performance,cache,cache,420,"////////////////////////////////////////////////////////////////////////////////; /// Interface function to create an internal cache object that represent; /// each cached function configuration. This interface allows to create and; /// return a class derived from RooAbsCachedReal::FuncCacheElem so that; /// a derived class fillCacheObject implementation can utilize extra functionality; /// defined in such a derived cache class",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:105,Performance,cache,cache,105,"////////////////////////////////////////////////////////////////////////////////; /// Update contents of cache histogram by resampling the input function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:35,Performance,cache,cache,35,"// Delete source clone if we don't cache it",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:207,Integrability,depend,dependents,207,"////////////////////////////////////////////////////////////////////////////////; /// If this pdf is operated with a fixed set of observables, return; /// the subset of the fixed observables that are actual dependents; /// of the external input p.d.f. If this p.d.f is operated without; /// a fixed set of cache observables, return the actual observables; /// of the external input p.d.f given the choice of observables defined; /// in nset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:306,Performance,cache,cache,306,"////////////////////////////////////////////////////////////////////////////////; /// If this pdf is operated with a fixed set of observables, return; /// the subset of the fixed observables that are actual dependents; /// of the external input p.d.f. If this p.d.f is operated without; /// a fixed set of cache observables, return the actual observables; /// of the external input p.d.f given the choice of observables defined; /// in nset",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:161,Modifiability,variab,variables,161,"////////////////////////////////////////////////////////////////////////////////; /// If this p.d.f is operated with a fixed set of observables, return; /// all variables of the external input p.d.f that are not one of; /// the cache observables. If this p.d.f is operated in automatic mode,; /// return the parameters of the external input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx:228,Performance,cache,cache,228,"////////////////////////////////////////////////////////////////////////////////; /// If this p.d.f is operated with a fixed set of observables, return; /// all variables of the external input p.d.f that are not one of; /// the cache observables. If this p.d.f is operated in automatic mode,; /// return the parameters of the external input p.d.f",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCachedReal.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCachedReal.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:878,Deployability,integrat,integrated,878,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:1503,Deployability,configurat,configurations,1503,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:878,Integrability,integrat,integrated,878,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:1046,Integrability,depend,dependent,1046,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:1503,Modifiability,config,configurations,1503,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx:1525,Performance,cache,cached,1525,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCacheManager.cxx; \class RooCacheManager; \ingroup Roofitcore. Manages the storage of any type of data indexed on; the choice of normalization and optionally the set of integrated observables.; The purpose of this class is to facilitate storage of intermediate results; in operator p.d.f.s whose value and inner working are often highly dependent; on the user provided choice of normalization in getVal(). For efficiency reasons these normalization set pointer are; dereferenced as little as possible. This class contains a lookup; table for RooArgSet pointer pairs -> normalization lists. Distinct; pointer pairs that represent the same normalization/projection are; recognized and will all point to the same normalization list. Lists; for up to 'maxSize' different normalization/ projection; configurations can be cached.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCacheManager.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCacheManager.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:948,Integrability,depend,depend,948,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \class RooCategory; \ingroup Roofitcore. Object to represent discrete states.; States have names and index numbers, and the index numbers can be written into datasets and; used in calculations.; A category is ""fundamental"", i.e., its value doesn't depend on the value of other objects.; (Objects in datasets cannot depend on other objects' values, they need to be self-consistent.). A category object can be used to *e.g.* conduct a simultaneous fit of; the same observable in multiple categories. ### Setting up a category; 1. A category can be set up like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Lepton multiplicity category"", {; {""0Lep"", 0},; {""1Lep"", 1},; {""2Lep"", 2},; {""3Lep"", 3}; });; ~~~; 2. Like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Asymmetry"");; myCat[""left""] = -1;; myCat[""right""] = 1;; ~~~; 3. Or like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Asymmetry"");; myCat.defineType(""left"", -1);; myCat.defineType(""right"", 1);; ~~~; Inspect the pairs of state names and state numbers like this:; ~~~{.cpp}; for (const auto& nameIdx : myCat) {; std::cout << nameIdx.first << "" --> "" << nameIdx.second << std::endl;; }; ~~~. ### Changing category states; Category states can be modified either by using the index state (faster) or state names.; For example:; ~~~{.cpp}; myCat.setI",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:1015,Integrability,depend,depend,1015,"**********************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \class RooCategory; \ingroup Roofitcore. Object to represent discrete states.; States have names and index numbers, and the index numbers can be written into datasets and; used in calculations.; A category is ""fundamental"", i.e., its value doesn't depend on the value of other objects.; (Objects in datasets cannot depend on other objects' values, they need to be self-consistent.). A category object can be used to *e.g.* conduct a simultaneous fit of; the same observable in multiple categories. ### Setting up a category; 1. A category can be set up like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Lepton multiplicity category"", {; {""0Lep"", 0},; {""1Lep"", 1},; {""2Lep"", 2},; {""3Lep"", 3}; });; ~~~; 2. Like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Asymmetry"");; myCat[""left""] = -1;; myCat[""right""] = 1;; ~~~; 3. Or like this:; ~~~{.cpp}; RooCategory myCat(""myCat"", ""Asymmetry"");; myCat.defineType(""left"", -1);; myCat.defineType(""right"", 1);; ~~~; Inspect the pairs of state names and state numbers like this:; ~~~{.cpp}; for (const auto& nameIdx : myCat) {; std::cout << nameIdx.first << "" --> "" << nameIdx.second << std::endl;; }; ~~~. ### Changing category states; Category states can be modified either by using the index state (faster) or state names.; For example:; ~~~{.cpp}; myCat.setIndex(5);; myCat.setLabel(""left"")",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:147,Modifiability,variab,variable,147,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. Types must be defined using defineType() before variable can be used",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:297,Availability,error,error,297,"////////////////////////////////////////////////////////////////////////////////; /// Set value by specifying the index code of the desired state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \return bool signalling if an error occurred.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:176,Integrability,message,message,176,"////////////////////////////////////////////////////////////////////////////////; /// Set value by specifying the index code of the desired state.; /// If printError is set, a message will be printed if; /// the specified index does not represent a valid state.; /// \return bool signalling if an error occurred.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:170,Integrability,message,message,170,"////////////////////////////////////////////////////////////////////////////////; /// Set value by specifying the name of the desired state.; /// If printError is set, a message will be printed if; /// the specified label does not represent a valid state.; /// \return false on success.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:134,Availability,avail,available,134,"////////////////////////////////////////////////////////////////////////////////; /// Define a state with given name.; /// The lowest available positive integer is assigned as index. Category; /// state labels may not contain semicolons.; /// \return True in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:270,Availability,error,error,270,"////////////////////////////////////////////////////////////////////////////////; /// Define a state with given name.; /// The lowest available positive integer is assigned as index. Category; /// state labels may not contain semicolons.; /// \return True in case of an error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:212,Availability,error,error,212,"////////////////////////////////////////////////////////////////////////////////; /// Define a state with given name and index. Category; /// state labels may not contain semicolons.; /// \return True in case of error.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:300,Availability,error,error,300,"////////////////////////////////////////////////////////////////////////////////; /// Define multiple states in a single call. Use like:; /// ```; /// myCat.defineTypes({ {""0Lep"", 0}, {""1Lep"", 1}, {""2Lep"", 2}, {""3Lep"", 3} });; /// ```; /// Note: When labels or indices are defined multiple times, an error message is printed,; /// and the corresponding state is ignored.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:306,Integrability,message,message,306,"////////////////////////////////////////////////////////////////////////////////; /// Define multiple states in a single call. Use like:; /// ```; /// myCat.defineTypes({ {""0Lep"", 0}, {""1Lep"", 1}, {""2Lep"", 2}, {""3Lep"", 3} });; /// ```; /// Note: When labels or indices are defined multiple times, an error message is printed,; /// and the corresponding state is ignored.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:189,Availability,avail,available,189,"////////////////////////////////////////////////////////////////////////////////; /// Access a named state. If a state with this name doesn't exist yet, the state is; /// assigned the next available positive integer.; /// \param[in] stateName Name of the state to be accessed.; /// \return Reference to the category index. If no state exists, it will be created on the fly.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:86,Security,Access,Access,86,"////////////////////////////////////////////////////////////////////////////////; /// Access a named state. If a state with this name doesn't exist yet, the state is; /// assigned the next available positive integer.; /// \param[in] stateName Name of the state to be accessed.; /// \return Reference to the category index. If no state exists, it will be created on the fly.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:267,Security,access,accessed,267,"////////////////////////////////////////////////////////////////////////////////; /// Access a named state. If a state with this name doesn't exist yet, the state is; /// assigned the next available positive integer.; /// \param[in] stateName Name of the state to be accessed.; /// \return Reference to the category index. If no state exists, it will be created on the fly.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:301,Integrability,depend,depends,301,"////////////////////////////////////////////////////////////////////////////////; /// Return a reference to the map of state names to index states.; /// This can be used to manipulate the category.; /// \note Calling this function will **always** trigger recomputations of; /// of **everything** that depends on this category, since in case the map gets; /// manipulated, names or indices might change. Also, the order that states have; /// been inserted in gets lost. This changes what is returned by getOrdinal().",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:86,Usability,Clear,Clear,86,"////////////////////////////////////////////////////////////////////////////////; /// Clear the named range.; /// \note This affects **all** copies of this category, because they are sharing; /// range definitions. This ensures that categories inside a dataset and their; /// counterparts on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:153,Security,access,accesses,153,"////////////////////////////////////////////////////////////////////////////////; /// Add the given state to the given range.; /// \note This creates or accesses a **shared** map with allowed ranges. All copies of this; /// category will share this range such that a category inside a dataset and its; /// counterpart on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:205,Security,access,accesses,205,"////////////////////////////////////////////////////////////////////////////////; /// Add the list of state names to the given range. State names can be separated; /// with ','.; /// \note This creates or accesses a **shared** map with allowed ranges. All copies of this; /// category will share this range such that a category inside a dataset and its; /// counterpart on the outside will both see a modification of the range.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx:13,Energy Efficiency,allocate,allocated,13,"// props was allocated by I/O system, we cannot delete here in case it gets reused",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCategory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCategory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:922,Performance,perform,perform,922,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooChangeTracker.cxx; \class RooChangeTracker; \ingroup Roofitcore. Meta object that tracks value; changes in a given set of RooAbsArgs by registering itself as value; client of these objects. The change tracker can perform an; additional validation step where it also compares the numeric; values of the tracked arguments with reference values to ensure; that values have actually changed. This may be useful in case some; of the tracked observables are in binned datasets where each; observable propagates a valueDirty flag when an event is loaded even; though usually only one observable actually changes.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:1249,Performance,load,loaded,1249,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooChangeTracker.cxx; \class RooChangeTracker; \ingroup Roofitcore. Meta object that tracks value; changes in a given set of RooAbsArgs by registering itself as value; client of these objects. The change tracker can perform an; additional validation step where it also compares the numeric; values of the tracked arguments with reference values to ensure; that values have actually changed. This may be useful in case some; of the tracked observables are in binned datasets where each; observable propagates a valueDirty flag when an event is loaded even; though usually only one observable actually changes.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:945,Security,validat,validation,945,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooChangeTracker.cxx; \class RooChangeTracker; \ingroup Roofitcore. Meta object that tracks value; changes in a given set of RooAbsArgs by registering itself as value; client of these objects. The change tracker can perform an; additional validation step where it also compares the numeric; values of the tracked arguments with reference values to ensure; that values have actually changed. This may be useful in case some; of the tracked observables are in binned datasets where each; observable propagates a valueDirty flag when an event is loaded even; though usually only one observable actually changes.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:215,Security,validat,validation,215,"////////////////////////////////////////////////////////////////////////////////; /// Constructor. The set trackSet contains the observables to be; /// tracked for changes. If checkValues is true an additional; /// validation step is activated where the numeric values of the; /// tracked arguments are compared with reference values ensuring; /// that values have actually changed.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:141,Usability,clear,clearState,141,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if state has changed since last call with clearState=true.; /// If clearState is true, changeState flag will be cleared.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:166,Usability,clear,clearState,166,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if state has changed since last call with clearState=true.; /// If clearState is true, changeState flag will be cleared.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:211,Usability,clear,cleared,211,"////////////////////////////////////////////////////////////////////////////////; /// Returns true if state has changed since last call with clearState=true.; /// If clearState is true, changeState flag will be cleared.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:3,Usability,Clear,Clear,3,"// Clear dirty flag by calling getVal(); //cout << ""RooChangeTracker("" << GetName() << "") clearing isValueDirty"" << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:90,Usability,clear,clearing,90,"// Clear dirty flag by calling getVal(); //cout << ""RooChangeTracker("" << GetName() << "") clearing isValueDirty"" << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:167,Usability,clear,clearState,167,"// cout << ""RooChangeTracker("" << this << "","" << GetName() << "") value of "" << real->GetName() << "" has changed from "" << _realRef[i] << "" to "" << real->getVal() << "" clearState = "" << (clearState?""T"":""F"") << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx:186,Usability,clear,clearState,186,"// cout << ""RooChangeTracker("" << this << "","" << GetName() << "") value of "" << real->GetName() << "" has changed from "" << _realRef[i] << "" to "" << real->getVal() << "" clearState = "" << (clearState?""T"":""F"") << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChangeTracker.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChangeTracker.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1559,Availability,error,errors,1559,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1567,Availability,error,errors,1567,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1790,Availability,error,errors,1790,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1891,Availability,error,error,1891,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1942,Availability,ERROR,ERROR,1942,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:2011,Availability,ERROR,ERROR,2011,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:2033,Availability,error,error,2033,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:2097,Availability,error,errors,2097,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:2135,Availability,error,errors,2135,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1912,Integrability,message,messages,1912,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1282,Modifiability,extend,extended,1282,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1616,Modifiability,extend,extended,1616,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:1749,Safety,predict,predicts,1749,"K, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist) INFINITY ERROR: bin 2 has zero error; * ```; *; * \note In this case, one can use the expected errors of the PDF instead of the data errors:; * ```{.cpp}; * RooChi2Var chi2(..., ..., RooFit::DataError(RooAbsData::Expected), ...);; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:826,Usability,Simpl,Simple,826,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; //////////////////////////////////////////////////////////////////////////////; /** \class RooChi2Var; \ingroup Roofitcore; \brief Simple \f$ \chi^2 \f$ calculation from a binned dataset and a PDF.; *; * It calculates:; *; \f{align*}{; \chi^2 &= \sum_{\mathrm{bins}} \left( \frac{N_\mathrm{PDF,bin} - N_\mathrm{Data,bin}}{\Delta_\mathrm{bin}} \right)^2 \\; N_\mathrm{PDF,bin} &=; \begin{cases}; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,tot} &\text{normal PDF}\\; \mathrm{pdf}(\text{bin centre}) \cdot V_\mathrm{bin} \cdot N_\mathrm{Data,expected} &\text{extended PDF}; \end{cases} \\; \Delta_\mathrm{bin} &=; \begin{cases}; \sqrt{N_\mathrm{PDF,bin}} &\text{if } \mathtt{DataError == RooAbsData::Expected}\\; \mathtt{data{\rightarrow}weightError()} &\text{otherwise} \\; \end{cases}; \f}; * If the dataset doesn't have user-defined errors, errors are assumed to be \f$ \sqrt{N} \f$.; * In extended PDF mode, N_tot (total number of data events) is substituted with N_expected, the; * expected number of events that the PDF predicts.; *; * \note If the dataset has errors stored, empty bins will prevent the calculation of \f$ \chi^2 \f$, because those have; * zero error. This leads to messages like:; * ```; * [#0] ERROR:Eval -- RooChi2Var::RooChi2Var(chi2_GenPdf_data_hist)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:416,Availability,toler,tolerate,416,"////////////////////////////////////////////////////////////////////////////////; /// Calculate chi^2 in partition from firstEvent to lastEvent using given stepSize; /// Throughout the calculation, we use Kahan's algorithm for summing to; /// prevent loss of precision - this is a factor four more expensive than; /// straight addition, but since evaluating the PDF is usually much more; /// expensive than that, we tolerate the additional cost...",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:34,Integrability,depend,depending,34,"// Determine normalization factor depending on type of input function",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:79,Availability,error,errorExt,79,"// cout << ""Chi2Var["" << i << ""] nData = "" << nData << "" nPdf = "" << nPdf << "" errorExt = "" << eExt << "" errorInt = "" << eInt << "" contrib = "" << eExt*eExt/(eInt*eInt) << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx:105,Availability,error,errorInt,105,"// cout << ""Chi2Var["" << i << ""] nData = "" << nData << "" nPdf = "" << nPdf << "" errorExt = "" << eExt << "" errorInt = "" << eInt << "" contrib = "" << eExt*eExt/(eInt*eInt) << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h:15,Availability,error,error,15,"// The default error level for MINUIT error analysis for a chi^2 is 1.0",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h:38,Availability,error,error,38,"// The default error level for MINUIT error analysis for a chi^2 is 1.0",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h:5,Availability,Error,Error,5,"///< Error type store in associated RooDataHist",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h:25,Modifiability,extend,extended,25,"///< Function, P.d.f. or extended p.d.f?",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooChi2Var.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooChi2Var.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:45,Safety,safe,safe,45,"// Making a new compiled class is not thread safe",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:641,Deployability,integrat,integrated,641,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code for a RooAbsReal implementation with; /// class name 'name', taking all elements of 'vars' as constructor; /// arguments. The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. You can add optional expressions; /// for analytical integrals to be advertised by your class in the; /// syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:641,Integrability,integrat,integrated,641,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code for a RooAbsReal implementation with; /// class name 'name', taking all elements of 'vars' as constructor; /// arguments. The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. You can add optional expressions; /// for analytical integrals to be advertised by your class in the; /// syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:357,Modifiability,variab,variables,357,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code for a RooAbsReal implementation with; /// class name 'name', taking all elements of 'vars' as constructor; /// arguments. The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. You can add optional expressions; /// for analytical integrals to be advertised by your class in the; /// syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:105,Performance,load,load,105,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code for a RooAbsReal implementation with; /// class name 'name', taking all elements of 'vars' as constructor; /// arguments. The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. You can add optional expressions; /// for analytical integrals to be advertised by your class in the; /// syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:943,Deployability,integrat,integrated,943,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:943,Integrability,integrat,integrated,943,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:380,Modifiability,variab,variables,380,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:510,Modifiability,variab,variables,510,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:105,Performance,load,load,105,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:943,Deployability,integrat,integrated,943,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:943,Integrability,integrat,integrated,943,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:380,Modifiability,variab,variables,380,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:510,Modifiability,variab,variables,510,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:105,Performance,load,load,105,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsReal implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooFormulaVar; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:105,Performance,load,load,105,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a RooAbsPdf; /// implementation. The difference to makeFunctionInstance() is the base; /// class of the written class (RooAbsPdf instead of RooAbsReal).; ///; /// \see RooClassFactory::makeFunctionInstance(const char*, const char*, RooArgList const&, const char*)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:942,Deployability,integrat,integrated,942,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsPdf implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooGenericPdf; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:942,Integrability,integrat,integrated,942,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsPdf implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooGenericPdf; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:379,Modifiability,variab,variables,379,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsPdf implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooGenericPdf; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:509,Modifiability,variab,variables,509,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsPdf implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooGenericPdf; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:105,Performance,load,load,105,"////////////////////////////////////////////////////////////////////////////////; /// Write, compile and load code and instantiate object for a; /// RooAbsPdf implementation with class name 'name', taking all; /// elements of 'vars' as constructor arguments. The initial value; /// expression is taken to be 'expression' which can be any one-line; /// C++ expression in terms of variables that occur in 'vars'.; ///; /// The returned object is an instance of the object you just defined; /// connected to the variables listed in 'vars'. The name of the; /// object is 'name', its class name Roo<name>Class.; ///; /// This function is an effective compiled replacement of RooGenericPdf; ///; /// You can add optional expressions for analytical integrals to be; /// advertised by your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:862,Deployability,integrat,integrated,862,"////////////////////////////////////////////////////////////////////////////////; /// Write code for a RooAbsReal implementation with class name 'name',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:862,Integrability,integrat,integrated,862,"////////////////////////////////////////////////////////////////////////////////; /// Write code for a RooAbsReal implementation with class name 'name',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:491,Modifiability,variab,variables,491,"////////////////////////////////////////////////////////////////////////////////; /// Write code for a RooAbsReal implementation with class name 'name',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:881,Deployability,integrat,integrated,881,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Write code for a 'baseName' implementation with class name 'className',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral. Skeleton code for internal event generation is added; /// if hasIntGen is true; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:881,Integrability,integrat,integrated,881,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Write code for a 'baseName' implementation with class name 'className',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral. Skeleton code for internal event generation is added; /// if hasIntGen is true; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:510,Modifiability,variab,variables,510,"// namespace; ////////////////////////////////////////////////////////////////////////////////; /// Write code for a 'baseName' implementation with class name 'className',; /// taking RooAbsReal arguments with names listed in argNames and; /// RooAbsCategory arguments with names listed in catArgNames as; /// constructor arguments (use a comma separated list for multiple; /// arguments). The initial value expression is taken to be; /// 'expression' which can be any one-line C++ expression in terms of; /// variables that occur in 'vars'. Skeleton code for handling of; /// analytical integrals is added if hasAnaInt is true. You can add; /// optional expressions for analytical integrals to be advertised by; /// your class in the syntax; /// ""<intObsName>:<CPPAnaIntExpression>;<intObsName,intObsName>:<CPPAnaIntExpression>""; /// where ""<intObsName>"" a name of the observable integrated over and; /// ""<CPPAnaIntExpression>"" is the C++ expression that calculates that; /// integral. Skeleton code for internal event generation is added; /// if hasIntGen is true; ///",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:136,Modifiability,variab,variable,136,"R""(; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:37,Modifiability,VARIAB,VARIABLE,37,"R""(; // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE. )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:20,Deployability,integrat,integration,20,"// Parse analytical integration expression if provided; // Expected form is observable:expression,observable,observable:expression;[...]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:20,Integrability,integrat,integration,20,"// Parse analytical integration expression if provided; // Expected form is observable:expression,observable,observable:expression;[...]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:371,Deployability,INTEGRAT,INTEGRATION,371,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:503,Deployability,INTEGRAT,INTEGRATION,503,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:371,Integrability,INTEGRAT,INTEGRATION,371,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:503,Integrability,INTEGRAT,INTEGRATION,503,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:252,Modifiability,variab,variable,252,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:350,Modifiability,VARIAB,VARIABLES,350,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:520,Modifiability,VARIAB,VARIABLE,520,"R""(; int CLASS_NAME::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char */*rangeName*/) const; {; // Support also using the imaginary unit; using namespace std::complex_literals;; // To be able to also comile C code, we define a variable that behaves like the ""I"" macro from C.; constexpr auto I = 1i;. // LIST HERE OVER WHICH VARIABLES ANALYTICAL INTEGRATION IS SUPPORTED,; // ASSIGN A NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE; // BELOW ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X YOU CAN ALSO; // IMPLEMENT MORE THAN ONE ANALYTICAL INTEGRAL BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:256,Deployability,INTEGRAT,INTEGRATION,256,"R""(double CLASS_NAME::analyticalIntegral(int code, const char *rangeName) const; {; // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY; // getAnalyticalIntegral(). THE MEMBER FUNCTION x.min(rangeName) AND; // x.max(rangeName) WILL RETURN THE INTEGRATION BOUNDARIES FOR EACH; // OBSERVABLE x.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:256,Integrability,INTEGRAT,INTEGRATION,256,"R""(double CLASS_NAME::analyticalIntegral(int code, const char *rangeName) const; {; // RETURN ANALYTICAL INTEGRAL DEFINED BY RETURN CODE ASSIGNED BY; // getAnalyticalIntegral(). THE MEMBER FUNCTION x.min(rangeName) AND; // x.max(rangeName) WILL RETURN THE INTEGRATION BOUNDARIES FOR EACH; // OBSERVABLE x.; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:295,Deployability,INTEGRAT,INTEGRATION,295,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:375,Deployability,CONFIGURAT,CONFIGURATION,375,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:295,Integrability,INTEGRAT,INTEGRATION,295,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:145,Modifiability,VARIAB,VARIABLES,145,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:312,Modifiability,VARIAB,VARIABLE,312,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:375,Modifiability,CONFIG,CONFIGURATION,375,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:496,Safety,SAFE,SAFE,496,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx:1007,Testability,assert,assert,1007,"R""(; int CLASS_NAME::getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool /*staticInitOK*/) const; {; // LIST HERE OVER WHICH VARIABLES INTERNAL GENERATION IS SUPPORTED, ASSIGN A; // NUMERIC CODE FOR EACH SUPPORTED (SET OF) PARAMETERS. THE EXAMPLE BELOW; // ASSIGNS CODE 1 TO INTEGRATION OVER VARIABLE X. YOU CAN ALSO IMPLEMENT; // MORE THAN ONE GENERATOR CONFIGURATION BY REPEATING THE matchArgs; // EXPRESSION MULTIPLE TIMES. IF THE FLAG staticInitOK IS TRUE, THEN IT IS; // SAFE TO PRECALCULATE INTERMEDIATE QUANTITIES IN initGenerator(), IF IT IS; // NOT SET THEN YOU SHOULD NOT ADVERTISE ANY GENERATOR METHOD THAT RELIES ON; // PRECALCULATIONS IN initGenerator(). // if (matchArgs(directVars,generateVars,x)) return 1;; return 0;; }. void CLASS_NAME::generateEvent(int code); {; // GENERATE SET OF OBSERVABLES DEFINED BY RETURN CODE ASSIGNED BY; // getGenerator(). RETURN THE GENERATED VALUES BY ASSIGNING THEM TO THE; // PROXY DATA MEMBERS THAT REPRESENT THE CHOSEN OBSERVABLES. // assert(code==1);; // x = 0;; return;; }; )""",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooClassFactory.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooClassFactory.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:1100,Integrability,depend,dependencies,1100,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCmdConfig.cxx; \class RooCmdConfig; \ingroup Roofitcore. Configurable parser for RooCmdArg named; arguments. It maps the contents of named arguments named to integers,; doubles, strings and TObjects that can be retrieved after processing; a set of RooCmdArgs. The parser also has options to enforce syntax; rules such as (conditionally) required arguments, mutually exclusive; arguments and dependencies between arguments.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:766,Modifiability,Config,Configurable,766,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCmdConfig.cxx; \class RooCmdConfig; \ingroup Roofitcore. Configurable parser for RooCmdArg named; arguments. It maps the contents of named arguments named to integers,; doubles, strings and TObjects that can be retrieved after processing; a set of RooCmdArgs. The parser also has options to enforce syntax; rules such as (conditionally) required arguments, mutually exclusive; arguments and dependencies between arguments.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:184,Availability,error,error,184,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking descriptive name of owner/user which; /// is used as prefix for any warning or error messages; /// generated by this parser",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:190,Integrability,message,messages,190,"////////////////////////////////////////////////////////////////////////////////; /// Constructor taking descriptive name of owner/user which; /// is used as prefix for any warning or error messages; /// generated by this parser",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:3,Integrability,Depend,Dependency,3,"// Dependency cmd list",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:92,Deployability,configurat,configuration,92,"////////////////////////////////////////////////////////////////////////////////; /// Print configuration of parser",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:92,Modifiability,config,configuration,92,"////////////////////////////////////////////////////////////////////////////////; /// Print configuration of parser",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:36,Integrability,depend,dependencies,36,"// Check if this code generates any dependencies",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:3,Integrability,Depend,Dependent,3,"// Dependent command found, add to required list if not already processed",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx:3,Safety,Sanity check,Sanity check,3,"// Sanity check",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCmdConfig.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCmdConfig.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:879,Integrability,depend,depend,879,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCompositeDataStore.cxx; \class RooCompositeDataStore; \ingroup Roofitcore. Combines several disjunct datasets into one. This is useful for simultaneous PDFs; that do not depend on the same observable such as a PDF depending on `x` combined with another one depending; on `y`.; The composite storage will store two different datasets, `{x}` and `{y}`, but they can be passed as a single; dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood. When iterated from start to finish, datasets will be traversed in the order of the category index.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:923,Integrability,depend,depending,923,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCompositeDataStore.cxx; \class RooCompositeDataStore; \ingroup Roofitcore. Combines several disjunct datasets into one. This is useful for simultaneous PDFs; that do not depend on the same observable such as a PDF depending on `x` combined with another one depending; on `y`.; The composite storage will store two different datasets, `{x}` and `{y}`, but they can be passed as a single; dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood. When iterated from start to finish, datasets will be traversed in the order of the category index.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:966,Integrability,depend,depending,966,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooCompositeDataStore.cxx; \class RooCompositeDataStore; \ingroup Roofitcore. Combines several disjunct datasets into one. This is useful for simultaneous PDFs; that do not depend on the same observable such as a PDF depending on `x` combined with another one depending; on `y`.; The composite storage will store two different datasets, `{x}` and `{y}`, but they can be passed as a single; dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood. When iterated from start to finish, datasets will be traversed in the order of the category index.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:132,Energy Efficiency,efficient,efficient,132,"////////////////////////////////////////////////////////////////////////////////; /// Convert map by label to map by index for more efficient internal use",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:132,Energy Efficiency,efficient,efficient,132,"////////////////////////////////////////////////////////////////////////////////; /// Convert map by label to map by index for more efficient internal use",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:86,Deployability,Update,Update,86,"////////////////////////////////////////////////////////////////////////////////; /// Update index category pointer, if it is contained in input argument vars",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:49,Energy Efficiency,efficient,efficient,49,"// Convert map by label to map by index for more efficient internal use",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:42,Modifiability,variab,variables,42,"// for the components, we need the set of variables without the index category",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:16,Energy Efficiency,reduce,reduced,16,"// fill it with reduced versions of components",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load the n-th data point (n='idx') in memory; /// and return a pointer to the internal RooArgSet; /// holding its coordinates.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:122,Modifiability,variab,variables,122,"////////////////////////////////////////////////////////////////////////////////; /// Initialize cache of dataset: attach variables of cache ArgSet; /// to the corresponding TTree branches",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:97,Performance,cache,cache,97,"////////////////////////////////////////////////////////////////////////////////; /// Initialize cache of dataset: attach variables of cache ArgSet; /// to the corresponding TTree branches",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx:135,Performance,cache,cache,135,"////////////////////////////////////////////////////////////////////////////////; /// Initialize cache of dataset: attach variables of cache ArgSet; /// to the corresponding TTree branches",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCompositeDataStore.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCompositeDataStore.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:802,Testability,log,log,802,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConstraintSum.cxx; \class RooConstraintSum; \ingroup Roofitcore. Calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:927,Testability,log,log,927,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConstraintSum.cxx; \class RooConstraintSum; \ingroup Roofitcore. Calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:978,Testability,log,log,978,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConstraintSum.cxx; \class RooConstraintSum; \ingroup Roofitcore. Calculates the sum of the -(log) likelihoods of; a set of RooAbsPfs that represent constraint functions. This class; is used to calculate the composite -log(L) of constraints to be; added to the regular -log(L) in RooAbsPdf::fitTo() with Constrain(..); arguments.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:165,Modifiability,inherit,inherit,165,"////////////////////////////////////////////////////////////////////////////////; /// Constructor with set of constraint p.d.f.s. All elements in constraintSet must inherit from RooAbsPdf.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:101,Testability,log,log,101,"////////////////////////////////////////////////////////////////////////////////; /// Return sum of -log of constraint p.d.f.s.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:98,Modifiability,variab,variables,98,"////////////////////////////////////////////////////////////////////////////////; /// Replace the variables in this RooConstraintSum with the global observables; /// in the dataset if they match by name. This function will do nothing if this; /// RooConstraintSum is configured to not use the global observables stored in; /// datasets.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx:267,Modifiability,config,configured,267,"////////////////////////////////////////////////////////////////////////////////; /// Replace the variables in this RooConstraintSum with the global observables; /// in the dataset if they match by name. This function will do nothing if this; /// RooConstraintSum is configured to not use the global observables stored in; /// datasets.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConstraintSum.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConstraintSum.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx:971,Deployability,integrat,integration,971,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvCoefVar.cxx; \class RooConvCoefVar; \ingroup Roofitcore. Auxiliary class that represents the coefficient; of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object; to be able to interface these coefficient terms with the generic; RooRealIntegral integration mechanism.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvCoefVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx:903,Integrability,interface,interface,903,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvCoefVar.cxx; \class RooConvCoefVar; \ingroup Roofitcore. Auxiliary class that represents the coefficient; of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object; to be able to interface these coefficient terms with the generic; RooRealIntegral integration mechanism.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvCoefVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx:971,Integrability,integrat,integration,971,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvCoefVar.cxx; \class RooConvCoefVar; \ingroup Roofitcore. Auxiliary class that represents the coefficient; of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object; to be able to interface these coefficient terms with the generic; RooRealIntegral integration mechanism.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvCoefVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx:104,Deployability,integrat,integration,104,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integration capabilities of chosen coefficient",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvCoefVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx:104,Integrability,integrat,integration,104,"////////////////////////////////////////////////////////////////////////////////; /// Return analytical integration capabilities of chosen coefficient",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvCoefVar.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvCoefVar.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:776,Energy Efficiency,Efficient,Efficient,776,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvGenContext.cxx; \class RooConvGenContext; \ingroup Roofitcore. Efficient implementation of the generator context; specific for RooAbsAnaConvPdf objects. The physics model is generated; with a truth resolution model and the requested resolution model is generated; separately as a PDF. The convolution variable of the physics model is; subsequently explicitly smeared with the resolution model distribution.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:1014,Modifiability,variab,variable,1014,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvGenContext.cxx; \class RooConvGenContext; \ingroup Roofitcore. Efficient implementation of the generator context; specific for RooAbsAnaConvPdf objects. The physics model is generated; with a truth resolution model and the requested resolution model is generated; separately as a PDF. The convolution variable of the physics model is; subsequently explicitly smeared with the resolution model distribution.; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:20,Modifiability,variab,variable,20,"// Find convolution variable in input and output sets",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:101,Modifiability,variab,variable,101,"// Replace all servers in _pdfVars and _modelVars with those in theEvent, except for the convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:20,Modifiability,variab,variable,20,"// Find convolution variable in input and output sets",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:101,Modifiability,variab,variable,101,"// Replace all servers in _pdfVars and _modelVars with those in theEvent, except for the convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx:33,Modifiability,variab,variable,33,"// Construct smeared convolution variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvGenContext.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvGenContext.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:929,Deployability,integrat,integrator,929,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvIntegrandBinding.cxx; \class RooConvIntegrandBinding; \ingroup Roofitcore. Implementation of RooAbsFunc that represent the integrand; of a generic (numeric) convolution A (x) B so that it can be; passed to a numeric integrator. This is a utility class for; RooNumConvPdf; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:929,Integrability,integrat,integrator,929,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; \file RooConvIntegrandBinding.cxx; \class RooConvIntegrandBinding; \ingroup Roofitcore. Implementation of RooAbsFunc that represent the integrand; of a generic (numeric) convolution A (x) B so that it can be; passed to a numeric integrator. This is a utility class for; RooNumConvPdf; **/",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:209,Deployability,integrat,integrated,209,"// Constructor where func and model; //; // 'func' = func(xprime); // 'model' = model(xprime); //; // and; // 'xprime' is the RRV that should be connected to func and model; // (i.e. the variable that will be integrated over); // 'x' is RRV that represents the value at which the convolution is calculated; // (this variable should _not_ be connected to func and model); //; // this function returns RCBB[x',x] = f[x']*g[x-x'], i.e. the substiturion g[x'] --> g[x-x']; // is taken care internally; //; // The integral of this binding over its 1st arg yields the convolution (f (x) g)[x]; //; // allocate memory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:595,Energy Efficiency,allocate,allocate,595,"// Constructor where func and model; //; // 'func' = func(xprime); // 'model' = model(xprime); //; // and; // 'xprime' is the RRV that should be connected to func and model; // (i.e. the variable that will be integrated over); // 'x' is RRV that represents the value at which the convolution is calculated; // (this variable should _not_ be connected to func and model); //; // this function returns RCBB[x',x] = f[x']*g[x-x'], i.e. the substiturion g[x'] --> g[x-x']; // is taken care internally; //; // The integral of this binding over its 1st arg yields the convolution (f (x) g)[x]; //; // allocate memory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:209,Integrability,integrat,integrated,209,"// Constructor where func and model; //; // 'func' = func(xprime); // 'model' = model(xprime); //; // and; // 'xprime' is the RRV that should be connected to func and model; // (i.e. the variable that will be integrated over); // 'x' is RRV that represents the value at which the convolution is calculated; // (this variable should _not_ be connected to func and model); //; // this function returns RCBB[x',x] = f[x']*g[x-x'], i.e. the substiturion g[x'] --> g[x-x']; // is taken care internally; //; // The integral of this binding over its 1st arg yields the convolution (f (x) g)[x]; //; // allocate memory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:187,Modifiability,variab,variable,187,"// Constructor where func and model; //; // 'func' = func(xprime); // 'model' = model(xprime); //; // and; // 'xprime' is the RRV that should be connected to func and model; // (i.e. the variable that will be integrated over); // 'x' is RRV that represents the value at which the convolution is calculated; // (this variable should _not_ be connected to func and model); //; // this function returns RCBB[x',x] = f[x']*g[x-x'], i.e. the substiturion g[x'] --> g[x-x']; // is taken care internally; //; // The integral of this binding over its 1st arg yields the convolution (f (x) g)[x]; //; // allocate memory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:316,Modifiability,variab,variable,316,"// Constructor where func and model; //; // 'func' = func(xprime); // 'model' = model(xprime); //; // and; // 'xprime' is the RRV that should be connected to func and model; // (i.e. the variable that will be integrated over); // 'x' is RRV that represents the value at which the convolution is calculated; // (this variable should _not_ be connected to func and model); //; // this function returns RCBB[x',x] = f[x']*g[x-x'], i.e. the substiturion g[x'] --> g[x-x']; // is taken care internally; //; // The integral of this binding over its 1st arg yields the convolution (f (x) g)[x]; //; // allocate memory",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:86,Performance,Load,Load,86,"////////////////////////////////////////////////////////////////////////////////; /// Load external input values",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:30,Performance,load,loadValues,30,"//cout << ""RooConvBasBinding::loadValues["" << index << ""] loading value "" << xvector[index] << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx:58,Performance,load,loading,58,"//cout << ""RooConvBasBinding::loadValues["" << index << ""] loading value "" << xvector[index] << endl ;",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.h:26,Modifiability,variab,variables,26,"///< Array of pointers to variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooConvIntegrandBinding.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooConvIntegrandBinding.h
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:509,Availability,down,down,509,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-dim curve of the value of the specified real-valued expression; /// as a function of x. Use the optional precision parameter to control; /// how precisely the smooth curve is rasterized. Use the optional argument set; /// to specify how the expression should be normalized. Use the optional scale; /// factor to rescale the expression after normalization.; /// If shiftToZero is set, the entire curve is shifted down to make the lowest; /// point of the curve go through zero.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:345,Availability,down,down,345,"////////////////////////////////////////////////////////////////////////////////; /// Create a 1-dim curve of the value of the specified real-valued; /// expression as a function of x. Use the optional precision; /// parameter to control how precisely the smooth curve is; /// rasterized. If shiftToZero is set, the entire curve is shifted; /// down to make the lowest point in of the curve go through zero.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:67,Availability,toler,tolerance,67,"// Add OR of points to new curve, skipping duplicate points within tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:86,Performance,Perform,Perform,86,"////////////////////////////////////////////////////////////////////////////////; /// Perform initialization that is common to all curves",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:339,Availability,down,down,339,"////////////////////////////////////////////////////////////////////////////////; /// Add points calculated with the specified function, over the range (xlo,xhi).; /// Add at least minPoints equally spaced points, and add sufficient points so that; /// the maximum deviation from the final straight-line segments is prec*(ymax-ymin),; /// down to a minimum horizontal spacing of resolution*(xhi-xlo).",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:3,Performance,Perform,Perform,3,"// Perform a coarse scan of the function to estimate its y range.; // Save the results so we do not have to re-evaluate at the scan points.; // Adjust minimum number of points to external sampling hint if used",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:359,Availability,down,down,359,"////////////////////////////////////////////////////////////////////////////////; /// Fill the range (x1,x2) with points calculated using func(&x). No point will; /// be added at x1, and a point will always be added at x2. The density of points; /// will be calculated so that the maximum deviation from a straight line; /// approximation is prec*(ymax-ymin) down to the specified minimum horizontal spacing.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:3,Testability,test,test,3,"// test if the midpoint is sufficiently close to a straight line across this interval",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:130,Deployability,Update,Update,130,"////////////////////////////////////////////////////////////////////////////////; /// Add a point with the specified coordinates. Update our y-axis limits.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:3,Deployability,Integrat,Integrate,3,"// Integrate function over this bin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:3,Integrability,Integrat,Integrate,3,"// Integrate function over this bin",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:134,Deployability,integrat,integrating,134,"////////////////////////////////////////////////////////////////////////////////; /// Return average curve value in [xFirst,xLast] by integrating curve between points; /// and dividing by xLast-xFirst",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:134,Integrability,integrat,integrating,134,"////////////////////////////////////////////////////////////////////////////////; /// Return average curve value in [xFirst,xLast] by integrating curve between points; /// and dividing by xLast-xFirst",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Deployability,integrat,integration,13,"// Trapezoid integration from lower edge to first midpoint",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Integrability,integrat,integration,13,"// Trapezoid integration from lower edge to first midpoint",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Deployability,integrat,integration,13,"// Trapezoid integration between midpoints",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Integrability,integrat,integration,13,"// Trapezoid integration between midpoints",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Deployability,integrat,integration,13,"// Trapezoid integration from last midpoint to upper edge",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Integrability,integrat,integration,13,"// Trapezoid integration from last midpoint to upper edge",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:155,Availability,toler,tolerance,155,"////////////////////////////////////////////////////////////////////////////////; /// Find the nearest point to xvalue. Return -1 if distance; /// exceeds tolerance",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:188,Availability,toler,tolerance,188,"////////////////////////////////////////////////////////////////////////////////; /// Return linearly interpolated value of curve at xvalue. If distance; /// to nearest point is less than tolerance, return nearest point value; /// instead",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:124,Availability,error,error,124,"////////////////////////////////////////////////////////////////////////////////; /// Construct filled RooCurve represented error band that captures alpha% of the variations; /// of the curves passed through argument variations, where the percentage alpha corresponds to; /// the central interval fraction of a significance Z",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:124,Availability,error,error,124,"////////////////////////////////////////////////////////////////////////////////; /// Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; /// plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; /// is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:149,Availability,error,error,149,"////////////////////////////////////////////////////////////////////////////////; /// Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; /// plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; /// is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:304,Availability,error,error,304,"////////////////////////////////////////////////////////////////////////////////; /// Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; /// plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; /// is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:449,Availability,error,error,449,"////////////////////////////////////////////////////////////////////////////////; /// Construct filled RooCurve represented error band represent the error added in quadrature defined by the curves arguments; /// plusVar and minusVar corresponding to one-sigma variations of each parameter. The resulting error band, combined used the correlation matrix C; /// is multiplied with the significance parameter Z to construct the equivalent of a Z sigma error band (in Gaussian approximation)",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:13,Availability,error,error,13,"// Calculate error in linear approximation from variations and correlation coefficient",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx:168,Availability,toler,tolerance,168,"////////////////////////////////////////////////////////////////////////////////; /// Return true if curve is identical to other curve allowing for given; /// absolute tolerance on each point compared point.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCurve.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCurve.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:4798,Energy Efficiency,Energy,Energy,4798,"type PDFs, each to be customized; * by a separate customizer instance, that share parameters. To ensure that; * the customized clones also share their respective split leaves, i.e.; * ```; * PDF1(x,y, A) and PDF2(z, A) ---> PDF1_run1(x,y, A_run1) and PDF2_run1(x,y, A_run1); * PDF1_run2(x,y, A_run2) and PDF2_run2(x,y, A_run2); * ```; * feed the same split leaf list into both customizers. In that case, the second customizer; * will pick up the split leaves instantiated by the first customizer and the link between; * the two PDFs is retained.; *; * ### Customising with pre-defined leaves; * If leaf nodes are provided in the sets, the customiser will use them. This is a complete; * example that customises the `yield` parameter, and splits (automatically clones) the; * mean of the Gaussian. This is a short version of the tutorial rf514_RooCustomizer.C.; * ```; * RooRealVar E(""Energy"",""Energy"",0,3000);; *; * RooRealVar meanG(""meanG"",""meanG"", peak[1]);; * RooRealVar fwhm(""fwhm"", ""fwhm"", 5/(2*Sqrt(2*Log(2))));; * RooGaussian gauss(""gauss"", ""gauss"", E, meanG, fwhm);; *; * RooPolynomial linear(""linear"",""linear"",E,RooArgList());; *; * RooRealVar yieldSig(""yieldSig"", ""yieldSig"", 1, 0, 1.E4);; * RooRealVar yieldBkg(""yieldBkg"", ""yieldBkg"", 1, 0, 1.E4);; *; * RooAddPdf model(""model"",""model"",; * RooArgList(gauss,linear),; * RooArgList(yieldSig, yieldBkg));; *; * RooCategory sample(""sample"",""sample"");; * sample.defineType(""BBG1m2T"");; * sample.defineType(""BBG2m2T"");; *; *; * RooArgSet customisedLeaves;; * RooArgSet allLeaves;; *; * RooRealVar mass(""M"", ""M"", 1, 0, 12000);; * RooFormulaVar yield1(""yieldSig_BBG1m2T"",""sigy1"",""M/3.360779"",mass);; * RooFormulaVar yield2(""yieldSig_BBG2m2T"",""sigy2"",""M/2"",mass);; * allLeaves.add(yield1);; * allLeaves.add(yield2);; *; *; * RooCustomizer cust(model, sample, customisedLeaves, &allLeaves);; * cust.splitArg(yieldSig, sample);; * cust.splitArg(meanG, sample);; *; * auto pdf1 = cust.build(""BBG1m2T"");; * auto pdf2 = cust.build(""BBG2m2T"");; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:4807,Energy Efficiency,Energy,Energy,4807,"type PDFs, each to be customized; * by a separate customizer instance, that share parameters. To ensure that; * the customized clones also share their respective split leaves, i.e.; * ```; * PDF1(x,y, A) and PDF2(z, A) ---> PDF1_run1(x,y, A_run1) and PDF2_run1(x,y, A_run1); * PDF1_run2(x,y, A_run2) and PDF2_run2(x,y, A_run2); * ```; * feed the same split leaf list into both customizers. In that case, the second customizer; * will pick up the split leaves instantiated by the first customizer and the link between; * the two PDFs is retained.; *; * ### Customising with pre-defined leaves; * If leaf nodes are provided in the sets, the customiser will use them. This is a complete; * example that customises the `yield` parameter, and splits (automatically clones) the; * mean of the Gaussian. This is a short version of the tutorial rf514_RooCustomizer.C.; * ```; * RooRealVar E(""Energy"",""Energy"",0,3000);; *; * RooRealVar meanG(""meanG"",""meanG"", peak[1]);; * RooRealVar fwhm(""fwhm"", ""fwhm"", 5/(2*Sqrt(2*Log(2))));; * RooGaussian gauss(""gauss"", ""gauss"", E, meanG, fwhm);; *; * RooPolynomial linear(""linear"",""linear"",E,RooArgList());; *; * RooRealVar yieldSig(""yieldSig"", ""yieldSig"", 1, 0, 1.E4);; * RooRealVar yieldBkg(""yieldBkg"", ""yieldBkg"", 1, 0, 1.E4);; *; * RooAddPdf model(""model"",""model"",; * RooArgList(gauss,linear),; * RooArgList(yieldSig, yieldBkg));; *; * RooCategory sample(""sample"",""sample"");; * sample.defineType(""BBG1m2T"");; * sample.defineType(""BBG2m2T"");; *; *; * RooArgSet customisedLeaves;; * RooArgSet allLeaves;; *; * RooRealVar mass(""M"", ""M"", 1, 0, 12000);; * RooFormulaVar yield1(""yieldSig_BBG1m2T"",""sigy1"",""M/3.360779"",mass);; * RooFormulaVar yield2(""yieldSig_BBG2m2T"",""sigy2"",""M/2"",mass);; * allLeaves.add(yield1);; * allLeaves.add(yield2);; *; *; * RooCustomizer cust(model, sample, customisedLeaves, &allLeaves);; * cust.splitArg(yieldSig, sample);; * cust.splitArg(meanG, sample);; *; * auto pdf1 = cust.build(""BBG1m2T"");; * auto pdf2 = cust.build(""BBG2m2T"");; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:888,Integrability,depend,dependents,888,"/*****************************************************************************; * Project: RooFit *; * Package: RooFitCore *; * @(#)root/roofitcore:$Id$; * Authors: *; * WV, Wouter Verkerke, UC Santa Barbara, verkerke@slac.stanford.edu *; * DK, David Kirkby, UC Irvine, dkirkby@uci.edu *; * *; * Copyright (c) 2000-2005, Regents of the University of California *; * and Stanford University. All rights reserved. *; * *; * Redistribution and use in source and binary forms, *; * with or without modification, are permitted according to the terms *; * listed in LICENSE (http://roofit.sourceforge.net/license.txt) *; *****************************************************************************/; /**; * \class RooCustomizer; *; * RooCustomizer is a factory class to produce clones; * of a prototype composite PDF object with the same structure but; * different leaf servers (parameters or dependents).; *; * RooCustomizer supports two kinds of modifications:; *; * - replaceArg(leaf_arg, repl_arg):; * Replaces each occurrence of leaf_arg with repl_arg in the composite pdf.; *; * - splitArg(split_arg):; * Build multiple clones of the same prototype. Each; * occurrence of split_arg is replaced with a clone of split_arg; * named split_arg_[MCstate], where [MCstate] is the name of the; * 'master category state' that indexes the clones to be built.; *; *; * ### Example: Change the decay constant of an exponential for each run; *; * Splitting is particularly useful when building simultaneous fits to; * subsets of the data sample with different background properties.; * In such a case, the user builds a single prototype PDF representing; * the structure of the signal and background and splits the dataset; * into categories with different background properties. Using; * RooCustomizer a PDF for each subfit can be constructed from the; * prototype that has same structure and signal parameters, but; * different instances of the background parameters: e.g.; * ```; * ...; * RooExponential bg(""bg",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:2885,Integrability,depend,depend,2885,"s, but; * different instances of the background parameters: e.g.; * ```; * ...; * RooExponential bg(""bg"",""background"",x,alpha) ;; * RooGaussian sig(""sig"",""signal"",x,mean,sigma) ;; * RooAddPdf pdf(""pdf"",""pdf"",sig,bg,sigfrac) ;; *; * RooDataSet data(""data"",""dataset"",RooArgSet(x,runblock),...); *; * RooCategory runblock(""runblock"",""run block"") ;; * runblock.defineType(""run1"") ;; * runblock.defineType(""run2"") ;; *; * RooArgSet splitLeaves;; * RooCustomizer cust(pdf,runblock,splitLeaves);; * cust.splitArg(alpha,runblock);; *; * RooAbsPdf* pdf_run1 = cust.build(""run1"") ;; * RooAbsPdf* pdf_run2 = cust.build(""run2"") ;; *; * RooSimultaneous simpdf(""simpdf"",""simpdf"",RooArgSet(*pdf_run1,*pdf_run2)); * ```; * If the master category state is a super category, leaves may be split; * by any subset of that master category. E.g. if the master category; * is 'A x B', leaves may be split by A, B or AxB.; *; * In addition to replacing leaf nodes, RooCustomizer clones all branch; * nodes that depend directly or indirectly on modified leaf nodes, so; * that the input pdf is untouched by each build operation.; *; * The customizer owns all the branch nodes including the returned top; * level node, so the customizer should live as longs as the cloned; * composites are needed.; *; * Any leaf nodes that are created by the customizer will be put into; * the leaf list that is passed into the customizers constructor (splitLeaves in; * the above example. The list owner is responsible for deleting these leaf; * nodes after the customizer is deleted.; *; *; * ## Advanced techniques; *; * ### Reuse nodes to customise a different PDF; * By default, the customizer clones the prototype leaf node when splitting a leaf,; * but the user can feed pre-defined split leaves in leaf list. These leaves; * must have the name `<split_leaf>_<splitcat_label>` to be picked up. The list; * of pre-supplied leaves may be partial, any missing split leaves will be auto; * generated.; *; * Another common construction is t",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:4921,Testability,Log,Log,4921,"type PDFs, each to be customized; * by a separate customizer instance, that share parameters. To ensure that; * the customized clones also share their respective split leaves, i.e.; * ```; * PDF1(x,y, A) and PDF2(z, A) ---> PDF1_run1(x,y, A_run1) and PDF2_run1(x,y, A_run1); * PDF1_run2(x,y, A_run2) and PDF2_run2(x,y, A_run2); * ```; * feed the same split leaf list into both customizers. In that case, the second customizer; * will pick up the split leaves instantiated by the first customizer and the link between; * the two PDFs is retained.; *; * ### Customising with pre-defined leaves; * If leaf nodes are provided in the sets, the customiser will use them. This is a complete; * example that customises the `yield` parameter, and splits (automatically clones) the; * mean of the Gaussian. This is a short version of the tutorial rf514_RooCustomizer.C.; * ```; * RooRealVar E(""Energy"",""Energy"",0,3000);; *; * RooRealVar meanG(""meanG"",""meanG"", peak[1]);; * RooRealVar fwhm(""fwhm"", ""fwhm"", 5/(2*Sqrt(2*Log(2))));; * RooGaussian gauss(""gauss"", ""gauss"", E, meanG, fwhm);; *; * RooPolynomial linear(""linear"",""linear"",E,RooArgList());; *; * RooRealVar yieldSig(""yieldSig"", ""yieldSig"", 1, 0, 1.E4);; * RooRealVar yieldBkg(""yieldBkg"", ""yieldBkg"", 1, 0, 1.E4);; *; * RooAddPdf model(""model"",""model"",; * RooArgList(gauss,linear),; * RooArgList(yieldSig, yieldBkg));; *; * RooCategory sample(""sample"",""sample"");; * sample.defineType(""BBG1m2T"");; * sample.defineType(""BBG2m2T"");; *; *; * RooArgSet customisedLeaves;; * RooArgSet allLeaves;; *; * RooRealVar mass(""M"", ""M"", 1, 0, 12000);; * RooFormulaVar yield1(""yieldSig_BBG1m2T"",""sigy1"",""M/3.360779"",mass);; * RooFormulaVar yield2(""yieldSig_BBG2m2T"",""sigy2"",""M/2"",mass);; * allLeaves.add(yield1);; * allLeaves.add(yield2);; *; *; * RooCustomizer cust(model, sample, customisedLeaves, &allLeaves);; * cust.splitArg(yieldSig, sample);; * cust.splitArg(meanG, sample);; *; * auto pdf1 = cust.build(""BBG1m2T"");; * auto pdf2 = cust.build(""BBG2m2T"");; * ```; */",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:12,Integrability,interface,interface,12,"/// Factory interface",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:338,Availability,avail,available,338,"////////////////////////////////////////////////////////////////////////////////; /// Split all arguments in 'set' into individualized clones for each; /// defined state of 'splitCat'. The 'splitCats' category must be; /// subset of or equal to the master category supplied in the; /// customizer constructor.; ///; /// Splitting is only available on customizers created with a master index category",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:334,Availability,avail,available,334,"////////////////////////////////////////////////////////////////////////////////; /// Split all argument 'arg' into individualized clones for each; /// defined state of 'splitCat'. The 'splitCats' category must be; /// subset of or equal to the master category supplied in the; /// customizer constructor.; ///; /// Splitting is only available on customizers created with a master index category",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:185,Integrability,message,message,185,"////////////////////////////////////////////////////////////////////////////////; /// Build a clone of the prototype executing all registered 'replace' rules.; /// If verbose is set, a message is printed for each leaf or branch node; /// modification. The returned head node owns all cloned branch nodes; /// that were created in the cloning process.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:254,Integrability,message,message,254,"////////////////////////////////////////////////////////////////////////////////; /// Build a clone of the prototype executing all registered 'replace'; /// rules and 'split' rules for the masterCat state named; /// 'masterCatState'. If verbose is set a message is printed for; /// each leaf or branch node modification. The returned composite arg; /// is owned by the customizer. This function cannot be called on; /// customizer build with the sterile constructor.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:103,Deployability,configurat,configuration,103,"////////////////////////////////////////////////////////////////////////////////; /// Print customizer configuration details",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:103,Modifiability,config,configuration,103,"////////////////////////////////////////////////////////////////////////////////; /// Print customizer configuration details",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:86,Deployability,Install,Install,86,"////////////////////////////////////////////////////////////////////////////////; /// Install the input RooArgSet as container in which all cloned branches; /// will be stored",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:74,Availability,ERROR,ERROR,74,"// if (!orig) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() input RooAbsArg %s does not exist"",buf)) ;; // }; // if (!subst) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() replacement RooAbsArg %s does not exist"",sep+1)) ;; // }",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx:217,Availability,ERROR,ERROR,217,"// if (!orig) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() input RooAbsArg %s does not exist"",buf)) ;; // }; // if (!subst) {; // throw string(Form(""RooCustomizer::CustIFace::create() ERROR: $Replace() replacement RooAbsArg %s does not exist"",sep+1)) ;; // }",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooCustomizer.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooCustomizer.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:753,Modifiability,variab,variable,753,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of an empty data hist from a RooArgSet defining the dimensions; /// of the data space. The range and number of bins in each dimensions are taken; /// from getMin()getMax(),getBins() of each RooAbsArg representing that; /// dimension.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:846,Modifiability,variab,variably,846,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of an empty data hist from a RooArgSet defining the dimensions; /// of the data space. The range and number of bins in each dimensions are taken; /// from getMin()getMax(),getBins() of each RooAbsArg representing that; /// dimension.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:1004,Modifiability,variab,variable,1004,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of an empty data hist from a RooArgSet defining the dimensions; /// of the data space. The range and number of bins in each dimensions are taken; /// from getMin()getMax(),getBins() of each RooAbsArg representing that; /// dimension.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:783,Modifiability,variab,variable,783,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of a data hist from an existing data collection (binned or unbinned); /// The RooArgSet 'vars' defines the dimensions of the histogram.; /// The range and number of bins in each dimensions are taken; /// from getMin(), getMax(), getBins() of each argument passed.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.; ///; /// If the constructed data hist has less dimensions that in source data collection,; /// all missing dimensions will be projected.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:876,Modifiability,variab,variably,876,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of a data hist from an existing data collection (binned or unbinned); /// The RooArgSet 'vars' defines the dimensions of the histogram.; /// The range and number of bins in each dimensions are taken; /// from getMin(), getMax(), getBins() of each argument passed.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.; ///; /// If the constructed data hist has less dimensions that in source data collection,; /// all missing dimensions will be projected.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:1034,Modifiability,variab,variable,1034,"////////////////////////////////////////////////////////////////////////////////; /// Constructor of a data hist from an existing data collection (binned or unbinned); /// The RooArgSet 'vars' defines the dimensions of the histogram.; /// The range and number of bins in each dimensions are taken; /// from getMin(), getMax(), getBins() of each argument passed.; ///; /// For real dimensions, the fit range and number of bins can be set independently; /// of the plot range and number of bins, but it is advisable to keep the; /// ratio of the plot bin width and the fit bin width an integer value.; /// For category dimensions, the fit ranges always comprises all defined states; /// and each state is always has its individual bin; ///; /// To effectively bin real dimensions with variable bin sizes,; /// construct a RooThresholdCategory of the real dimension to be binned variably.; /// Set the thresholds at the desired bin boundaries, and construct the; /// data hist as a function of the threshold category instead of the real variable.; ///; /// If the constructed data hist has less dimensions that in source data collection,; /// all missing dimensions will be projected.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:10,Deployability,configurat,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:10,Modifiability,config,configuration,10,"// Define configuration for this method",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:12,Availability,toler,tolerance,12,"// Relative tolerance for bin boundary comparison",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:22,Modifiability,variab,variables,22,"// Check if number of variables and names is consistent",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:12,Modifiability,variab,variables,12,"// Check if variables are consistently real-valued",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:21,Modifiability,variab,variable,21,"// Not a real-valued variable",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:78,Modifiability,variab,variable,78,"// The offset is the bin number of the adjusted lower limit of the RooFit; // variable in the original TH1 histogram, starting from zero.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:286,Modifiability,variab,variables,286,"////////////////////////////////////////////////////////////////////////////////; /// Adjust binning specification on first and optionally second and third; /// observable to binning in given reference TH1. Used by constructors; /// that import data from an external TH1.; /// Both the variables in vars and in this RooDataHist are adjusted.; /// @param vars List with variables that are supposed to have their binning adjusted.; /// @param href Reference histogram that dictates the binning; /// @param offset If not nullptr, a possible bin count offset for the axes x,y,z is saved here as Int_t[3]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:369,Modifiability,variab,variables,369,"////////////////////////////////////////////////////////////////////////////////; /// Adjust binning specification on first and optionally second and third; /// observable to binning in given reference TH1. Used by constructors; /// that import data from an external TH1.; /// Both the variables in vars and in this RooDataHist are adjusted.; /// @param vars List with variables that are supposed to have their binning adjusted.; /// @param href Reference histogram that dictates the binning; /// @param offset If not nullptr, a possible bin count offset for the axes x,y,z is saved here as Int_t[3]",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:4,Energy Efficiency,Allocate,Allocate,4,"/// Allocate and initialise an array with desired size and values.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:112,Energy Efficiency,allocate,allocate,112,"////////////////////////////////////////////////////////////////////////////////; /// Initialization procedure: allocate weights array, calculate; /// multipliers needed for N-space to 1-dim array jump table,; /// and fill the internal tree with all bin center coordinates",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:36,Modifiability,variab,variables,36,"// Fill array of LValue pointers to variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate coefficients array",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate and initialize weight array if necessary",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate and initialize weight array",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:36,Modifiability,variab,variables,36,"// Fill array of LValue pointers to variables",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:158,Energy Efficiency,reduce,reduce,158,"////////////////////////////////////////////////////////////////////////////////; /// Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:275,Modifiability,Variab,Variables,275,"////////////////////////////////////////////////////////////////////////////////; /// Calculate bin number of the given coordinates. If only a subset of the internal; /// coordinates are passed, the missing coordinates are taken at their current value.; /// \param[in] coord Variables that are representing the coordinates.; /// \param[in] fast If the variables in `coord` and the ones of the data hist have the; /// same size and layout, `fast` can be set to skip checking that all variables are; /// present in `coord`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:352,Modifiability,variab,variables,352,"////////////////////////////////////////////////////////////////////////////////; /// Calculate bin number of the given coordinates. If only a subset of the internal; /// coordinates are passed, the missing coordinates are taken at their current value.; /// \param[in] coord Variables that are representing the coordinates.; /// \param[in] fast If the variables in `coord` and the ones of the data hist have the; /// same size and layout, `fast` can be set to skip checking that all variables are; /// present in `coord`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:483,Modifiability,variab,variables,483,"////////////////////////////////////////////////////////////////////////////////; /// Calculate bin number of the given coordinates. If only a subset of the internal; /// coordinates are passed, the missing coordinates are taken at their current value.; /// \param[in] coord Variables that are representing the coordinates.; /// \param[in] fast If the variables in `coord` and the ones of the data hist have the; /// same size and layout, `fast` can be set to skip checking that all variables are; /// present in `coord`.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:337,Modifiability,variab,variables,337,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:133,Testability,assert,assert,133,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:173,Testability,assert,assert,173,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:524,Testability,assert,assert,524,"// With fast, caller promises that layout of `coords` is identical to our internal `vars`.; // Previously, this was verified with an assert in debug mode like this:; //; // assert(!fast || coords.hasSameLayout(_vars));; //; // However, there are usecases where the externally provided `coords` have; // different names than the internal variables, even though they correspond; // to each other. For example, if the observables in the computation graph; // are renamed with `redirectServers`. Hence, we can't do a meaningful assert; // here.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:12,Modifiability,variab,variable,12,"// Find the variable that we need values from.; // That's either the variable directly from the external coordinates; // or we find the external one that has the same name as ""internalVar"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:69,Modifiability,variab,variable,69,"// Find the variable that we need values from.; // That's either the variable directly from the external coordinates; // or we find the external one that has the same name as ""internalVar"".",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Modifiability,Variab,Variable,3,"// Variable is not in external coordinates. Use current internal value.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:76,Testability,assert,assert,76,"// If fast is on, users promise that the sets have the same layout:; //; // assert(!fast || strcmp(internalVar->GetName(), theVar->GetName()) == 0);; //; // This assert is commented out for the same reasons that applied to the; // other assert explained above.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:162,Testability,assert,assert,162,"// If fast is on, users promise that the sets have the same layout:; //; // assert(!fast || strcmp(internalVar->GetName(), theVar->GetName()) == 0);; //; // This assert is commented out for the same reasons that applied to the; // other assert explained above.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:237,Testability,assert,assert,237,"// If fast is on, users promise that the sets have the same layout:; //; // assert(!fast || strcmp(internalVar->GetName(), theVar->GetName()) == 0);; //; // This assert is commented out for the same reasons that applied to the; // other assert explained above.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:138,Safety,safe,safe,138,"////////////////////////////////////////////////////////////////////////////////; /// A vectorized version of interpolateDim for boundary safe quadratic; /// interpolation of one dimensional histograms.; ///; /// \param[out] output An array of interpolated weights corresponding to the; /// values in xVals.; /// \param[in] xVals An array of event coordinates for which the weights should be; /// calculated.; /// \param[in] correctForBinSize Enable the inverse bin volume correction factor.; /// \param[in] cdfBoundaries Enable the special boundary condition for a cdf:; /// Underflow bins are assumed to have weight zero and; /// overflow bins have weight one. Otherwise, the; /// histogram is mirrored at the boundaries for the; /// interpolation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Modifiability,Extend,Extend,3,"// Extend coordinates and weights with one extra point before the first bin; // and one extra point after the last bin. This means the original histogram; // bins span elements 1 to nBins in coordsExt and weightsExt",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:138,Safety,safe,safe,138,"////////////////////////////////////////////////////////////////////////////////; /// A vectorized version of interpolateDim for boundary safe linear; /// interpolation of one dimensional histograms.; ///; /// \param[out] output An array of interpolated weights corresponding to the; /// values in xVals.; /// \param[in] xVals An array of event coordinates for which the weights should be; /// calculated.; /// \param[in] correctForBinSize Enable the inverse bin volume correction factor.; /// \param[in] cdfBoundaries Enable the special boundary condition for a cdf:; /// Underflow bins are assumed to have weight zero and; /// overflow bins have weight one. Otherwise, the; /// histogram is mirrored at the boundaries for the; /// interpolation.",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx:3,Modifiability,Extend,Extend,3,"// Extend coordinates and weights with one extra point before the first bin; // and one extra point after the last bin. This means the original histogram; // bins span elements 1 to nBins in coordsExt and weightsExt",MatchSource.CODE_COMMENT,roofit/roofitcore/src/RooDataHist.cxx,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/src/RooDataHist.cxx
